{"ast":null,"code":"import _classCallCheck from\"/Users/js/Dev/my-first-reactor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/js/Dev/my-first-reactor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/js/Dev/my-first-reactor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/js/Dev/my-first-reactor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import Loader from'../utils/Loader.js';var Geolocate=/*#__PURE__*/function(_React$Component){_inherits(Geolocate,_React$Component);var _super=_createSuper(Geolocate);function Geolocate(props){var _this;_classCallCheck(this,Geolocate);_this=_super.call(this,props);_this.getCurrentPosition=function(){window.navigator.geolocation.getCurrentPosition(//position => console.log(position.coords.longitude),\nfunction(position){_this.props.returnCurrentPosition(position.coords.longitude,position.coords.latitude);console.log(\"getCurrentPosition => coords ^^^^^^^^^^^ \".concat(position.coords.longitude,\", \").concat(position.coords.latitude));_this.setState({longitude:position.coords.longitude,latitude:position.coords.latitude});/*\n                try {\n                    //if (!this.props.currentPositionExists()) {\n                        this.props.returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n                    //}\n                }catch(err) {\n                }\n                */},function(err){console.log(err);_this.setState({errorMessage:err.message});});};_this.getLocation=function(){return\"\".concat(_this.state.latitude.toFixed(6),\", \").concat(_this.state.longitude.toFixed(6),\" \");};_this.percent=window.innerWidth<700?'twentyfivePercent mt--70 mb--70':'fiftyPercent mt--40 mb--40';_this.loading=function(){return/*#__PURE__*/React.createElement(\"div\",{className:_this.percent},/*#__PURE__*/React.createElement(Loader,{isMotionOn:_this.props.isMotionOn}));};_this.latlon=function(){return _this.state.latitude+\",\"+_this.state.longitude;};_this.state={longitude:null,latitude:null,errorMessage:null,returnCurrentPosition:props.returnCurrentPosition,currentPositionExists:props.currentPositionExists};return _this;}_createClass(Geolocate,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.timerID=setInterval(function(){return _this2.tick();},5000);}},{key:\"tick\",value:function tick(){this.getCurrentPosition();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){clearInterval(this.timerID);}},{key:\"render\",value:function render(){var errorExists=this.state.errorMessage?true:false;var latExists=this.state.latitude?true:false;var errMessage=this.state.errorMessage;var gelocationStatus=latExists?this.getLocation():this.loading();gelocationStatus=errorExists?\"\".concat(errMessage):gelocationStatus;/*\n        if (latExists) {\n            if (!this.props.currentPositionExists()) {\n                this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n            }\n        }\n        */return/*#__PURE__*/React.createElement(\"div\",{className:\"color-yellow greet\"},gelocationStatus);}}]);return Geolocate;}(React.Component);export default Geolocate;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js"],"names":["React","Loader","Geolocate","props","getCurrentPosition","window","navigator","geolocation","position","returnCurrentPosition","coords","longitude","latitude","console","log","setState","err","errorMessage","message","getLocation","state","toFixed","percent","innerWidth","loading","isMotionOn","latlon","currentPositionExists","timerID","setInterval","tick","clearInterval","errorExists","latExists","errMessage","gelocationStatus","Component"],"mappings":"okBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,C,GAEMC,CAAAA,S,kHACF,mBAAYC,KAAZ,CAAmB,2CACf,uBAAMA,KAAN,EADe,MAUnBC,kBAVmB,CAUE,UAAM,CACvBC,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BH,kBAA7B,CACI;AACD,SAAAI,QAAQ,CAAI,CAEP,MAAKL,KAAL,CAAWM,qBAAX,CAAiCD,QAAQ,CAACE,MAAT,CAAgBC,SAAjD,CAA4DH,QAAQ,CAACE,MAAT,CAAgBE,QAA5E,EACAC,OAAO,CAACC,GAAR,oDAAwDN,QAAQ,CAACE,MAAT,CAAgBC,SAAxE,cAAsFH,QAAQ,CAACE,MAAT,CAAgBE,QAAtG,GACA,MAAKG,QAAL,CAAc,CACVJ,SAAS,CAAEH,QAAQ,CAACE,MAAT,CAAgBC,SADjB,CAEVC,QAAQ,CAAEJ,QAAQ,CAACE,MAAT,CAAgBE,QAFhB,CAAd,EAIA;;;;;;;kBAQH,CAlBL,CAmBI,SAAAI,GAAG,CAAI,CACHH,OAAO,CAACC,GAAR,CAAYE,GAAZ,EACA,MAAKD,QAAL,CAAc,CACVE,YAAY,CAAED,GAAG,CAACE,OADR,CAAd,EAIH,CAzBL,EA2BH,CAtCkB,OAmDnBC,WAnDmB,CAmDL,2BAAS,MAAKC,KAAL,CAAWR,QAAX,CAAoBS,OAApB,CAA4B,CAA5B,CAAT,cAA4C,MAAKD,KAAL,CAAWT,SAAX,CAAqBU,OAArB,CAA6B,CAA7B,CAA5C,OAnDK,OAoDnBC,OApDmB,CAoDRjB,MAAM,CAACkB,UAAP,CAAoB,GAArB,CAA4B,iCAA5B,CAAgE,4BApDvD,OAqDnBC,OArDmB,CAqDT,8BAAM,2BAAK,SAAS,CAAE,MAAKF,OAArB,eACJ,oBAAC,MAAD,EAAQ,UAAU,CAAE,MAAKnB,KAAL,CAAWsB,UAA/B,EADI,CAAN,EArDS,OAwDnBC,MAxDmB,CAwDV,iBAAM,OAAKN,KAAL,CAAWR,QAAX,CAAsB,GAAtB,CAA4B,MAAKQ,KAAL,CAAWT,SAA7C,EAxDU,CAEf,MAAKS,KAAL,CAAa,CACTT,SAAS,CAAE,IADF,CAETC,QAAQ,CAAE,IAFD,CAGTK,YAAY,CAAE,IAHL,CAITR,qBAAqB,CAAEN,KAAK,CAACM,qBAJpB,CAKTkB,qBAAqB,CAAExB,KAAK,CAACwB,qBALpB,CAAb,CAFe,aASlB,C,mFA8BmB,iBAChB,KAAKC,OAAL,CAAeC,WAAW,CACtB,iBAAM,CAAA,MAAI,CAACC,IAAL,EAAN,EADsB,CAEtB,IAFsB,CAA1B,CAIH,C,mCACM,CACH,KAAK1B,kBAAL,GACH,C,mEACsB,CACnB2B,aAAa,CAAC,KAAKH,OAAN,CAAb,CACH,C,uCAOQ,CACL,GAAMI,CAAAA,WAAW,CAAI,KAAKZ,KAAL,CAAWH,YAAZ,CAA4B,IAA5B,CAAmC,KAAvD,CACA,GAAMgB,CAAAA,SAAS,CAAI,KAAKb,KAAL,CAAWR,QAAZ,CAAwB,IAAxB,CAA+B,KAAjD,CACA,GAAMsB,CAAAA,UAAU,CAAG,KAAKd,KAAL,CAAWH,YAA9B,CACA,GAAIkB,CAAAA,gBAAgB,CAAIF,SAAD,CAAc,KAAKd,WAAL,EAAd,CAAmC,KAAKK,OAAL,EAA1D,CACAW,gBAAgB,CAAIH,WAAD,WAAmBE,UAAnB,EAAkCC,gBAArD,CACA;;;;;;UAOA,mBAAO,2BAAK,SAAS,CAAC,oBAAf,EAAqCA,gBAArC,CAAP,CACH,C,uBAxEmBnC,KAAK,CAACoC,S,EA2E9B,cAAelC,CAAAA,SAAf","sourcesContent":["import React from 'react';\nimport Loader from '../utils/Loader.js';\n\nclass Geolocate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            longitude: null,\n            latitude: null,\n            errorMessage: null,\n            returnCurrentPosition: props.returnCurrentPosition,\n            currentPositionExists: props.currentPositionExists\n        }\n    }\n    getCurrentPosition = () => {\n        window.navigator.geolocation.getCurrentPosition(\n            //position => console.log(position.coords.longitude),\n           position => {\n\n                this.props.returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n                console.log(`getCurrentPosition => coords ^^^^^^^^^^^ ${position.coords.longitude}, ${position.coords.latitude}`)\n                this.setState({\n                    longitude: position.coords.longitude,\n                    latitude: position.coords.latitude,\n                });\n                /*\n                try {\n                    //if (!this.props.currentPositionExists()) {\n                        this.props.returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n                    //}\n                }catch(err) {\n                }\n                */\n            },\n            err => {\n                console.log(err)\n                this.setState({\n                    errorMessage: err.message\n                });\n\n            }\n        )\n    }\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            5000\n        );\n    }\n    tick() {\n        this.getCurrentPosition();\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n    getLocation = () => `${this.state.latitude.toFixed(6)}, ${this.state.longitude.toFixed(6)} `;\n    percent = (window.innerWidth < 700) ? 'twentyfivePercent mt--70 mb--70' : 'fiftyPercent mt--40 mb--40';\n    loading = () => <div className={this.percent}>\n                <Loader isMotionOn={this.props.isMotionOn}/>\n            </div>;\n    latlon = () => this.state.latitude + \",\" + this.state.longitude;\n    render() {\n        const errorExists = (this.state.errorMessage) ? true : false;\n        const latExists = (this.state.latitude) ? true : false;\n        const errMessage = this.state.errorMessage;\n        let gelocationStatus = (latExists) ? this.getLocation() : this.loading();\n        gelocationStatus = (errorExists) ? `${errMessage}` : gelocationStatus;\n        /*\n        if (latExists) {\n            if (!this.props.currentPositionExists()) {\n                this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n            }\n        }\n        */\n        return <div className=\"color-yellow greet\">{gelocationStatus}</div>\n    };\n}\n\nexport default Geolocate;"]},"metadata":{},"sourceType":"module"}