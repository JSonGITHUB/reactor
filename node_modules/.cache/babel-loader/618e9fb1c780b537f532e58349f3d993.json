{"ast":null,"code":"export const getTwoHighestScores = index => {\n  const player = players[index];\n  const scores = player.surfScores;\n  const [highestIndex, secondHighestIndex] = findTwoHighestIndices(scores);\n  //console.log(`getTwoHighestScores => playerIndex: ${index} player: ${JSON.stringify(player,null,2)} name: ${(player.player || player.name)}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n  return {\n    highScoreIndex: highestIndex,\n    secondHighScoreIndex: secondHighestIndex\n  };\n};\nexport const findTwoHighestIndices = scores => {\n  const newScores = scores !== undefined ? scores : ['', '', '', '', '', '', '', '', '', ''];\n  let highestIndex = -1;\n  let secondHighestIndex = -1;\n  let highestScore = -Infinity;\n  let secondHighestScore = -Infinity;\n  for (let i = 0; i < newScores.length; i++) {\n    if (newScores[i] > highestScore) {\n      secondHighestIndex = highestIndex;\n      secondHighestScore = highestScore;\n      highestIndex = i;\n      highestScore = newScores[i];\n    } else if (newScores[i] > secondHighestScore) {\n      secondHighestIndex = i;\n      secondHighestScore = newScores[i];\n    }\n  }\n  return [highestIndex, secondHighestIndex];\n};","map":{"version":3,"names":["getTwoHighestScores","index","player","players","scores","surfScores","highestIndex","secondHighestIndex","findTwoHighestIndices","highScoreIndex","secondHighScoreIndex","newScores","undefined","highestScore","Infinity","secondHighestScore","i","length"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/HighScores.js"],"sourcesContent":["export const getTwoHighestScores = (index) => {\n    const player = players[index];\n    const scores = player.surfScores;\n    const [highestIndex, secondHighestIndex] = findTwoHighestIndices(scores);\n    //console.log(`getTwoHighestScores => playerIndex: ${index} player: ${JSON.stringify(player,null,2)} name: ${(player.player || player.name)}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n    return {\n        highScoreIndex: highestIndex,\n        secondHighScoreIndex: secondHighestIndex\n    };\n};\n\nexport const findTwoHighestIndices = (scores) => {\n    const newScores = (scores !== undefined) ? scores : ['', '', '', '', '', '', '', '', '', ''];\n    let highestIndex = -1;\n    let secondHighestIndex = -1;\n    let highestScore = -Infinity;\n    let secondHighestScore = -Infinity;\n    for (let i = 0; i < newScores.length; i++) {\n        if (newScores[i] > highestScore) {\n            secondHighestIndex = highestIndex;\n            secondHighestScore = highestScore;\n            highestIndex = i;\n            highestScore = newScores[i];\n        } else if (newScores[i] > secondHighestScore) {\n            secondHighestIndex = i;\n            secondHighestScore = newScores[i];\n        }\n    }\n    return [highestIndex, secondHighestIndex];\n};"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAIC,KAAK,IAAK;EAC1C,MAAMC,MAAM,GAAGC,OAAO,CAACF,KAAK,CAAC;EAC7B,MAAMG,MAAM,GAAGF,MAAM,CAACG,UAAU;EAChC,MAAM,CAACC,YAAY,EAAEC,kBAAkB,CAAC,GAAGC,qBAAqB,CAACJ,MAAM,CAAC;EACxE;EACA,OAAO;IACHK,cAAc,EAAEH,YAAY;IAC5BI,oBAAoB,EAAEH;EAC1B,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAIJ,MAAM,IAAK;EAC7C,MAAMO,SAAS,GAAIP,MAAM,KAAKQ,SAAS,GAAIR,MAAM,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAC5F,IAAIE,YAAY,GAAG,CAAC,CAAC;EACrB,IAAIC,kBAAkB,GAAG,CAAC,CAAC;EAC3B,IAAIM,YAAY,GAAG,CAACC,QAAQ;EAC5B,IAAIC,kBAAkB,GAAG,CAACD,QAAQ;EAClC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,SAAS,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,IAAIL,SAAS,CAACK,CAAC,CAAC,GAAGH,YAAY,EAAE;MAC7BN,kBAAkB,GAAGD,YAAY;MACjCS,kBAAkB,GAAGF,YAAY;MACjCP,YAAY,GAAGU,CAAC;MAChBH,YAAY,GAAGF,SAAS,CAACK,CAAC,CAAC;IAC/B,CAAC,MAAM,IAAIL,SAAS,CAACK,CAAC,CAAC,GAAGD,kBAAkB,EAAE;MAC1CR,kBAAkB,GAAGS,CAAC;MACtBD,kBAAkB,GAAGJ,SAAS,CAACK,CAAC,CAAC;IACrC;EACJ;EACA,OAAO,CAACV,YAAY,EAAEC,kBAAkB,CAAC;AAC7C,CAAC"},"metadata":{},"sourceType":"module"}