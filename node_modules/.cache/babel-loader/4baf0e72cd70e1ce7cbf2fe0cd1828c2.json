{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/Tide.js\";\nimport React, { useState, useEffect } from 'react';\nimport Loader from '../utils/Loader.js'; //import tide from '../../assets/images/tide.png'\n\nimport arrowDown from '../../assets/images/ArrowDown.png';\nimport arrowUp from '../../assets/images/ArrowUp.png';\n\nconst Tide = ({\n  setTide,\n  display,\n  isMotionOn\n}) => {\n  const [status, setStatus] = useState({\n    tide: null,\n    tideDirection: localStorage.tideDirection || \"?\",\n    height: null\n  });\n\n  const getCurrentTime = () => {\n    let currentTime = new Date();\n    const year = currentTime.getFullYear();\n    const currentMonth = currentTime.getMonth() + 1;\n    const month = currentMonth < 10 ? `0${currentMonth}` : currentMonth;\n    const currentDate = currentTime.getDate();\n    const date = currentDate < 10 ? `0${currentDate}` : currentDate;\n    const currentHour = currentTime.getHours();\n    const hours = currentHour < 10 ? `0${currentHour}` : currentHour;\n    const startHour = currentHour - 1 < 10 ? `0${currentHour - 1}` : currentHour - 1;\n    const currentMinutes = currentTime.getMinutes();\n    const minutes = currentMinutes < 10 ? `0${currentMinutes}` : currentMinutes;\n    const getEndTime = `${year}${month}${date}%20${hours}:${minutes}`;\n    const getStartTime = `${year}${month}${date}%20${startHour}:00`;\n    currentTime = `${year}${month}${date}%20${hours}:${minutes}`;\n    return {\n      hours,\n      minutes,\n      date,\n      month,\n      year,\n      currentTime,\n      startTime: getStartTime,\n      endTime: getEndTime\n    };\n  };\n\n  const getTideData = () => {\n    console.log(`getTideData ->`);\n    let data;\n\n    const returnJSON = response => response.json();\n\n    const returnRejection = response => Promise.reject({\n      status: response.status,\n      data\n    });\n\n    const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n\n    console.log(`Tide   - getStartTime: ${getCurrentTime().startTime} => getEndTime: ${getCurrentTime().endTime}`);\n    const uriMLLW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().startTime}&end_date=${getCurrentTime().endTime}&station=9410230&product=water_level&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n    const uriMHHW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MHHW&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n    const uriMHW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MHW&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n    const uriMTL = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MTL&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n    const uriMSL = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MSL&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n    const uriNAVD = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_level&datum=NAVD&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n    const uriSTND = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_level&datum=STND&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n    const uriLaJolla = `https://tidesandcurrents.noaa.gov/api/datagetter?product=predictions&amp;application=NOS.COOPS.TAC.WL&amp;begin_date=20201020&amp;end_date=20201021&amp;datum=MLLW&amp;station=9410230&amp;time_zone=lst_ldt&amp;units=english&amp;interval=hilo&amp;format=json`;\n    const uri = uriMLLW;\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\n    const parseTideData = data => {\n      const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1) || 1;\n      console.log(`tideData => ${JSON.stringify(data, null, 2)}`);\n      setTide(waterLevel);\n      setStatus(prevState => ({ ...prevState,\n        station: data.metadata.name,\n        tide: waterLevel > 3 ? \"high\" : waterLevel < 2 ? \"low\" : \"medium\",\n        height: waterLevel\n      }));\n    };\n\n    const getTideHour = tide => Number(tide.t.split(\" \")[1].split(\":\")[0]);\n\n    const getTideMinutes = tide => Number(tide.t.split(\" \")[1].split(\":\")[1]); //        const getTideTime = (tide) => (getTideHour(tide) === getCurrentTime().hours) ? getTideHour(tide) : tide;\n\n\n    const getTideTime = tide => `${getTideHour(tide)}:${getTideMinutes(tide)}`;\n\n    const getTideHeight = tide => Number(tide.v); //const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`;\n\n\n    fetch(proxyurl + uri).then(response => validate(response)).then(data => {\n      const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1);\n      console.log(`tideData => ${JSON.stringify(data, null, 2)} \\ncurrentTime: ${getCurrentTime().hours}:${getCurrentTime().minutes}\\nwaterLever: ${waterLevel}`);\n      setTide(waterLevel);\n      setStatus(prevState => ({ ...prevState,\n        station: data.metadata.name,\n        tide: waterLevel > 3 ? \"high\" : waterLevel < 2 ? \"low\" : \"medium\",\n        height: waterLevel\n      }));\n    }).catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n  };\n\n  const getDirection = () => {\n    console.log(`getDirection ->`);\n    let data;\n\n    const returnJSON = response => response.json();\n\n    const returnRejection = response => Promise.reject({\n      status: response.status,\n      data\n    });\n\n    const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n\n    console.log(`Tide   - getStartTime: ${getCurrentTime().startTime} => getEndTime: ${getCurrentTime().endTime}`);\n    const tideDaily = `https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?product=predictions&amp;application=NOS.COOPS.TAC.WL&amp;begin_date=${getCurrentTime().year}${getCurrentTime().month}${getCurrentTime().date}&amp;end_date=${getCurrentTime().year}${getCurrentTime().month}${getCurrentTime().date}&amp;datum=MLLW&amp;station=9410230&amp;time_zone=lst_ldt&amp;units=english&amp;interval=hilo&amp;format=json`;\n    const uri = tideDaily;\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    console.log(`tideDaily: ${tideDaily}`);\n\n    const getTideHour = tide => Number(tide.t.split(\" \")[1].split(\":\")[0]);\n\n    const getTideMinutes = tide => Number(tide.t.split(\" \")[1].split(\":\")[1]); //        const getTideTime = (tide) => (getTideHour(tide) === getCurrentTime().hours) ? getTideHour(tide) : tide;\n\n\n    const getTideTime = tide => `${getTideHour(tide)}:${getTideMinutes(tide)}`;\n\n    const getTideHeight = tide => Number(tide.v);\n\n    const getTide = tide => tide.type; //const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`;\n\n\n    fetch(uri).then(response => validate(response)).then(data => {\n      console.log(`tideDirection => ${JSON.stringify(data, null, 2)}`);\n      const minutes = data.predictions.map(tide => getTideMinutes(tide));\n      const hours = data.predictions.map(tide => getTideHour(tide));\n      const times = data.predictions.map(tide => getTideTime(tide));\n      const heights = data.predictions.map(tide => getTideHeight(tide));\n      const tides = data.predictions.map(tide => getTide(tide));\n\n      const checkTide = hour => hour >= getCurrentTime().hours;\n\n      const nextTideIndex = hours.findIndex(checkTide);\n      const pastLastTide = Number(getCurrentTime().hours - hours[nextTideIndex - 1]);\n\n      const minutesUntilNextTide = () => Number(minutes[nextTideIndex] - getCurrentTime().minutes);\n\n      const hoursUntilNextTide = () => Number(hours[nextTideIndex] - getCurrentTime().hours);\n\n      const untilNextTide = () => hoursUntilNextTide() < 1 ? minutesUntilNextTide() : hoursUntilNextTide();\n\n      const closerTideIndex = pastLastTide >= untilNextTide() ? nextTideIndex : nextTideIndex - 1;\n      const nextTide = tides[nextTideIndex];\n      const nextHeight = heights[nextTideIndex];\n      const lastHeight = heights[nextTideIndex - 1];\n      const nextHour = Number(times[nextTideIndex].split(':')[0]) > 12 ? Number(times[nextTideIndex].split(':')[0]) - 12 : Number(times[nextTideIndex].split(':')[0]);\n      const nextMinutes = times[nextTideIndex].split(':')[1] < 10 ? `0${times[nextTideIndex].split(':')[1]}` : times[nextTideIndex].split(':')[1];\n      const nextTime = `${nextHour}:${nextMinutes}`;\n      const lastTide = tides[nextTideIndex - 1];\n\n      const convertTide = tide => tide === 'L' ? 'low' : 'high';\n\n      const getCurrentTide = convertTide(tides[closerTideIndex]);\n      const currentTide = pastLastTide !== untilNextTide() ? getCurrentTide : 'medium';\n      console.log(`CURRENT ${currentTide} HOUR: ${getCurrentTime().hours} TIMES: ${hours}\\n next ${nextTide} tide in ${untilNextTide()} hours\\n previous ${lastTide} tide was ${pastLastTide} hours ago tideMinutes: ${getCurrentTime().minutes}`);\n      setStatus(prevState => ({ ...prevState,\n        tide: currentTide,\n        tideDirection: nextTide === 'L' ? \"DOWN\" : \"UP\",\n        previousTide: lastHeight,\n        nextTide: nextHeight,\n        nextPhase: convertTide(nextTide),\n        nextTime: nextTime,\n        untilNextTide: untilNextTide()\n      }));\n    }).catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n  };\n\n  const getAllData = () => {\n    getTideData();\n    getDirection();\n  };\n\n  useEffect(() => {\n    getAllData();\n    /*  \t\t\n    const timerID = setInterval(\n        () => getAllData(),\n        300000\n    );\n    return function cleanUp () {\n        clearInterval(timerID);\n    }\n    */\n  }, []);\n\n  const previousTide = () => localStorage.getItem(\"tide\") ? Number(localStorage.getItem(\"tide\")) : 0;\n\n  const notEqual = () => Number(previousTide()) !== Number(status.height) ? true : false;\n\n  const greaterThan = () => Number(previousTide()) > Number(status.height) ? true : false;\n\n  const getDownArrow = () => {\n    localStorage.setItem(\"tideDirection\", \"DOWN\");\n    return /*#__PURE__*/React.createElement(\"img\", {\n      className: \"arrows mb--2\",\n      src: arrowDown,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 16\n      }\n    });\n  };\n\n  const getUpArrow = () => {\n    localStorage.setItem(\"tideDirection\", \"UP\");\n    return /*#__PURE__*/React.createElement(\"img\", {\n      className: \"arrows mb--2\",\n      src: arrowUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 16\n      }\n    });\n  };\n\n  const getTideDirection = () => status.tideDirection === \"DOWN\" ? getDownArrow() : getUpArrow(); //getTideDirection = () => (notEqual() && greaterThan()) ? \"DOWN\" : status.tideDirection;\n\n\n  const setLocalTide = () => localStorage.setItem(\"tide\", Number(status.height));\n\n  const setLocalTideDirection = () => localStorage.setItem(\"tideDirection\", status.tideDirection);\n\n  const fixHours = () => getCurrentTime().hours > 12 ? Number(getCurrentTime().hours - 12) : getCurrentTime().hours;\n\n  const getCurrentTide = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"r-10 m-5 p-10 bg-lite white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 34\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 29\n    }\n  }, getTideDirection()), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 29\n    }\n  }, status.height, \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"greet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 50\n    }\n  }, \" ft. \"), status.tide), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"description pt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 29\n    }\n  }, \"from: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"greet bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 39\n    }\n  }, status.previousTide ? status.previousTide.toFixed(1) : '', \"' \"), display === 'narrow' ? /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 59\n    }\n  }) : '', \"to: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"greet bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 74\n    }\n  }, status.nextTide ? status.nextTide.toFixed(1) : '', \"'\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 164\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"greet bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 33\n    }\n  }, status.nextPhase, \" in \", status.untilNextTide, \" \", display === 'narrow' ? 'hr' : 'hour', status.untilNextTide === 1 ? '' : 's', \" \"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 194\n    }\n  }), \"at: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"greet bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 37\n    }\n  }, status.nextTime)));\n\n  const percent = 'twentyfivePercent mt--70 mb--70';\n\n  const loading = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: percent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    isMotionOn: isMotionOn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 25\n    }\n  })); //console.log(`tide direction: ${status.tideDirection} previous height: ${previousTide()} height: ${status.height} == ${previousTide() === Number(status.height)}`)\n\n\n  setLocalTide();\n  setLocalTideDirection();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 12\n    }\n  }, getCurrentTide());\n};\n\nexport default Tide;\n/*   sample url data\n{\n    \"metadata\": {\n        \"id\":\"8454000\",\n        \"name\":\"Providence\",\n        \"lat\":\"41.8071\",\n        \"lon\":\"-71.4012\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2013-01-01 10:00\", \n            \"v\":\"0.072\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:06\", \n            \"v\":\"0.095\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:12\", \n            \"v\":\"0.115\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:18\", \n            \"v\":\"0.138\", \n            \"s\":\"0.004\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:24\", \n            \"v\":\"0.167\", \n            \"s\":\"0.004\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        }\n    ]\n}\n*/\n\n/* Sample temp data\nmetadata\":{\n    \"id\":\"8454000\",\n    \"name\":\"Providence\",\n    \"lat\":\"41.8071\",\n    \"lon\":\"-71.4012\"\n}, \n\"data\": [\n    {\n        \"t\":\"2013-08-08 15:00\", \n        \"v\":\"72.5\", \n        \"f\":\"0,0,0\"\n    },\n    {\n        \"t\":\"2013-08-08 15:06\", \n        \"v\":\"72.5\", \n        \"f\":\"0,0,0\"\n    }\n]\n}\n\nhttps://tidesandcurrents.noaa.gov/api/datagetter?\nbegin_date=20200520%2018:46&\nend_date=20200520%2018:46&\nstation=9410230&\nproduct=water_level&\ndatum=mllw&\nunits=english&\ntime_zone=gmt&\napplication=web_services&\nformat=json\n\nhttps://tidesandcurrents.noaa.gov/api/datagetter?\nbegin_date=20200520%2018:24&\nend_date=20200520%2018:24&\nstation=9410230&\nproduct=water_level&\ndatum=mllw&\nunits=english&\ntime_zone=gmt&\napplication=web_services&\nformat=json\n\n{\n    \"metadata\":{\n        \"id\":\"9410230\",\n        \"name\":\"La Jolla\",\n        \"lat\":\"32.8669\",\n        \"lon\":\"-117.2571\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2020-05-20 18:24\", \n            \"v\":\"2.494\", \n            \"s\":\"0.459\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"p\"\n        }\n    ]\n}\n*/","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/Tide.js"],"names":["React","useState","useEffect","Loader","arrowDown","arrowUp","Tide","setTide","display","isMotionOn","status","setStatus","tide","tideDirection","localStorage","height","getCurrentTime","currentTime","Date","year","getFullYear","currentMonth","getMonth","month","currentDate","getDate","date","currentHour","getHours","hours","startHour","currentMinutes","getMinutes","minutes","getEndTime","getStartTime","startTime","endTime","getTideData","console","log","data","returnJSON","response","json","returnRejection","Promise","reject","validate","ok","uriMLLW","uriMHHW","uriMHW","uriMTL","uriMSL","uriNAVD","uriSTND","uriLaJolla","uri","proxyurl","parseTideData","waterLevel","Number","length","v","toFixed","JSON","stringify","prevState","station","metadata","name","getTideHour","t","split","getTideMinutes","getTideTime","getTideHeight","fetch","then","catch","err","window","location","pathname","getDirection","tideDaily","getTide","type","predictions","map","times","heights","tides","checkTide","hour","nextTideIndex","findIndex","pastLastTide","minutesUntilNextTide","hoursUntilNextTide","untilNextTide","closerTideIndex","nextTide","nextHeight","lastHeight","nextHour","nextMinutes","nextTime","lastTide","convertTide","getCurrentTide","currentTide","previousTide","nextPhase","getAllData","getItem","notEqual","greaterThan","getDownArrow","setItem","getUpArrow","getTideDirection","setLocalTide","setLocalTideDirection","fixHours","percent","loading"],"mappings":"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":["import React, {useState, useEffect} from 'react';\nimport Loader from '../utils/Loader.js';\n//import tide from '../../assets/images/tide.png'\nimport arrowDown from '../../assets/images/ArrowDown.png';\nimport arrowUp from '../../assets/images/ArrowUp.png';\n\nconst Tide = ({setTide, display, isMotionOn}) => {\n    \n    const [status, setStatus] = useState({\n        tide: null,\n        tideDirection: localStorage.tideDirection || \"?\",\n        height: null\n    })\n\n    const getCurrentTime = () => {\n        let currentTime = new Date();\n        const year = currentTime.getFullYear();\n        const currentMonth = currentTime.getMonth()+1;\n        const month = ((currentMonth)<10) ? `0${(currentMonth)}` : currentMonth;\n        const currentDate = currentTime.getDate();\n        const date = (currentDate<10) ? `0${currentDate}` : currentDate;\n        const currentHour = currentTime.getHours();\n        const hours = (currentHour<10) ? `0${currentHour}` : currentHour;\n        const startHour = ((currentHour-1)<10) ? `0${(currentHour-1)}` : (currentHour-1);\n        const currentMinutes = currentTime.getMinutes();\n        const minutes = (currentMinutes<10) ? `0${currentMinutes}` : currentMinutes;\n        const getEndTime = `${year}${month}${date}%20${hours}:${minutes}`;\n        const getStartTime = `${year}${month}${date}%20${startHour}:00`;\n        currentTime = `${year}${month}${date}%20${hours}:${minutes}`;\n        return (\n            {   \n                hours,\n                minutes,\n                date,\n                month,\n                year,\n                currentTime,\n                startTime: getStartTime,\n                endTime: getEndTime\n            }\n        )\n    }\n    const getTideData = () => {\n        console.log(`getTideData ->`);\n        let data;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        \n        console.log(`Tide   - getStartTime: ${getCurrentTime().startTime} => getEndTime: ${getCurrentTime().endTime}`)\n        const uriMLLW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().startTime}&end_date=${getCurrentTime().endTime}&station=9410230&product=water_level&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriMHHW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MHHW&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriMHW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MHW&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriMTL = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MTL&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriMSL = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MSL&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriNAVD = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_level&datum=NAVD&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriSTND = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_level&datum=STND&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriLaJolla = `https://tidesandcurrents.noaa.gov/api/datagetter?product=predictions&amp;application=NOS.COOPS.TAC.WL&amp;begin_date=20201020&amp;end_date=20201021&amp;datum=MLLW&amp;station=9410230&amp;time_zone=lst_ldt&amp;units=english&amp;interval=hilo&amp;format=json`;\n        const uri = uriMLLW;\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n        const parseTideData = (data) => {\n            const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1) || 1;\n            console.log(`tideData => ${JSON.stringify(data, null, 2)}`)\n            setTide(waterLevel)\n            setStatus(prevState => ({\n                ...prevState,\n                station: data.metadata.name,\n                tide:(waterLevel > 3) ? \"high\" : (waterLevel < 2) ? \"low\" : \"medium\",\n                height: waterLevel\n            }));\n        }\n        const getTideHour = (tide) => Number(tide.t.split(\" \")[1].split(\":\")[0]);\n        const getTideMinutes = (tide) => Number(tide.t.split(\" \")[1].split(\":\")[1]);\n//        const getTideTime = (tide) => (getTideHour(tide) === getCurrentTime().hours) ? getTideHour(tide) : tide;\n        const getTideTime = (tide) => `${getTideHour(tide)}:${getTideMinutes(tide)}`;\n        const getTideHeight = (tide) => Number(tide.v);\n        //const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`;\n        fetch(proxyurl + uri)\n            .then(response => validate(response))\n            .then(data => {\n                const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1);\n                console.log(`tideData => ${JSON.stringify(data, null, 2)} \\ncurrentTime: ${getCurrentTime().hours}:${getCurrentTime().minutes}\\nwaterLever: ${waterLevel}`);\n                setTide(waterLevel);\n                setStatus(prevState => ({\n                    ...prevState,\n                    station: data.metadata.name,\n                    tide:(waterLevel > 3) ? \"high\" : (waterLevel < 2) ? \"low\" : \"medium\",\n                    height: waterLevel\n                }));\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n\n    }\n    const getDirection = () => {\n        console.log(`getDirection ->`);\n        let data;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        console.log(`Tide   - getStartTime: ${getCurrentTime().startTime} => getEndTime: ${getCurrentTime().endTime}`)\n        const tideDaily = `https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?product=predictions&amp;application=NOS.COOPS.TAC.WL&amp;begin_date=${getCurrentTime().year}${getCurrentTime().month}${getCurrentTime().date}&amp;end_date=${getCurrentTime().year}${getCurrentTime().month}${getCurrentTime().date}&amp;datum=MLLW&amp;station=9410230&amp;time_zone=lst_ldt&amp;units=english&amp;interval=hilo&amp;format=json`;\n        const uri = tideDaily;\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n        console.log(`tideDaily: ${tideDaily}`)\n        const getTideHour = (tide) => Number(tide.t.split(\" \")[1].split(\":\")[0]);\n        const getTideMinutes = (tide) => Number(tide.t.split(\" \")[1].split(\":\")[1]);\n//        const getTideTime = (tide) => (getTideHour(tide) === getCurrentTime().hours) ? getTideHour(tide) : tide;\n        const getTideTime = (tide) => `${getTideHour(tide)}:${getTideMinutes(tide)}`;\n        const getTideHeight = (tide) => Number(tide.v);\n        const getTide = (tide) => tide.type;\n        //const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime().currentTime}&end_date=${getCurrentTime().currentTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`;\n        fetch(uri)\n            .then(response => validate(response))\n            .then(data => {\n                console.log(`tideDirection => ${JSON.stringify(data, null, 2)}`);\n                const minutes = data.predictions.map((tide) => getTideMinutes(tide));\n                const hours = data.predictions.map((tide) => getTideHour(tide));\n                const times = data.predictions.map((tide) => getTideTime(tide));\n                const heights = data.predictions.map((tide) => getTideHeight(tide));\n                const tides = data.predictions.map((tide) => getTide(tide));\n                const checkTide = (hour) => hour >= getCurrentTime().hours;\n                const nextTideIndex = hours.findIndex(checkTide);\n                const pastLastTide = Number(getCurrentTime().hours-hours[nextTideIndex-1]);\n                const minutesUntilNextTide = () => Number(minutes[nextTideIndex]-getCurrentTime().minutes);\n                const hoursUntilNextTide = () => Number(hours[nextTideIndex]-getCurrentTime().hours);\n                const untilNextTide = () => (hoursUntilNextTide() < 1) ? minutesUntilNextTide() : hoursUntilNextTide();\n                const closerTideIndex = (pastLastTide >= untilNextTide()) ? nextTideIndex : (nextTideIndex-1);\n                const nextTide = tides[nextTideIndex];\n                const nextHeight = heights[nextTideIndex];\n                const lastHeight = heights[nextTideIndex-1];\n                const nextHour = (Number(times[nextTideIndex].split(':')[0])>12) ? (Number(times[nextTideIndex].split(':')[0])-12) : Number(times[nextTideIndex].split(':')[0]);\n                const nextMinutes = (times[nextTideIndex].split(':')[1] < 10) ? `0${times[nextTideIndex].split(':')[1]}` : times[nextTideIndex].split(':')[1];\n                const nextTime = `${nextHour}:${nextMinutes}`;\n                const lastTide = tides[nextTideIndex-1];\n                const convertTide = (tide) => (tide === 'L') ? 'low' : 'high';\n                const getCurrentTide = convertTide(tides[closerTideIndex]);\n                const currentTide = ((pastLastTide !== untilNextTide())) ? getCurrentTide : 'medium';\n                console.log(`CURRENT ${currentTide} HOUR: ${getCurrentTime().hours} TIMES: ${hours}\\n next ${nextTide} tide in ${untilNextTide()} hours\\n previous ${lastTide} tide was ${pastLastTide} hours ago tideMinutes: ${getCurrentTime().minutes}`);\n                setStatus(prevState => ({\n                    ...prevState,\n                    tide: currentTide,\n                    tideDirection: (nextTide === 'L') ? \"DOWN\" : \"UP\",\n                    previousTide: lastHeight,\n                    nextTide: nextHeight,\n                    nextPhase: convertTide(nextTide),\n                    nextTime: nextTime,\n                    untilNextTide: untilNextTide()\n                }))\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n\n    }\n    const getAllData = () => {\n        getTideData();\n        getDirection();\n    }\n    useEffect(() => {   \n        getAllData();\n        /*  \t\t\n        const timerID = setInterval(\n            () => getAllData(),\n            300000\n        );\n        return function cleanUp () {\n            clearInterval(timerID);\n        }\n        */\n    },[]);\n    const previousTide = () => (localStorage.getItem(\"tide\")) ? Number(localStorage.getItem(\"tide\")) : 0;\n    const notEqual = () => (Number(previousTide()) !== Number(status.height)) ? true : false;\n    const greaterThan = () => (Number(previousTide()) > Number(status.height)) ? true : false;\n    const getDownArrow = () => {\n        localStorage.setItem(\"tideDirection\", \"DOWN\")\n        return <img className='arrows mb--2' src={arrowDown} />\n    }\n    const getUpArrow = () => { \n        localStorage.setItem(\"tideDirection\", \"UP\")\n        return <img className='arrows mb--2' src={arrowUp} />\n    }\n    const getTideDirection = () => (status.tideDirection === \"DOWN\") ? getDownArrow() : getUpArrow();\n    //getTideDirection = () => (notEqual() && greaterThan()) ? \"DOWN\" : status.tideDirection;\n    const setLocalTide = () => localStorage.setItem(\"tide\", Number(status.height));\n    const setLocalTideDirection = () => localStorage.setItem(\"tideDirection\", status.tideDirection);\n    const fixHours = () => (getCurrentTime().hours>12) ? Number(getCurrentTime().hours - 12) : getCurrentTime().hours;\n\n    const getCurrentTide = () => <div className=\"r-10 m-5 p-10 bg-lite white\">\n                            <div>{getTideDirection()}</div>\n                            <div>{status.height} <span className=\"greet\"> ft. </span>{status.tide}</div>\n                            <div className='description pt-10'>\n                                from: <span className='greet bold'>{(status.previousTide) ? status.previousTide.toFixed(1) : ''}' </span>\n                                {(display === 'narrow') ? <br/> : ''}to: <span className='greet bold'>{(status.nextTide) ? status.nextTide.toFixed(1) : ''}'</span><br/>\n                                <span className='greet bold'>{status.nextPhase} in {status.untilNextTide} {(display === 'narrow') ? 'hr' : 'hour'}{status.untilNextTide === 1 ? '' : 's'} </span><br/>\n                                at: <span className='greet bold'>{status.nextTime}</span>\n                            </div>\n                        </div>;\n\n    const percent = 'twentyfivePercent mt--70 mb--70';\n    const loading = () => <div className={percent}>\n                        <Loader isMotionOn={isMotionOn}/>\n                    </div>;\n\n    \n    //console.log(`tide direction: ${status.tideDirection} previous height: ${previousTide()} height: ${status.height} == ${previousTide() === Number(status.height)}`)\n    setLocalTide();\n    setLocalTideDirection();\n    return <div>{getCurrentTide()}</div>\n}\n\nexport default Tide;\n/*   sample url data\n{\n    \"metadata\": {\n        \"id\":\"8454000\",\n        \"name\":\"Providence\",\n        \"lat\":\"41.8071\",\n        \"lon\":\"-71.4012\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2013-01-01 10:00\", \n            \"v\":\"0.072\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:06\", \n            \"v\":\"0.095\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:12\", \n            \"v\":\"0.115\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:18\", \n            \"v\":\"0.138\", \n            \"s\":\"0.004\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:24\", \n            \"v\":\"0.167\", \n            \"s\":\"0.004\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        }\n    ]\n}\n*/\n\n/* Sample temp data\nmetadata\":{\n    \"id\":\"8454000\",\n    \"name\":\"Providence\",\n    \"lat\":\"41.8071\",\n    \"lon\":\"-71.4012\"\n}, \n\"data\": [\n    {\n        \"t\":\"2013-08-08 15:00\", \n        \"v\":\"72.5\", \n        \"f\":\"0,0,0\"\n    },\n    {\n        \"t\":\"2013-08-08 15:06\", \n        \"v\":\"72.5\", \n        \"f\":\"0,0,0\"\n    }\n]\n}\n\nhttps://tidesandcurrents.noaa.gov/api/datagetter?\nbegin_date=20200520%2018:46&\nend_date=20200520%2018:46&\nstation=9410230&\nproduct=water_level&\ndatum=mllw&\nunits=english&\ntime_zone=gmt&\napplication=web_services&\nformat=json\n\nhttps://tidesandcurrents.noaa.gov/api/datagetter?\nbegin_date=20200520%2018:24&\nend_date=20200520%2018:24&\nstation=9410230&\nproduct=water_level&\ndatum=mllw&\nunits=english&\ntime_zone=gmt&\napplication=web_services&\nformat=json\n\n{\n    \"metadata\":{\n        \"id\":\"9410230\",\n        \"name\":\"La Jolla\",\n        \"lat\":\"32.8669\",\n        \"lon\":\"-117.2571\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2020-05-20 18:24\", \n            \"v\":\"2.494\", \n            \"s\":\"0.459\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"p\"\n        }\n    ]\n}\n*/"]},"metadata":{},"sourceType":"module"}