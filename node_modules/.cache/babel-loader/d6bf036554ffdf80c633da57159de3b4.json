{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/TextColorizer.js\";\nimport React from 'react';\n\nclass TextColorizer extends React.Component {\n  constructor(_text) {\n    super();\n    this.colors = [\"color-green\", \"color-yellow\", \"color-red\"];\n    this.colorIndex = 0;\n    this.getNextIndex = this.colorIndex === this.colors.length - 1 ? 0 : this.colorIndex + 1;\n\n    this.getNextColor = () => {\n      this.colorIndex = this.getNextIndex;\n      console.log(`colorIndex: ${this.colorIndex}`);\n      return this.colors[this.colorIndex];\n    };\n\n    this.total = (text, character) => text + `<span className=\"${this.getNextColor()}\">${character}</span>`;\n\n    this.colorize = (value, index, array) => {\n      //console.log(\"index: \" + index); \n      //console.log(\"array: \" + array); \n      //console.log(\"value: \" + value);\n      const character = value;\n      const colorizedCharacter = `<span className=\"${this.getNextColor()}\">${character}</span>`; //console.log(`${index}: ${colorizedCharacter}`)\n\n      return colorizedCharacter;\n    };\n\n    this.text = _text.text; //console.log(`text: ${text.text}`);\n  }\n\n  render() {\n    //console.log(`TextColorizer: ${this.text.split(\"\").reduce(this.total)}`)\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bigHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 16\n      }\n    }, this.text.split('').reduce(this.total));\n  }\n\n}\n\nexport default TextColorizer;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/TextColorizer.js"],"names":["React","TextColorizer","Component","constructor","text","colors","colorIndex","getNextIndex","length","getNextColor","console","log","total","character","colorize","value","index","array","colorizedCharacter","render","split","reduce"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,aAAN,SAA4BD,KAAK,CAACE,SAAlC,CAA4C;AAExCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd;AADc,SAKlBC,MALkB,GAKT,CAAC,aAAD,EAAgB,cAAhB,EAAgC,WAAhC,CALS;AAAA,SAMlBC,UANkB,GAML,CANK;AAAA,SAOlBC,YAPkB,GAOF,KAAKD,UAAL,KAAqB,KAAKD,MAAL,CAAYG,MAAZ,GAAmB,CAAzC,GAA+C,CAA/C,GAAoD,KAAKF,UAAL,GAAkB,CAPnE;;AAAA,SAQlBG,YARkB,GAQH,MAAM;AACjB,WAAKH,UAAL,GAAkB,KAAKC,YAAvB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAa,eAAc,KAAKL,UAAW,EAA3C;AACA,aAAO,KAAKD,MAAL,CAAY,KAAKC,UAAjB,CAAP;AACH,KAZiB;;AAAA,SAclBM,KAdkB,GAcV,CAACR,IAAD,EAAOS,SAAP,KAAqBT,IAAI,GAAI,oBAAmB,KAAKK,YAAL,EAAoB,KAAII,SAAU,SAdxE;;AAAA,SAelBC,QAfkB,GAeP,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,KAAyB;AAChC;AACA;AACA;AACA,YAAMJ,SAAS,GAAGE,KAAlB;AACA,YAAMG,kBAAkB,GAAI,oBAAmB,KAAKT,YAAL,EAAoB,KAAII,SAAU,SAAjF,CALgC,CAMhC;;AACA,aAAOK,kBAAP;AACH,KAvBiB;;AAEd,SAAKd,IAAL,GAAYA,KAAI,CAACA,IAAjB,CAFc,CAGd;AACH;;AAoBDe,EAAAA,MAAM,GAAG;AACL;AACA,wBAAO;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4B,KAAKf,IAAL,CAAUgB,KAAV,CAAgB,EAAhB,EAAoBC,MAApB,CAA2B,KAAKT,KAAhC,CAA5B,CAAP;AACH;;AA7BuC;;AAgC5C,eAAeX,aAAf","sourcesContent":["import React from 'react';\nclass TextColorizer extends React.Component {\n    text;\n    constructor(text) {\n        super();\n        this.text = text.text;\n        //console.log(`text: ${text.text}`);\n    }\n    colors = [\"color-green\", \"color-yellow\", \"color-red\"];\n    colorIndex = 0;\n    getNextIndex = (this.colorIndex === (this.colors.length-1)) ? 0 : (this.colorIndex + 1);\n    getNextColor = () => { \n        this.colorIndex = this.getNextIndex;\n        console.log(`colorIndex: ${this.colorIndex}`)\n        return this.colors[this.colorIndex];\n    };\n//    total = (text, character) => text + `<span className=\"${this.getNextColor}\">${character}</span>`;\n    total = (text, character) => text + `<span className=\"${this.getNextColor()}\">${character}</span>`;\n    colorize = (value, index, array) => {\n        //console.log(\"index: \" + index); \n        //console.log(\"array: \" + array); \n        //console.log(\"value: \" + value);\n        const character = value;\n        const colorizedCharacter = `<span className=\"${this.getNextColor()}\">${character}</span>`;\n        //console.log(`${index}: ${colorizedCharacter}`)\n        return colorizedCharacter;\n    }\n    render() {\n        //console.log(`TextColorizer: ${this.text.split(\"\").reduce(this.total)}`)\n        return <div className=\"bigHeader\">{this.text.split('').reduce(this.total)}</div>;\n    }\n}\n\nexport default TextColorizer;"]},"metadata":{},"sourceType":"module"}