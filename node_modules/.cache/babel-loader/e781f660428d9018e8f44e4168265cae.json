{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/WaterTemp.js\";\nimport React from 'react';\nimport Loader from '../utils/Loader.js';\n\nclass WaterTemp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getWaterTempData = () => {\n      console.log(`getWaterTemp ->`);\n      let data;\n\n      const returnJSON = response => response.json();\n\n      const returnRejection = response => Promise.reject({\n        status: response.status,\n        data\n      });\n\n      const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n\n      let getCurrentTime = new Date();\n      const year = getCurrentTime.getFullYear();\n      const currentMonth = getCurrentTime.getMonth() + 1;\n      const month = currentMonth < 10 ? `0${currentMonth}` : currentMonth;\n      const currentDate = getCurrentTime.getDate();\n      const date = currentDate < 10 ? `0${currentDate}` : currentDate;\n      const currentHour = getCurrentTime.getHours();\n      const hours = currentHour < 10 ? `0${currentHour}` : currentHour;\n      const currentMinutes = getCurrentTime.getMinutes();\n      const minutes = currentMinutes < 10 ? `0${currentMinutes}` : currentMinutes;\n      const getEndTime = `${year}${month}${date}%20${hours}:${minutes}`;\n      const getStartTime = `${year}${month}${date}%20${hours - 1}:00`;\n      getCurrentTime = `${year}${month}${date}%20${hours}:${minutes}`;\n      console.log(`WaterTemp   - getStartTime: ${getStartTime} => getEndTime: ${getEndTime}`);\n      const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getStartTime}&end_date=${getEndTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`; //`https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=20200520%2018:24&end_date=20200520%2018:24&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`\n\n      fetch(waterTempuri).then(response => validate(response)).then(data => {\n        this.setState({\n          temp: Number(data.data[data.data.length - 1].v).toFixed(0)\n        });\n      }).catch(err => console.log(`Something went wrong!\\nuri: ${waterTempuri} \\npath: ${window.location.pathname}\\n`, err));\n    };\n\n    this.getInterval = () => 300000;\n\n    this.getCurrentTemp = () => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 28\n      }\n    }, this.state.temp, \"\\xB0 \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"greet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 52\n      }\n    }, \"F\"));\n\n    this.percent = 'twentyfivePercent mt--70 mb--70';\n\n    this.loading = () => /*#__PURE__*/React.createElement(\"div\", {\n      className: this.percent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      isMotionOn: this.props.isMotionOn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }));\n\n    this.state = {\n      temp: null\n    };\n  }\n\n  componentDidMount() {\n    this.getWaterTempData();\n    this.timerID = setInterval(() => this.getWaterTempData(), this.getInterval());\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 16\n      }\n    }, this.getCurrentTemp());\n  }\n\n}\n\nexport default WaterTemp;\n/*\n{\n    \"metadata\":{\n        \"id\":\"9410230\",\n        \"name\":\"La Jolla\",\n        \"lat\":\"32.8669\",\n        \"lon\":\"-117.2571\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2020-05-20 18:24\", \n            \"v\":\"63.7\", \n            \"f\":\"0,0,0\"\n        }\n    ]\n}\n*/","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/WaterTemp.js"],"names":["React","Loader","WaterTemp","Component","constructor","props","getWaterTempData","console","log","data","returnJSON","response","json","returnRejection","Promise","reject","status","validate","ok","getCurrentTime","Date","year","getFullYear","currentMonth","getMonth","month","currentDate","getDate","date","currentHour","getHours","hours","currentMinutes","getMinutes","minutes","getEndTime","getStartTime","waterTempuri","fetch","then","setState","temp","Number","length","v","toFixed","catch","err","window","location","pathname","getInterval","getCurrentTemp","state","percent","loading","isMotionOn","componentDidMount","timerID","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Loader from '../utils/Loader.js';\n\nclass WaterTemp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            temp: null,\n        }\n    }\n    getWaterTempData = () => {\n        console.log(`getWaterTemp ->`);\n        let data;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        let getCurrentTime = new Date();\n        const year = getCurrentTime.getFullYear();\n        const currentMonth = getCurrentTime.getMonth()+1;\n        const month = ((currentMonth)<10) ? `0${(currentMonth)}` : currentMonth;\n        const currentDate = getCurrentTime.getDate();\n        const date = (currentDate<10) ? `0${currentDate}` : currentDate;\n        const currentHour = getCurrentTime.getHours();\n        const hours = (currentHour<10) ? `0${currentHour}` : currentHour;\n        const currentMinutes = getCurrentTime.getMinutes();\n        const minutes = (currentMinutes<10) ? `0${currentMinutes}` : currentMinutes;\n        const getEndTime = `${year}${month}${date}%20${hours}:${minutes}`;\n        const getStartTime = `${year}${month}${date}%20${hours-1}:00`;\n        getCurrentTime = `${year}${month}${date}%20${hours}:${minutes}`;\n        console.log(`WaterTemp   - getStartTime: ${getStartTime} => getEndTime: ${getEndTime}`)\n        const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getStartTime}&end_date=${getEndTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        //`https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=20200520%2018:24&end_date=20200520%2018:24&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`\n        fetch(waterTempuri)\n            .then(response => validate(response))\n            .then(data => {\n                this.setState({\n                    temp: Number(data.data[data.data.length - 1].v).toFixed(0)\n                })\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${waterTempuri} \\npath: ${window.location.pathname}\\n`, err));\n    }\n    getInterval = () => 300000;\n    componentDidMount() {\n        this.getWaterTempData()\n        this.timerID = setInterval(() => this.getWaterTempData(), this.getInterval());\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n    getCurrentTemp = () => <div>{this.state.temp}° <span className=\"greet\">F</span></div>;\n    percent = 'twentyfivePercent mt--70 mb--70';\n    loading = () => <div className={this.percent}>\n                <Loader isMotionOn={this.props.isMotionOn}/>\n            </div>;\n    render() {\n        return <div>{this.getCurrentTemp()}</div>\n    };\n}\n\nexport default WaterTemp;\n\n/*\n{\n    \"metadata\":{\n        \"id\":\"9410230\",\n        \"name\":\"La Jolla\",\n        \"lat\":\"32.8669\",\n        \"lon\":\"-117.2571\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2020-05-20 18:24\", \n            \"v\":\"63.7\", \n            \"f\":\"0,0,0\"\n        }\n    ]\n}\n*/"]},"metadata":{},"sourceType":"module"}