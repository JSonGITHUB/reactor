{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js\";\nimport React from 'react';\nimport Loader from '../utils/Loader.js';\n\nclass Geolocate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCurrentPosition = () => {\n      window.navigator.geolocation.getCurrentPosition( //position => console.log(position.coords.longitude),\n      position => {\n        const {\n          longitude,\n          latitude\n        } = position.coords;\n        this.props.returnCurrentPosition(longitude, latitude); //console.log(`getCurrentPosition => coords ^^^^^^^^^^^ ${longitude}, ${latitude}`)\n\n        this.setState({\n          longitude: longitude,\n          latitude: latitude\n        });\n        /*\n        try {\n            //if (!this.props.currentPositionExists()) {\n                this.props.returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n            //}\n        }catch(err) {\n        }\n        */\n      }, err => {\n        console.log(err);\n        this.setState({\n          errorMessage: err.message\n        });\n      });\n    };\n\n    this.getLocation = () => `${this.state.latitude.toFixed(6)}, ${this.state.longitude.toFixed(6)} `;\n\n    this.percent = window.innerWidth < 700 ? 'twentyfivePercent mt--70 mb--70' : 'fiftyPercent mt--40 mb--40';\n\n    this.loading = () => /*#__PURE__*/React.createElement(\"div\", {\n      className: this.percent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      isMotionOn: this.props.isMotionOn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }));\n\n    this.latlon = () => this.state.latitude + \",\" + this.state.longitude;\n\n    const {\n      returnCurrentPosition,\n      currentPositionExists\n    } = props;\n    this.state = {\n      longitude: null,\n      latitude: null,\n      errorMessage: null,\n      returnCurrentPosition: returnCurrentPosition,\n      currentPositionExists: currentPositionExists\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 5000);\n  }\n\n  tick() {\n    this.getCurrentPosition();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    const {\n      latitude,\n      errorMessage\n    } = this.state;\n    const errorExists = errorMessage ? true : false;\n    const latExists = latitude ? true : false;\n    const errMessage = errorMessage;\n    let gelocationStatus = latExists ? this.getLocation() : this.loading();\n    gelocationStatus = errorExists ? `${errMessage}` : gelocationStatus;\n    /*\n    if (latExists) {\n        if (!this.props.currentPositionExists()) {\n            this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n        }\n    }\n    */\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"color-yellow greet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 16\n      }\n    }, gelocationStatus);\n  }\n\n}\n\nexport default Geolocate;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js"],"names":["React","Loader","Geolocate","Component","constructor","props","getCurrentPosition","window","navigator","geolocation","position","longitude","latitude","coords","returnCurrentPosition","setState","err","console","log","errorMessage","message","getLocation","state","toFixed","percent","innerWidth","loading","isMotionOn","latlon","currentPositionExists","componentDidMount","timerID","setInterval","tick","componentWillUnmount","clearInterval","render","errorExists","latExists","errMessage","gelocationStatus"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Loader from '../utils/Loader.js';\n\nclass Geolocate extends React.Component {\n    constructor(props) {\n        super(props);\n        const { returnCurrentPosition, currentPositionExists } = props;\n        this.state = {\n            longitude: null,\n            latitude: null,\n            errorMessage: null,\n            returnCurrentPosition: returnCurrentPosition,\n            currentPositionExists: currentPositionExists\n        }\n    }\n    getCurrentPosition = () => {\n        window.navigator.geolocation.getCurrentPosition(\n            //position => console.log(position.coords.longitude),\n           position => {\n                const { longitude, latitude } = position.coords;\n                this.props.returnCurrentPosition(longitude, latitude);\n                //console.log(`getCurrentPosition => coords ^^^^^^^^^^^ ${longitude}, ${latitude}`)\n                this.setState({\n                    longitude: longitude,\n                    latitude: latitude,\n                });\n                /*\n                try {\n                    //if (!this.props.currentPositionExists()) {\n                        this.props.returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n                    //}\n                }catch(err) {\n                }\n                */\n            },\n            err => {\n                console.log(err)\n                this.setState({\n                    errorMessage: err.message\n                });\n\n            }\n        )\n    }\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            5000\n        );\n    }\n    tick() {\n        this.getCurrentPosition();\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n    getLocation = () => `${this.state.latitude.toFixed(6)}, ${this.state.longitude.toFixed(6)} `;\n    percent = (window.innerWidth < 700) ? 'twentyfivePercent mt--70 mb--70' : 'fiftyPercent mt--40 mb--40';\n    loading = () => <div className={this.percent}>\n                <Loader isMotionOn={this.props.isMotionOn}/>\n            </div>;\n    latlon = () => this.state.latitude + \",\" + this.state.longitude;\n    render() {\n        const { latitude, errorMessage } = this.state;\n        const errorExists = (errorMessage) ? true : false;\n        const latExists = (latitude) ? true : false;\n        const errMessage = errorMessage;\n        let gelocationStatus = (latExists) ? this.getLocation() : this.loading();\n        gelocationStatus = (errorExists) ? `${errMessage}` : gelocationStatus;\n        /*\n        if (latExists) {\n            if (!this.props.currentPositionExists()) {\n                this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n            }\n        }\n        */\n        return <div className=\"color-yellow greet\">{gelocationStatus}</div>\n    };\n}\n\nexport default Geolocate;"]},"metadata":{},"sourceType":"module"}