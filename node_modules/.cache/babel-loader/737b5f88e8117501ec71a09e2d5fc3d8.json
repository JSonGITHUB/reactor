{"ast":null,"code":"import React from 'react';\nconst Sounds = () => {\n  var audioContext = new AudioContext(),\n    oscillator;\n  const playSound = (winner, score) => {\n    // Create an oscillator node\n    oscillator = audioContext.createOscillator();\n\n    // Connect the oscillator to the audio context's destination (your speakers)\n    oscillator.connect(audioContext.destination);\n    const treeScores = [5, 10, 55, 60, 105, 110, 155, 160];\n    const treeTotals = [50, 100, 150, 200];\n    const treeClosed = () => treeTotals.includes(score);\n    const isTree = () => treeScores.includes(score);\n    const isTree1 = () => score > 0 && score < 55;\n    const isTree2 = () => score > 50 && score < 105;\n    const isTree3 = () => score > 100 && score < 155;\n    const isTree4 = () => score > 150;\n    const isTreeComplete = () => score > 150;\n    // Set the oscillator type to 'sine' (you can experiment with other types like 'square', 'sawtooth', 'triangle')\n\n    const getType = () => score === winner || treeClosed() ? 'sawtooth' : 'triagle';\n    oscillator.type = getType();\n\n    //const note = (treeClosed()) ? 1000 : (440 + (score * 2));\n    const note = treeClosed() ? 1000 : 440;\n    // Set the frequency (Hz) - in this case, 440 Hz is an 'A' note\n    oscillator.frequency.setValueAtTime(note, audioContext.currentTime);\n\n    // Start the oscillator\n    oscillator.start();\n    const soundLength = score == winner ? 1 : 0.05;\n    // Stop the oscillator after 0.5 seconds (you can adjust this time)\n    oscillator.stop(audioContext.currentTime + soundLength);\n  };\n  var audioContext = new AudioContext(),\n    oscillator1;\n  const playSiren = () => {\n    let highPitch = false;\n    const getHighPitch = () => {\n      highPitch = !highPitch;\n      return highPitch;\n    };\n\n    //const AudioContext = window.AudioContext || window.webkitAudioContext;\n    //const audioContext = new AudioContext();\n\n    oscillator1 = audioContext.createOscillator();\n    oscillator1.type = 'sine'; // First oscillator is a sine wave\n    oscillator1.frequency.setValueAtTime(400, audioContext.currentTime);\n    const oscillator2 = audioContext.createOscillator();\n    oscillator2.type = 'sine'; // Second oscillator is a square wave\n    oscillator2.frequency.setValueAtTime(400, audioContext.currentTime);\n\n    // Gain nodes to control volume\n    const gainNode1 = audioContext.createGain();\n    const gainNode2 = audioContext.createGain();\n    oscillator1.connect(gainNode1);\n    oscillator2.connect(gainNode2);\n    gainNode1.connect(audioContext.destination);\n    gainNode2.connect(audioContext.destination);\n    oscillator1.start();\n    oscillator2.start();\n    const sirenInterval = setInterval(() => {\n      const frequency = getHighPitch() ? 1200 : 400; // Random frequency between 400 and 1200 Hz\n      oscillator1.frequency.setValueAtTime(frequency, audioContext.currentTime);\n      oscillator2.frequency.setValueAtTime(frequency, audioContext.currentTime);\n    }, 100); // Change frequency every 10th of a second\n\n    // Stop the siren after 10 seconds\n    setTimeout(() => {\n      clearInterval(sirenInterval);\n      oscillator1.stop();\n      oscillator2.stop();\n    }, 2000);\n  };\n};\n_c = Sounds;\nexport default Sounds;\nvar _c;\n$RefreshReg$(_c, \"Sounds\");","map":{"version":3,"names":["React","Sounds","audioContext","AudioContext","oscillator","playSound","winner","score","createOscillator","connect","destination","treeScores","treeTotals","treeClosed","includes","isTree","isTree1","isTree2","isTree3","isTree4","isTreeComplete","getType","type","note","frequency","setValueAtTime","currentTime","start","soundLength","stop","oscillator1","playSiren","highPitch","getHighPitch","oscillator2","gainNode1","createGain","gainNode2","sirenInterval","setInterval","setTimeout","clearInterval","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Sounds.js"],"sourcesContent":["import React from 'react';\n\nconst Sounds = () => {\n\n    var audioContext = new AudioContext(),\n    oscillator;\n\n    const playSound = (winner, score) => {\n\n        // Create an oscillator node\n        oscillator = audioContext.createOscillator();\n\n        // Connect the oscillator to the audio context's destination (your speakers)\n        oscillator.connect(audioContext.destination);\n\n        const treeScores = [5, 10, 55, 60, 105, 110, 155, 160];\n        const treeTotals = [50, 100, 150, 200];\n        const treeClosed = () => treeTotals.includes(score);\n        const isTree = () => treeScores.includes(score);\n        const isTree1 = () => (score > 0 && score < 55);\n        const isTree2 = () => (score > 50 && score < 105);\n        const isTree3 = () => (score > 100 && score < 155);\n        const isTree4 = () => (score > 150);\n        const isTreeComplete = () => (score > 150);\n        // Set the oscillator type to 'sine' (you can experiment with other types like 'square', 'sawtooth', 'triangle')\n\n        const getType = () => (score === winner || treeClosed()) ? 'sawtooth' : 'triagle';\n        oscillator.type = getType();\n\n        //const note = (treeClosed()) ? 1000 : (440 + (score * 2));\n        const note = (treeClosed()) ? 1000 : 440;\n        // Set the frequency (Hz) - in this case, 440 Hz is an 'A' note\n        oscillator.frequency.setValueAtTime(note, audioContext.currentTime);\n\n        // Start the oscillator\n        oscillator.start();\n\n        const soundLength = (score == winner) ? 1 : 0.05;\n        // Stop the oscillator after 0.5 seconds (you can adjust this time)\n        oscillator.stop(audioContext.currentTime + soundLength);\n    }\n\n    var audioContext = new AudioContext(),\n    oscillator1;\n\n    const playSiren = () => {\n\n        let highPitch = false;\n\n        const getHighPitch = () => {\n            highPitch = !highPitch;\n            return highPitch;\n        }\n\n        //const AudioContext = window.AudioContext || window.webkitAudioContext;\n        //const audioContext = new AudioContext();\n\n        oscillator1 = audioContext.createOscillator();\n        oscillator1.type = 'sine'; // First oscillator is a sine wave\n        oscillator1.frequency.setValueAtTime(400, audioContext.currentTime);\n\n        const oscillator2 = audioContext.createOscillator();\n        oscillator2.type = 'sine'; // Second oscillator is a square wave\n        oscillator2.frequency.setValueAtTime(400, audioContext.currentTime);\n\n        // Gain nodes to control volume\n        const gainNode1 = audioContext.createGain();\n        const gainNode2 = audioContext.createGain();\n\n        oscillator1.connect(gainNode1);\n        oscillator2.connect(gainNode2);\n\n        gainNode1.connect(audioContext.destination);\n        gainNode2.connect(audioContext.destination);\n\n        oscillator1.start();\n        oscillator2.start();\n\n        const sirenInterval = setInterval(() => {\n            const frequency = (getHighPitch()) ? 1200 : 400; // Random frequency between 400 and 1200 Hz\n            oscillator1.frequency.setValueAtTime(frequency, audioContext.currentTime);\n            oscillator2.frequency.setValueAtTime(frequency, audioContext.currentTime);\n        }, 100); // Change frequency every 10th of a second\n\n        // Stop the siren after 10 seconds\n        setTimeout(() => {\n            clearInterval(sirenInterval);\n            oscillator1.stop();\n            oscillator2.stop();\n        }, 2000);\n\n    }\n\n}\n\nexport default Sounds;"],"mappings":"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"},"metadata":{},"sourceType":"module"}