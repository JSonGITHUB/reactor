{"ast":null,"code":"import getNotes from './GetNotes.js';\nimport PostDirectory from './PostDirectory.js';\nimport getWaveHeight from './GetWaveHeight.js';\nimport getWindOrientation from './GetWindOrientation.js';\nimport getWindMPH from './GetWindMPH.js';\nimport getSurface from './GetSurface.js';\nconst createLog = (item, status) => {\n  const posts = new PostDirectory();\n  console.log(`createLog =>\\nstatus: ${JSON.stringify(status, null, 2)}`);\n  localStorage.setItem('spot', item.name);\n  const goToLog = () => window.location.pathname = `/reactor/SurfLog`;\n  const generateNewLogId = () => {\n    const date = new Date();\n    const st = date.toDateString().replace(/ /g, '');\n    const nd = date.toLocaleTimeString().replace(/ /g, '');\n    localStorage.setItem('lastPostId', `${st}${nd}`);\n    const newId = `${st}${nd}`;\n    console.log(`LogId: generateNewLogId => status.logId: ${newId}`);\n    return newId;\n  };\n  const recordId = generateNewLogId();\n  let getCurrentTime = new Date();\n  const year = getCurrentTime.getFullYear();\n  const currentMonth = getCurrentTime.getMonth() + 1;\n  const month = currentMonth < 10 ? `0${currentMonth}` : currentMonth;\n  const currentDate = getCurrentTime.getDate();\n  const date = currentDate < 10 ? `0${currentDate}` : currentDate;\n  const currentHour = getCurrentTime.getHours();\n  const hours = currentHour < 10 ? `0${currentHour}` : currentHour;\n  const startHour = currentHour - 1 < 10 ? `0${currentHour - 1}` : currentHour - 1;\n  const currentMinutes = getCurrentTime.getMinutes();\n  const minutes = currentMinutes < 10 ? `0${currentMinutes}` : currentMinutes;\n  // eslint-disable-next-line\n  const getEndTime = `${year}${month}${date}%20${hours}:${minutes}`;\n  // eslint-disable-next-line\n  const getStartTime = `${year}${month}${date}%20${startHour}:00`;\n  getCurrentTime = `${year}${month}${date}%20${hours}:${minutes}`;\n  const getWaveSize = height => {\n    height = height.split('.')[0];\n    height = height.includes(\"FT\") ? height.replace(\"FT\", \"ft\") : height;\n    height = !height.includes(\"ft\") ? String(height + \"ft\") : height;\n    return height;\n  };\n  const logObj = {\n    Day: {\n      Date: `${year}-${month}-${date}T${hours}:${minutes}:00.000Z`,\n      Day: date,\n      Month: month,\n      Year: year\n    },\n    Location: {\n      Break: item.name\n    },\n    Surf: {\n      Height: getWaveHeight(status.swell1Height),\n      Report: getWaveSize(status.swell1Height),\n      Shape: 'peaky'\n    },\n    Swell1: {\n      Height: getWaveHeight(status.swell1Height),\n      Direction: status.swell1Direction,\n      Angle: status.swell1Angle,\n      Interval: status.swell1Interval\n    },\n    Swell2: {\n      Height: getWaveHeight(status.swell2Height),\n      Direction: status.swell2Direction,\n      Angle: status.swell2Angle,\n      Interval: status.swell2Interval\n    },\n    Swell3: {\n      Height: '1ft',\n      Direction: 'NW',\n      Angle: '180',\n      Interval: '6 seconds'\n    },\n    Tide: {\n      Phase: status.tide,\n      Height: Number(status.height).toFixed(0) + 'ft'\n    },\n    Wind: {\n      Direction: status.windDirection,\n      Orientation: getWindOrientation(status.windDirection),\n      MPH: getWindMPH(status.windGusts),\n      Surface: getSurface(status.windGusts)\n    },\n    Conditions: {\n      Conditions: 'Good'\n    },\n    Comments: {\n      'notes': getNotes(status)\n    }\n  };\n  //return logObj;\n  let postDirectory = posts.getDirectory();\n  let post = '';\n  const logIt = () => {\n    postDirectory.push(recordId);\n    postDirectory = JSON.stringify(postDirectory);\n    console.log(`postDirectory: ${postDirectory}`);\n    post = JSON.stringify(logObj, null, 2);\n    console.log(`post: ${post}`);\n    localStorage.setItem('logId', recordId);\n    localStorage.setItem('spot', item.name);\n    localStorage.setItem(recordId, post);\n    //localStorage.setItem('postDirectory', postDirectory);\n    posts.add(recordId);\n  };\n  logIt();\n  goToLog();\n  /*\n  this.setState({\n      recordId: recordId,\n      logged: true\n  })\n  */\n};\n\nexport default createLog;","map":{"version":3,"names":["getNotes","PostDirectory","getWaveHeight","getWindOrientation","getWindMPH","getSurface","createLog","item","status","posts","console","log","JSON","stringify","localStorage","setItem","name","goToLog","window","location","pathname","generateNewLogId","date","Date","st","toDateString","replace","nd","toLocaleTimeString","newId","recordId","getCurrentTime","year","getFullYear","currentMonth","getMonth","month","currentDate","getDate","currentHour","getHours","hours","startHour","currentMinutes","getMinutes","minutes","getEndTime","getStartTime","getWaveSize","height","split","includes","String","logObj","Day","Month","Year","Location","Break","Surf","Height","swell1Height","Report","Shape","Swell1","Direction","swell1Direction","Angle","swell1Angle","Interval","swell1Interval","Swell2","swell2Height","swell2Direction","swell2Angle","swell2Interval","Swell3","Tide","Phase","tide","Number","toFixed","Wind","windDirection","Orientation","MPH","windGusts","Surface","Conditions","Comments","postDirectory","getDirectory","post","logIt","push","add"],"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/CreateLog.js"],"sourcesContent":["import getNotes from './GetNotes.js';\nimport PostDirectory from './PostDirectory.js';\nimport getWaveHeight from './GetWaveHeight.js';\nimport getWindOrientation from './GetWindOrientation.js';\nimport getWindMPH from './GetWindMPH.js';\nimport getSurface from './GetSurface.js';\nconst createLog = (item, status) => {\n    const posts = new PostDirectory();\n    console.log(`createLog =>\\nstatus: ${JSON.stringify(status, null, 2)}`);\n    localStorage.setItem('spot', item.name);\n    const goToLog = () => window.location.pathname = `/reactor/SurfLog`;\n    const generateNewLogId = () => {\n        const date = new Date()\n        const st = date.toDateString().replace(/ /g,'');\n        const nd = date.toLocaleTimeString().replace(/ /g,'');\n        localStorage.setItem('lastPostId', `${st}${nd}`);\n        const newId = `${st}${nd}`;\n        console.log(`LogId: generateNewLogId => status.logId: ${newId}`);\n        return newId;\n    }\n    const recordId = generateNewLogId();\n    let getCurrentTime = new Date();\n    const year = getCurrentTime.getFullYear();\n    const currentMonth = getCurrentTime.getMonth()+1;\n    const month = ((currentMonth)<10) ? `0${(currentMonth)}` : currentMonth;\n    const currentDate = getCurrentTime.getDate();\n    const date = (currentDate<10) ? `0${currentDate}` : currentDate;\n    const currentHour = getCurrentTime.getHours();\n    const hours = (currentHour<10) ? `0${currentHour}` : currentHour;\n    const startHour = ((currentHour-1)<10) ? `0${(currentHour-1)}` : (currentHour-1);\n    const currentMinutes = getCurrentTime.getMinutes();\n    const minutes = (currentMinutes<10) ? `0${currentMinutes}` : currentMinutes;\n    // eslint-disable-next-line\n    const getEndTime = `${year}${month}${date}%20${hours}:${minutes}`;\n    // eslint-disable-next-line\n    const getStartTime = `${year}${month}${date}%20${startHour}:00`;\n    getCurrentTime = `${year}${month}${date}%20${hours}:${minutes}`;\n    const getWaveSize = (height) => {\n        height = height.split('.')[0];     \n        height = (height.includes(\"FT\")) ? height.replace(\"FT\",\"ft\") : height;\n        height = (!height.includes(\"ft\")) ? String(height+\"ft\") : height;\n        return height;     \n    }\n    const logObj = {\n        Day: {\n            Date: `${year}-${month}-${date}T${hours}:${minutes}:00.000Z`,\n            Day: date,\n            Month: month,\n            Year: year\n        },\n        Location: {\n            Break: item.name\n        },\n        Surf: {\n            Height: getWaveHeight(status.swell1Height),\n            Report: getWaveSize(status.swell1Height),\n            Shape: 'peaky'\n        },\n        Swell1: {\n            Height: getWaveHeight(status.swell1Height),\n            Direction: status.swell1Direction,\n            Angle: status.swell1Angle,\n            Interval: status.swell1Interval,\n        },\n        Swell2: {\n            Height: getWaveHeight(status.swell2Height),\n            Direction: status.swell2Direction,\n            Angle: status.swell2Angle,\n            Interval: status.swell2Interval,\n        },\n        Swell3: {\n            Height: '1ft',\n            Direction: 'NW',\n            Angle: '180',\n            Interval: '6 seconds',\n        },\n        Tide: {\n            Phase: status.tide,\n            Height: Number(status.height).toFixed(0)+'ft'\n        },\n        Wind: {\n            Direction: status.windDirection,\n            Orientation: getWindOrientation(status.windDirection),\n            MPH: getWindMPH(status.windGusts),\n            Surface: getSurface(status.windGusts)\n        },\n        Conditions: {\n            Conditions: 'Good'\n        },\n        Comments: {\n            'notes': getNotes(status)\n        }\n    }\n    //return logObj;\n    let postDirectory = posts.getDirectory();\n    let post = '';\n    const logIt = () => {\n        postDirectory.push(recordId);\n        postDirectory = JSON.stringify(postDirectory);\n        console.log(`postDirectory: ${postDirectory}`)\n        post = JSON.stringify(logObj, null, 2);\n        console.log(`post: ${post}`)\n        localStorage.setItem('logId', recordId)\n        localStorage.setItem('spot', item.name)\n        localStorage.setItem(recordId, post);\n        //localStorage.setItem('postDirectory', postDirectory);\n        posts.add(recordId);\n    }   \n    logIt();\n    goToLog();\n    /*\n    this.setState({\n        recordId: recordId,\n        logged: true\n    })\n    */\n};\nexport default createLog;"],"mappings":"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"},"metadata":{},"sourceType":"module"}