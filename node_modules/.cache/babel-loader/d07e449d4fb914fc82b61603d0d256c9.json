{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js\";\nimport React from 'react';\nimport Dialog from '../functional/Dialog.js';\nimport Loader from '../utils/Loader.js';\n\nclass Geolocate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getLocation = () => `Latitude: ${Number(this.state.latitude).toFixed(2)} Longitude: ${Number(this.state.longitude).toFixed(2)}`;\n\n    this.loading = \"Loading\";\n\n    this.latlon = () => this.state.latitude + \",\" + this.state.longitude;\n\n    this.imageUrl = () => \"https://maps.googleapis.com/maps/api/staticmap?center=\" + this.latlon() + \"&zoom=14&size=400x300&sensor=false&key=AIzaSyCeOrNWv3lqS4nF4h8ohlHgOAygDNCyIUw\";\n\n    this.state = {\n      longitude: null,\n      latitude: null,\n      errorMessage: null\n    };\n  }\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition( //position => console.log(position.coords.longitude),\n    position => {\n      this.setState({\n        longitude: position.coords.longitude,\n        latitude: position.coords.latitude\n      });\n    }, err => {\n      console.log(err);\n      this.setState({\n        errorMessage: err.message\n      });\n    });\n  }\n\n  render() {\n    let gelocationStatus = this.getLocation();\n    gelocationStatus = this.getLocation();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 16\n      }\n    }, this.getLocation());\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 16\n      }\n    }, this.getLocation());\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 16\n      }\n    }, gelocationStatus);\n  }\n\n}\n\nexport default Geolocate;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js"],"names":["React","Dialog","Loader","Geolocate","Component","constructor","props","getLocation","Number","state","latitude","toFixed","longitude","loading","latlon","imageUrl","errorMessage","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","setState","coords","err","console","log","message","render","gelocationStatus"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,SAAN,SAAwBH,KAAK,CAACI,SAA9B,CAAwC;AAEpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA2BnBC,WA3BmB,GA2BL,MAAO,aAAYC,MAAM,CAAC,KAAKC,KAAL,CAAWC,QAAZ,CAAN,CAA4BC,OAA5B,CAAoC,CAApC,CAAuC,eAAcH,MAAM,CAAC,KAAKC,KAAL,CAAWG,SAAZ,CAAN,CAA6BD,OAA7B,CAAqC,CAArC,CAAwC,EA3B3G;;AAAA,SA4BnBE,OA5BmB,GA4BT,SA5BS;;AAAA,SA6BnBC,MA7BmB,GA6BV,MAAM,KAAKL,KAAL,CAAWC,QAAX,GAAsB,GAAtB,GAA4B,KAAKD,KAAL,CAAWG,SA7BnC;;AAAA,SA+BnBG,QA/BmB,GA+BR,MAAM,2DACJ,KAAKD,MAAL,EADI,GACU,gFAhCR;;AAEf,SAAKL,KAAL,GAAa;AACTG,MAAAA,SAAS,EAAE,IADF;AAETF,MAAAA,QAAQ,EAAE,IAFD;AAGTM,MAAAA,YAAY,EAAE;AAHL,KAAb;AAKH;;AACDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,EACI;AACAC,IAAAA,QAAQ,IAAI;AACR,WAAKC,QAAL,CAAc;AACVX,QAAAA,SAAS,EAAEU,QAAQ,CAACE,MAAT,CAAgBZ,SADjB;AAEVF,QAAAA,QAAQ,EAAEY,QAAQ,CAACE,MAAT,CAAgBd;AAFhB,OAAd;AAIH,KAPL,EAQIe,GAAG,IAAI;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAKF,QAAL,CAAc;AACVP,QAAAA,YAAY,EAAES,GAAG,CAACG;AADR,OAAd;AAIH,KAdL;AAgBH;;AASDC,EAAAA,MAAM,GAAG;AACL,QAAIC,gBAAgB,GAAG,KAAKvB,WAAL,EAAvB;AACAuB,IAAAA,gBAAgB,GAAG,KAAKvB,WAAL,EAAnB;AACA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,KAAKA,WAAL,EAAP,CAAP;AACA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,KAAKA,WAAL,EAAP,CAAP;AAEA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMuB,gBAAN,CAAP;AACH;;AA3CmC;;AA8CxC,eAAe3B,SAAf","sourcesContent":["import React from 'react';\nimport Dialog from '../functional/Dialog.js';\nimport Loader from '../utils/Loader.js';\n\nclass Geolocate extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            longitude: null,\n            latitude: null,\n            errorMessage: null\n        }\n    }\n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            //position => console.log(position.coords.longitude),\n            position => {\n                this.setState({\n                    longitude: position.coords.longitude,\n                    latitude: position.coords.latitude,\n                });\n            },\n            err => {\n                console.log(err)\n                this.setState({\n                    errorMessage: err.message\n                });\n\n            }\n        )\n    }\n\n    getLocation = () => `Latitude: ${Number(this.state.latitude).toFixed(2)} Longitude: ${Number(this.state.longitude).toFixed(2)}`;\n    loading = \"Loading\";\n    latlon = () => this.state.latitude + \",\" + this.state.longitude;\n\n    imageUrl = () => \"https://maps.googleapis.com/maps/api/staticmap?center=\"+\n                 this.latlon()+\"&zoom=14&size=400x300&sensor=false&key=AIzaSyCeOrNWv3lqS4nF4h8ohlHgOAygDNCyIUw\";\n\n    render() {\n        let gelocationStatus = this.getLocation();\n        gelocationStatus = this.getLocation();\n        return <div>{ this.getLocation() }</div>\n        return <div>{ this.getLocation() }</div>\n\n        return <div>{gelocationStatus}</div>\n    };\n}\n\nexport default Geolocate;"]},"metadata":{},"sourceType":"module"}