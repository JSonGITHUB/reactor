{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/LoggerFunctional.js\";\nimport React, { useState, useEffect } from 'react';\nimport LogEntry from './LogEntryFunctional.js';\nimport Loader from '../utils/Loader.js';\nimport LogId from './LogId.js';\nimport interfaceData from './InterfaceData.js';\nimport templateData from './TemplateData.js';\n\nconst Logger = ({\n  logId,\n  location\n}) => {\n  let [logID, setLogID] = useState(logId);\n  const logIdComponent = new LogId(logID);\n  let [log, setLog] = useState(templateData);\n\n  if (localStorage.getItem(logIdComponent.getLogId()) === null) {\n    logID = logIdComponent.generateNewLogId();\n  } else {\n    log = JSON.parse(localStorage.getItem(logIdComponent.getLogId()));\n    logID = logIdComponent.getLogId();\n  }\n\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n\n  const getSpot = () => localStorage.getItem(\"spot\");\n\n  useEffect(() => {\n    const {\n      state\n    } = location;\n    const logId = state === undefined ? logIdComponent.getLogId() : state.logId.item;\n    console.log(`LoggerFunctional => componentDidMount -> SPOT: ${getSpot()}\\ngetLogId: ${logIdComponent.getLogId()}\\nlogId: ${logId}`);\n\n    if (localStorage.getItem(logIdComponent.getLogId()) === null) {\n      log = templateData;\n      logID = logIdComponent.generateNewLogId();\n      console.log(`LoggerFunctional => componentDidMount -> 1\\nSPOT: ${getSpot()}\\nlogID: ${logID}\\nlog: ${JSON.stringify(log, null, 2)}`);\n    } else {\n      log = JSON.parse(localStorage.getItem(logIdComponent.getLogId()));\n      logID = logIdComponent.getLogId();\n      console.log(`LoggerFunctional => componentDidMount -> 2\\nSPOT: ${getSpot()}\\nlogID: ${logID}\\nlog: ${JSON.stringify(log, null, 2)}`);\n    }\n\n    let data = interfaceData;\n\n    const returnJSON = response => response.json();\n\n    const returnRejection = response => Promise.reject({\n      status: response.status,\n      data\n    });\n\n    const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n    /*\n    const requestInit = {\n        method:'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        mode: 'cors',\n        cache: 'default'\n    };\n    */\n    //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n    //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n\n\n    const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json'; //const uri = 'localhost:8080/writeSurfLog.json';\n\n    /*\n    fetch(uri)\n        .then(response => validate(response))\n        .then(data => {\n            setIsLoaded(true);\n            setItems(data);\n            setLogID(logId);\n        })\n        .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n    */\n\n    setIsLoaded(true);\n    setItems(data);\n    setLogID(logId);\n  });\n\n  const updateLog = (groupTitle, label, selected, set) => {\n    log[groupTitle][label] = selected;\n\n    if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n      setLog(log);\n    }\n  };\n\n  const getStateLog = () => log;\n\n  console.log(`LoggerFunctional ===> ${JSON.stringify(items, null, 2)}`);\n  let appInterface = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App-content fadeIn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }\n  }));\n\n  if (isLoaded) {\n    appInterface = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-content fadeIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LogEntry, {\n      logId: logID,\n      onChange: updateLog,\n      getStateLog: getStateLog,\n      title: \"Session Log\",\n      message: \"Add your session data\",\n      buttonLabel: \"submit\",\n      items: items,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  return appInterface;\n};\n\nexport default Logger;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/LoggerFunctional.js"],"names":["React","useState","useEffect","LogEntry","Loader","LogId","interfaceData","templateData","Logger","logId","location","logID","setLogID","logIdComponent","log","setLog","localStorage","getItem","getLogId","generateNewLogId","JSON","parse","isLoaded","setIsLoaded","items","setItems","getSpot","state","undefined","item","console","stringify","data","returnJSON","response","json","returnRejection","Promise","reject","status","validate","ok","uri","updateLog","groupTitle","label","selected","set","getStateLog","appInterface"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport LogEntry from './LogEntryFunctional.js';\nimport Loader from '../utils/Loader.js';\nimport LogId from './LogId.js';\nimport interfaceData from './InterfaceData.js'\nimport templateData from './TemplateData.js';\nconst Logger = ({logId, location}) => {\n    let [logID, setLogID] = useState(logId);\n    const logIdComponent = new LogId(logID);\n    let [log, setLog] = useState(templateData);\n    if (localStorage.getItem(logIdComponent.getLogId()) === null) {\n        logID = logIdComponent.generateNewLogId();\n    } else {\n        log = JSON.parse(localStorage.getItem(logIdComponent.getLogId()));\n        logID = logIdComponent.getLogId()\n    }\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n\n    const getSpot = () => localStorage.getItem(\"spot\");\n    \n    useEffect(() => {\n        const { state } = location;\n        const logId = (state === undefined) ? logIdComponent.getLogId() : state.logId.item;\n        console.log(`LoggerFunctional => componentDidMount -> SPOT: ${getSpot()}\\ngetLogId: ${logIdComponent.getLogId()}\\nlogId: ${logId}`); \n        \n        if (localStorage.getItem(logIdComponent.getLogId()) === null) {\n            log = templateData;\n            logID = logIdComponent.generateNewLogId();\n            console.log(`LoggerFunctional => componentDidMount -> 1\\nSPOT: ${getSpot()}\\nlogID: ${logID}\\nlog: ${JSON.stringify(log, null, 2)}`); \n        \n        } else {\n            log = JSON.parse(localStorage.getItem(logIdComponent.getLogId()));\n            logID = logIdComponent.getLogId()\n            console.log(`LoggerFunctional => componentDidMount -> 2\\nSPOT: ${getSpot()}\\nlogID: ${logID}\\nlog: ${JSON.stringify(log, null, 2)}`); \n        \n        }\n        \n        let data = interfaceData;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        /*\n        const requestInit = {\n            method:'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            cache: 'default'\n        };\n        */\n        //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n        //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        //const uri = 'localhost:8080/writeSurfLog.json';\n        /*\n        fetch(uri)\n            .then(response => validate(response))\n            .then(data => {\n                setIsLoaded(true);\n                setItems(data);\n                setLogID(logId);\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n        */\n        setIsLoaded(true);\n        setItems(data);\n        setLogID(logId);\n    })\n\n    const updateLog = (groupTitle, label, selected, set) => {\n        log[groupTitle][label] = selected;\n        if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n            setLog(log);\n        }\n    }\n    const getStateLog = () => log;\n          \n    console.log(`LoggerFunctional ===> ${JSON.stringify(items, null, 2)}`);\n    let appInterface = <div className=\"App-content fadeIn\">\n                            <div className=\"flex3Column\"></div>\n                            <div className=\"flex3Column\">\n                                <Loader />\n                            </div>\n                            <div className=\"flex3Column\"></div>\n                        </div>;\n    if (isLoaded) {\n        appInterface = <div className=\"App-content fadeIn\">\n            <div className=\"flex3Column\"></div>\n            <div className=\"flex3Column\">\n                <LogEntry\n                    logId={logID}\n                    onChange={updateLog} \n                    getStateLog={getStateLog} \n                    title=\"Session Log\" \n                    message=\"Add your session data\"  \n                    buttonLabel=\"submit\" \n                    items={items}\n                />\n            </div>\n            <div className=\"flex3Column\"></div>\n        </div>\n        \n    }\n    return (\n        appInterface            \n    )\n    \n}\nexport default Logger;"]},"metadata":{},"sourceType":"module"}