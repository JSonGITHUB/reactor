{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/VideoPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport videoFile from '../../assets/1.MP4';\nimport VideoNavigation from './VideoNavigation';\nimport { TextField } from '@material-ui/core';\n//const VideoPlayer = ({ src, startTime, endTime, onTimeUpdate }) => {\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = /*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n  const [currentTime, setCurrentTime] = useState(0);\n  const [playerStatus, setPlayerStatus] = useState({\n    videoRef: ref,\n    isPlaying: false,\n    isSlow: false,\n    isMedium: false,\n    isSlowRewind: false,\n    isMediumRewind: false,\n    playbackRate: 1\n  });\n  //const videoRef = useRef(playerStatus.videoRef);\n  let time = playerStatus.videoRef.current !== null ? playerStatus.videoRef.current.currentTime : '00:00:00';\n  console.log('props: ', props);\n  useEffect(() => {\n    const updateCurrentTime = () => {\n      if (playerStatus.videoRef.current.currentTime >= playerStatus.endTime) {\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: false,\n          isRewind: false,\n          isFast: false,\n          isSlow: false,\n          isMedium: false,\n          isSlowRewind: false,\n          isMediumRewind: false\n        }));\n      }\n      /*\n      if (playerStatus.endTime > playerStatus.videoRef.current.duration) {\n        alert(`playerStatus.endTime(${playerStatus.endTime}) > playerStatus.videoRef.current.duration (${playerStatus.videoRef.current.duration})`)\n        endChange(playerStatus.videoRef.current.duration)\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          endTime: playerStatus.videoRef.current.duration\n        }));\n      }\n      */\n      setCurrentTime(playerStatus.videoRef.current.currentTime);\n    };\n    // Attach the time update event listener\n    playerStatus.videoRef.current.addEventListener('timeupdate', updateCurrentTime);\n    // Clean up the event listener on component unmount\n    return () => {\n      playerStatus.videoRef.current.removeEventListener('timeupdate', updateCurrentTime);\n    };\n  }, []);\n  useEffect(() => {\n    const speed = playerStatus.isMediumRewind ? 250 : 80;\n    const interval = playerStatus.isSlowRewind ? 300 : speed;\n    const intervalId = setInterval(() => {\n      const currentTime = playerStatus.videoRef.current.currentTime;\n      const time = currentTime - 0.05;\n      if ((playerStatus.isSlowRewind || playerStatus.isMediumRewind || playerStatus.isRewind) && playerStatus.isPlaying && time > playerStatus.startTime) {\n        playerStatus.videoRef.current.currentTime = time;\n      } else {\n        clearInterval(intervalId);\n      }\n    }, interval);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [playerStatus.isPlaying, playerStatus.isSlowRewind, playerStatus.isMediumRewind, playerStatus.isRewind, playerStatus.startTime, playerStatus.videoRef]);\n  const handleJumpToStart = () => {\n    //console.log(`handleJumpToStart startTime: ${playerStatus.startTime}`);\n    //alert(`handleJumpToStart startTime1: ${playerStatus.startTime}`);\n    playerStatus.videoRef.current.currentTime = playerStatus.startTime || 0;\n    setPlayerStatus(prevState => ({\n      ...prevState,\n      isPlaying: false,\n      isRewind: false,\n      isFast: false,\n      isSlow: false,\n      isMedium: false,\n      isSlowRewind: false,\n      isMediumRewind: false\n    }));\n  };\n  const handleJumpToEnd = id => {\n    //console.log(`handleJumpToEnd id: ${id}`);\n    //alert(`handleJumpToEnd id: ${id} endTime1: ${status.endTime1}`);\n    playerStatus.videoRef.current.currentTime = playerStatus.endTime;\n    setPlayerStatus(prevState => ({\n      ...prevState,\n      isPlaying: false,\n      isRewind: false,\n      isFast: false,\n      isSlow: false,\n      isMedium: false,\n      isSlowRewind: false,\n      isMediumRewind: false\n    }));\n  };\n  /*\n    const handlePlayPause = () => {\n      console.log(\"handlePlayPause\");\n      if (playerStatus.isPlaying) {\n        console.log(\"handlePlayPause => pause\");\n        playerStatus.videoRef.current.pause();\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: false,\n          isRewind: false,\n          isFast: false,\n          isSlow: false,\n          isMedium: false,\n          isSlowRewind: false,\n          isMediumRewind: false\n        }));\n      } else {\n        console.log(\"handlePlayPause => play\");\n        playerStatus.videoRef.current.playbackRate = 1;\n        playerStatus.videoRef.current.play();\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: true,\n          isSlow: false,\n          isMedium: false,\n          isSlowRewind: false,\n          isMediumRewind: false,\n          isRewind: false,\n          isFast: false\n        }));\n      }\n    };\n  \n    const handleRewind = () => {\n      if (playerStatus.videoRef.current && playerStatus.isRewind === false) {\n        console.log(\"handleRewind\");\n        playerStatus.videoRef.current.pause();\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: true,\n          isRewind: true,\n          isFast: false,\n          isSlow: false,\n          isMedium: false,\n          isSlowRewind: false,\n          isMediumRewind: false\n        }));\n      }\n    };\n    const handleMinusOne = () => {\n      if (playerStatus.videoRef.current) {\n        console.log(\"handleMinusOne\");\n        playerStatus.videoRef.current.pause();\n        playerStatus.videoRef.current.currentTime -= 0.05;\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: false,\n          isRewind: false,\n          isFast: false,\n          isSlow: false,\n          isMedium: false,\n          isSlowRewind: false,\n          isMediumRewind: false\n        }));\n      }\n    };\n    const handleAddOne = () => {\n      if (playerStatus.videoRef.current) {\n        console.log(\"handlePlusOne\");\n        playerStatus.videoRef.current.pause();\n        playerStatus.videoRef.current.currentTime += 0.05;\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: false,\n          isRewind: false,\n          isFast: false,\n          isSlow: false,\n          isMedium: false,\n          isSlowRewind: false,\n          isMediumRewind: false\n        }));\n      }\n    };\n    \n    const handleSlowRewind = () => {\n      if (playerStatus.videoRef.current && playerStatus.isSlowRewind === false) {\n        console.log(\"handleSlowMotionRewind\");\n        playerStatus.videoRef.current.pause();\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: true,\n          isRewind: false,\n          isSlow: false,\n          isMedium: false,\n          isSlowRewind: true,\n          isMediumRewind: false,\n          isFast: false\n        }));\n      }\n    };\n  \n    const handleMediumRewind = () => {\n      if (playerStatus.videoRef.current && playerStatus.isMediumRewind === false) {\n        console.log(\"handleMediumMotionRewind\");\n        playerStatus.videoRef.current.pause();\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: true,\n          isRewind: false,\n          isSlow: false,\n          isMedium: false,\n          isSlowRewind: false,\n          isMediumRewind: true,\n          isFast: false\n        }));\n      }\n    };\n  \n    const handleSlowMotion = () => {\n      if (playerStatus.videoRef.current && playerStatus.isSlow === false) {\n        console.log(\"handleSlowMotion\");\n        playerStatus.videoRef.current.playbackRate = .2;\n        playerStatus.videoRef.current.play();\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: true,\n          isSlow: true,\n          isMedium: false,\n          isSlowRewind: false,\n          isMediumRewind: false,\n          isRewind: false,\n          isFast: false,\n          playbackRate: 0.2\n        }));\n      } \n    };\n    const handleMediumMotion = () => {\n      if (playerStatus.videoRef.current && playerStatus.isMedium === false) {\n        console.log(\"handleMediumMotion\");\n        playerStatus.videoRef.current.playbackRate = .5;\n        playerStatus.videoRef.current.play();\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: true,\n          isSlow: false,\n          isMedium: true,\n          isSlowRewind: false,\n          isMediumRewind: false,\n          isRewind: false,\n          isFast: false,\n          playbackRate: 0.5\n        }));\n      } \n    };\n  \n    const handleFastForward = () => {\n      if (playerStatus.videoRef.current && playerStatus.isFast === false) {\n        console.log(\"handleFastMotion\");\n        playerStatus.videoRef.current.playbackRate = 2;\n        playerStatus.videoRef.current.play();\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: true,\n          isFast: true,\n          isSlow: false,\n          isMedium: false,\n          isSlowRewind: false,\n          isMediumRewind: false,\n          isRewind: false,\n          playbackRate: 0.5\n        }));\n      } \n    };\n    const handleTimeUpdate = () => {\n      props.onTimeUpdate(time);\n      if (time >= playerStatus.endTime) {\n        playerStatus.videoRef.current.pause();\n        playerStatus.videoRef.current.currentTime = playerStatus.endTime;\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: false\n        }));\n      } else if (time <= playerStatus.startTime) {\n        playerStatus.videoRef.current.pause();\n        playerStatus.videoRef.current.currentTime = playerStatus.startTime;\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: false\n        }));\n      }\n    };\n  \n  */\n  const handleScrub = e => {\n    const x = e.nativeEvent.offsetX;\n    const width = e.currentTarget.offsetWidth;\n    const duration = playerStatus.videoRef.current.duration;\n    const scrubTime = x / width * duration;\n    playerStatus.videoRef.current.currentTime = scrubTime;\n  };\n  const startChange = value => {\n    props.onStartTimeUpdate(value);\n    setPlayerStatus(prevState => ({\n      ...prevState,\n      startTime: value,\n      currentTime: playerStatus.videoRef.current.currentTime\n    }));\n  };\n  const endChange = value => {\n    props.onEndTimeUpdate(value);\n    setPlayerStatus(prevState => ({\n      ...prevState,\n      endTime: value,\n      currentTime: playerStatus.videoRef.current.currentTime\n    }));\n  };\n  const handleStartChange = event => {\n    const {\n      value\n    } = event.target;\n    props.onStartTimeUpdate(value);\n    setPlayerStatus(prevState => ({\n      ...prevState,\n      startTime: value,\n      currentTime: playerStatus.videoRef.current.currentTime\n    }));\n  };\n  function handleEndChange(event) {\n    const {\n      value\n    } = event.target;\n    props.onEndTimeUpdate(value);\n    setPlayerStatus(prevState => ({\n      ...prevState,\n      endTime: value,\n      currentTime: playerStatus.videoRef.current.currentTime\n    }));\n  }\n  const timeDisplay = () => {\n    console.log(`timeDisplay: ${time} of ${playerStatus.videoRef.current.duration}`);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timerBox\",\n      children: [playerStatus.videoRef.current.currentTime, \" of \", playerStatus.videoRef.current.duration]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 12\n    }, this);\n  };\n  const handleVideoUpdate = event => {\n    const {\n      currentTime\n    } = event.target;\n    if (currentTime > playerStatus.endTime) {\n      playerStatus.videoRef.current.pause();\n      playerStatus.videoRef.current.currentTime = playerStatus.endTime;\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: false,\n        isRewind: false,\n        isFast: false,\n        isSlow: false,\n        isMedium: false,\n        isSlowRewind: false,\n        isMediumRewind: false,\n        currentTime: currentTime\n      }));\n    } else if (currentTime <= playerStatus.startTime) {\n      playerStatus.videoRef.current.pause();\n      playerStatus.videoRef.current.currentTime = playerStatus.startTime;\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: false,\n        isRewind: false,\n        isFast: false,\n        isSlow: false,\n        isMedium: false,\n        isSlowRewind: false,\n        isMediumRewind: false,\n        currentTime: playerStatus.videoRef.current.currentTime\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: playerStatus.videoRef\n      //src={props.src}\n      ,\n      src: videoFile,\n      onTimeUpdate: handleVideoUpdate,\n      style: {\n        width: `100%`,\n        height: `auto`\n      },\n      onLoadedMetadata: () => {\n        if (time !== null) {\n          time = props.startTime;\n          playerStatus.videoRef.current.playbackRate = 1;\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videoNavigation\",\n      children: /*#__PURE__*/_jsxDEV(VideoNavigation, {\n        handleJumpToStart: () => handleJumpToStart(props.id),\n        handleMinusOne: () => props.handleMinusOne(props.id),\n        handleRewind: () => props.handleRewind(props.id),\n        handleMediumRewind: () => props.handleMediumRewind(props.id),\n        handleSlowRewind: () => props.handleSlowRewind(props.id),\n        handlePlayPause: () => props.handlePlayPause(props.id),\n        handleSlowMotion: () => props.handleSlowMotion(props.id),\n        handleMediumMotion: () => props.handleMediumMotion(props.id),\n        handleFastForward: () => props.handleFastForward(props.id),\n        handleAddOne: () => props.handleAddOne(props.id),\n        handleJumpToEnd: () => handleJumpToEnd(props.id),\n        playerStatus: playerStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"p-20\",\n          children: playerStatus.startTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"p-20\",\n          children: currentTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 68\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"p-20\",\n          children: playerStatus.endTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 111\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => startChange(currentTime),\n      children: \"Start Mark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: playerStatus.startTime,\n      onChange: handleStartChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 75\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => endChange(currentTime),\n      children: \"End Mark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: playerStatus.endTime,\n      onChange: handleEndChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 71\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          height: '100%',\n          //width: `${((playerStatus.videoRef.current?.currentTime || 0) / playerStatus.videoRef.current?.duration) * 100}%`,\n          width: '100px',\n          backgroundColor: 'blue',\n          opacity: 0.5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          backgroundColor: '00FF00',\n          top: 0,\n          left: 0,\n          height: '100%',\n          width: '100%',\n          zIndex: 1\n        },\n        onClick: handleScrub\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 5\n  }, this);\n}, \"P5D37R4BTt1GnSLB1gx8115APII=\"));\n_c2 = VideoPlayer;\nexport default VideoPlayer;\nvar _c, _c2;\n$RefreshReg$(_c, \"VideoPlayer$React.forwardRef\");\n$RefreshReg$(_c2, \"VideoPlayer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","videoFile","VideoNavigation","TextField","jsxDEV","_jsxDEV","VideoPlayer","forwardRef","_c","_s","props","ref","currentTime","setCurrentTime","playerStatus","setPlayerStatus","videoRef","isPlaying","isSlow","isMedium","isSlowRewind","isMediumRewind","playbackRate","time","current","console","log","updateCurrentTime","endTime","prevState","isRewind","isFast","addEventListener","removeEventListener","speed","interval","intervalId","setInterval","startTime","clearInterval","handleJumpToStart","handleJumpToEnd","id","handleScrub","e","x","nativeEvent","offsetX","width","currentTarget","offsetWidth","duration","scrubTime","startChange","value","onStartTimeUpdate","endChange","onEndTimeUpdate","handleStartChange","event","target","handleEndChange","timeDisplay","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleVideoUpdate","pause","src","onTimeUpdate","style","height","onLoadedMetadata","handleMinusOne","handleRewind","handleMediumRewind","handleSlowRewind","handlePlayPause","handleSlowMotion","handleMediumMotion","handleFastForward","handleAddOne","onClick","type","onChange","position","top","left","backgroundColor","opacity","zIndex","_c2","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/VideoPlayer.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport videoFile from '../../assets/1.MP4';\nimport VideoNavigation from './VideoNavigation';\nimport { TextField } from '@material-ui/core';\n//const VideoPlayer = ({ src, startTime, endTime, onTimeUpdate }) => {\nconst VideoPlayer = React.forwardRef((props, ref) => { \n  const [currentTime, setCurrentTime] = useState(0);\n  const [playerStatus, setPlayerStatus] = useState({\n    videoRef: ref,\n    isPlaying: false,\n    isSlow: false,\n    isMedium: false,\n    isSlowRewind: false,\n    isMediumRewind: false,\n    playbackRate: 1\n  });\n  //const videoRef = useRef(playerStatus.videoRef);\n  let time = (playerStatus.videoRef.current !== null) ? playerStatus.videoRef.current.currentTime : '00:00:00' ;\n  console.log('props: ', props)\n\n  useEffect(() => {\n    const updateCurrentTime = () => {\n      if (playerStatus.videoRef.current.currentTime >= playerStatus.endTime) {\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          isPlaying: false,\n          isRewind: false,\n          isFast: false,\n          isSlow: false,\n          isMedium: false,\n          isSlowRewind: false,\n          isMediumRewind: false\n        }));\n      }\n      /*\n      if (playerStatus.endTime > playerStatus.videoRef.current.duration) {\n        alert(`playerStatus.endTime(${playerStatus.endTime}) > playerStatus.videoRef.current.duration (${playerStatus.videoRef.current.duration})`)\n        endChange(playerStatus.videoRef.current.duration)\n        setPlayerStatus(prevState => ({\n          ...prevState,\n          endTime: playerStatus.videoRef.current.duration\n        }));\n      }\n      */\n      setCurrentTime(playerStatus.videoRef.current.currentTime);\n    };\n    // Attach the time update event listener\n    playerStatus.videoRef.current.addEventListener('timeupdate', updateCurrentTime);\n    // Clean up the event listener on component unmount\n    return () => {\n      playerStatus.videoRef.current.removeEventListener('timeupdate', updateCurrentTime);\n    };\n  }, []);\n\n  useEffect(() => {\n    const speed = (playerStatus.isMediumRewind) ? 250 : 80;\n    const interval = (playerStatus.isSlowRewind) ? 300 : speed;\n    const intervalId = setInterval(() => {\n      const currentTime = playerStatus.videoRef.current.currentTime;\n      const time = currentTime - 0.05;\n      if ((playerStatus.isSlowRewind || playerStatus.isMediumRewind || playerStatus.isRewind) && playerStatus.isPlaying && (time > (playerStatus.startTime))) {\n        playerStatus.videoRef.current.currentTime = time;\n      } else {\n        clearInterval(intervalId);\n      }\n    }, interval);\n    \n    return () => {\n      clearInterval(intervalId);\n    }\n  }, [\n    playerStatus.isPlaying, \n    playerStatus.isSlowRewind, \n    playerStatus.isMediumRewind, \n    playerStatus.isRewind, \n    playerStatus.startTime, \n    playerStatus.videoRef\n  ]);\n\n  const handleJumpToStart = () => {\n    //console.log(`handleJumpToStart startTime: ${playerStatus.startTime}`);\n    //alert(`handleJumpToStart startTime1: ${playerStatus.startTime}`);\n    playerStatus.videoRef.current.currentTime = playerStatus.startTime || 0;\n    setPlayerStatus(prevState => ({\n      ...prevState,\n      isPlaying: false,\n      isRewind: false,\n      isFast: false,\n      isSlow: false,\n      isMedium: false,\n      isSlowRewind: false,\n      isMediumRewind: false\n    }));\n  };\n  const handleJumpToEnd = (id) => {\n    //console.log(`handleJumpToEnd id: ${id}`);\n    //alert(`handleJumpToEnd id: ${id} endTime1: ${status.endTime1}`);\n    playerStatus.videoRef.current.currentTime = playerStatus.endTime;\n    \n    setPlayerStatus(prevState => ({\n      ...prevState,\n      isPlaying: false,\n      isRewind: false,\n      isFast: false,\n      isSlow: false,\n      isMedium: false,\n      isSlowRewind: false,\n      isMediumRewind: false\n    }));\n  };\n/*\n  const handlePlayPause = () => {\n    console.log(\"handlePlayPause\");\n    if (playerStatus.isPlaying) {\n      console.log(\"handlePlayPause => pause\");\n      playerStatus.videoRef.current.pause();\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: false,\n        isRewind: false,\n        isFast: false,\n        isSlow: false,\n        isMedium: false,\n        isSlowRewind: false,\n        isMediumRewind: false\n      }));\n    } else {\n      console.log(\"handlePlayPause => play\");\n      playerStatus.videoRef.current.playbackRate = 1;\n      playerStatus.videoRef.current.play();\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: true,\n        isSlow: false,\n        isMedium: false,\n        isSlowRewind: false,\n        isMediumRewind: false,\n        isRewind: false,\n        isFast: false\n      }));\n    }\n  };\n\n  const handleRewind = () => {\n    if (playerStatus.videoRef.current && playerStatus.isRewind === false) {\n      console.log(\"handleRewind\");\n      playerStatus.videoRef.current.pause();\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: true,\n        isRewind: true,\n        isFast: false,\n        isSlow: false,\n        isMedium: false,\n        isSlowRewind: false,\n        isMediumRewind: false\n      }));\n    }\n  };\n  const handleMinusOne = () => {\n    if (playerStatus.videoRef.current) {\n      console.log(\"handleMinusOne\");\n      playerStatus.videoRef.current.pause();\n      playerStatus.videoRef.current.currentTime -= 0.05;\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: false,\n        isRewind: false,\n        isFast: false,\n        isSlow: false,\n        isMedium: false,\n        isSlowRewind: false,\n        isMediumRewind: false\n      }));\n    }\n  };\n  const handleAddOne = () => {\n    if (playerStatus.videoRef.current) {\n      console.log(\"handlePlusOne\");\n      playerStatus.videoRef.current.pause();\n      playerStatus.videoRef.current.currentTime += 0.05;\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: false,\n        isRewind: false,\n        isFast: false,\n        isSlow: false,\n        isMedium: false,\n        isSlowRewind: false,\n        isMediumRewind: false\n      }));\n    }\n  };\n  \n  const handleSlowRewind = () => {\n    if (playerStatus.videoRef.current && playerStatus.isSlowRewind === false) {\n      console.log(\"handleSlowMotionRewind\");\n      playerStatus.videoRef.current.pause();\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: true,\n        isRewind: false,\n        isSlow: false,\n        isMedium: false,\n        isSlowRewind: true,\n        isMediumRewind: false,\n        isFast: false\n      }));\n    }\n  };\n\n  const handleMediumRewind = () => {\n    if (playerStatus.videoRef.current && playerStatus.isMediumRewind === false) {\n      console.log(\"handleMediumMotionRewind\");\n      playerStatus.videoRef.current.pause();\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: true,\n        isRewind: false,\n        isSlow: false,\n        isMedium: false,\n        isSlowRewind: false,\n        isMediumRewind: true,\n        isFast: false\n      }));\n    }\n  };\n\n  const handleSlowMotion = () => {\n    if (playerStatus.videoRef.current && playerStatus.isSlow === false) {\n      console.log(\"handleSlowMotion\");\n      playerStatus.videoRef.current.playbackRate = .2;\n      playerStatus.videoRef.current.play();\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: true,\n        isSlow: true,\n        isMedium: false,\n        isSlowRewind: false,\n        isMediumRewind: false,\n        isRewind: false,\n        isFast: false,\n        playbackRate: 0.2\n      }));\n    } \n  };\n  const handleMediumMotion = () => {\n    if (playerStatus.videoRef.current && playerStatus.isMedium === false) {\n      console.log(\"handleMediumMotion\");\n      playerStatus.videoRef.current.playbackRate = .5;\n      playerStatus.videoRef.current.play();\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: true,\n        isSlow: false,\n        isMedium: true,\n        isSlowRewind: false,\n        isMediumRewind: false,\n        isRewind: false,\n        isFast: false,\n        playbackRate: 0.5\n      }));\n    } \n  };\n\n  const handleFastForward = () => {\n    if (playerStatus.videoRef.current && playerStatus.isFast === false) {\n      console.log(\"handleFastMotion\");\n      playerStatus.videoRef.current.playbackRate = 2;\n      playerStatus.videoRef.current.play();\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: true,\n        isFast: true,\n        isSlow: false,\n        isMedium: false,\n        isSlowRewind: false,\n        isMediumRewind: false,\n        isRewind: false,\n        playbackRate: 0.5\n      }));\n    } \n  };\n  const handleTimeUpdate = () => {\n    props.onTimeUpdate(time);\n    if (time >= playerStatus.endTime) {\n      playerStatus.videoRef.current.pause();\n      playerStatus.videoRef.current.currentTime = playerStatus.endTime;\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: false\n      }));\n    } else if (time <= playerStatus.startTime) {\n      playerStatus.videoRef.current.pause();\n      playerStatus.videoRef.current.currentTime = playerStatus.startTime;\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: false\n      }));\n    }\n  };\n\n*/\n  const handleScrub = e => {\n    const x = e.nativeEvent.offsetX;\n    const width = e.currentTarget.offsetWidth;\n    const duration = playerStatus.videoRef.current.duration;\n    const scrubTime = (x / width) * duration;\n    playerStatus.videoRef.current.currentTime = scrubTime;\n  };\n  const startChange = (value) => {\n    props.onStartTimeUpdate(value);\n    setPlayerStatus(prevState => ({\n      ...prevState,\n      startTime: value,\n      currentTime: playerStatus.videoRef.current.currentTime\n    }));\n  }\n  const endChange = (value) => {\n    props.onEndTimeUpdate(value);\n    setPlayerStatus(prevState => ({\n      ...prevState,\n      endTime: value,\n      currentTime: playerStatus.videoRef.current.currentTime\n    }));\n  }\n\n  const handleStartChange = (event) => {\n    const { value } = event.target;\n    props.onStartTimeUpdate(value);\n    setPlayerStatus(prevState => ({\n      ...prevState,\n      startTime: value,\n      currentTime: playerStatus.videoRef.current.currentTime\n    }));\n  }\n  \n  function handleEndChange(event) {\n    const { value } = event.target;\n    props.onEndTimeUpdate(value);\n    setPlayerStatus(prevState => ({\n      ...prevState,\n      endTime: value,\n      currentTime: playerStatus.videoRef.current.currentTime\n    }));\n  }\n  const timeDisplay = () => {\n    console.log(`timeDisplay: ${time} of ${playerStatus.videoRef.current.duration}`)\n    return <div className='timerBox'>\n              {playerStatus.videoRef.current.currentTime} of {playerStatus.videoRef.current.duration}\n            </div>\n  }\n  const handleVideoUpdate = (event) => {\n    const { currentTime } = event.target;\n    if (currentTime > playerStatus.endTime) {\n      playerStatus.videoRef.current.pause();\n      playerStatus.videoRef.current.currentTime = playerStatus.endTime;\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: false,\n        isRewind: false,\n        isFast: false,\n        isSlow: false,\n        isMedium: false,\n        isSlowRewind: false,\n        isMediumRewind: false,\n        currentTime: currentTime\n      }));\n    } else if (currentTime <= playerStatus.startTime) {\n      playerStatus.videoRef.current.pause();\n      playerStatus.videoRef.current.currentTime = playerStatus.startTime;\n      setPlayerStatus(prevState => ({\n        ...prevState,\n        isPlaying: false,\n        isRewind: false,\n        isFast: false,\n        isSlow: false,\n        isMedium: false,\n        isSlowRewind: false,\n        isMediumRewind: false,\n        currentTime: playerStatus.videoRef.current.currentTime\n      }));\n    }\n  };\n\n  return (\n    <div>\n      <video\n        ref={playerStatus.videoRef}\n        //src={props.src}\n        src={videoFile}\n        onTimeUpdate={handleVideoUpdate}\n        style={{\n            width: `100%`,\n            height: `auto`,\n        }}\n\n        onLoadedMetadata={() => {\n          if (time !== null) {\n            time = props.startTime;\n            playerStatus.videoRef.current.playbackRate = 1;\n          }\n        }}\n      />\n      <div className='videoNavigation'>\n        <VideoNavigation \n          handleJumpToStart={() => handleJumpToStart(props.id)}\n          handleMinusOne={() => props.handleMinusOne(props.id)}\n          handleRewind={() => props.handleRewind(props.id)}\n          handleMediumRewind={() => props.handleMediumRewind(props.id)}\n          handleSlowRewind={() => props.handleSlowRewind(props.id)}\n          handlePlayPause={() => props.handlePlayPause(props.id)}\n          handleSlowMotion={() => props.handleSlowMotion(props.id)}\n          handleMediumMotion={() => props.handleMediumMotion(props.id)}\n          handleFastForward={() => props.handleFastForward(props.id)}\n          handleAddOne={() => props.handleAddOne(props.id)}\n          handleJumpToEnd={() => handleJumpToEnd(props.id)}\n          playerStatus={playerStatus}\n        />\n      </div>\n      <div>\n        <div><span className='p-20'>{playerStatus.startTime}</span><span className='p-20'>{currentTime}</span><span className='p-20'>{playerStatus.endTime}</span></div>\n      </div>\n      <button onClick={() => startChange(currentTime)}>Start Mark</button><input type=\"text\" value={playerStatus.startTime} onChange={handleStartChange} />\n      <button onClick={() => endChange(currentTime)}>End Mark</button><input type=\"text\" value={playerStatus.endTime} onChange={handleEndChange}/>\n      <div style={{ position: 'relative' }}>\n        <div\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            height: '100%',\n            //width: `${((playerStatus.videoRef.current?.currentTime || 0) / playerStatus.videoRef.current?.duration) * 100}%`,\n            width: '100px',\n            backgroundColor: 'blue',\n            opacity: 0.5,\n          }}\n        />\n        <div\n          style={{\n            position: 'absolute',\n            backgroundColor: '00FF00',\n            top: 0,\n            left: 0,\n            height: '100%',\n            width: '100%',\n            zIndex: 1,\n          }}\n          onClick={handleScrub}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport default VideoPlayer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}