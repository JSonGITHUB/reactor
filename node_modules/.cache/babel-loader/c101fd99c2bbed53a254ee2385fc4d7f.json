{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/SurfScores.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport LongPressButton from './LongPressButton.js';\nimport Selector from '../forms/FunctionalSelector.js';\nimport getKey from '../utils/KeyGenerator.js';\nimport ScoreCard from './ScoreCard.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SurfScores = _ref => {\n  _s();\n  let {\n    initPlayers,\n    players,\n    updatePlayers,\n    editPlayer,\n    deletePlayer,\n    winner,\n    updateTwoPlayerScores,\n    game,\n    surfKey,\n    time,\n    setTime,\n    heatLength,\n    setSortedPlayers,\n    isWinner,\n    getTwoHighestScores\n  } = _ref;\n  const [surfersScores, setSurfersScores] = useState(JSON.parse(localStorage.getItem('surfersScores')) || []);\n  const [sortedScores, setSortedScores] = useState([]);\n  const [timerOn, setTimerOn] = useState(false);\n  const surfScoring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const [timesUp, setTimesUp] = useState(false);\n  const [surferData, setSurferData] = useState([]);\n  const getScoreTotal = index => {\n    const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n    const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n    const score = highestScore + secondHighestScore;\n    console.log(`getScore => player: ${index} score: ${score}`);\n    return score;\n  };\n  useEffect(() => {\n    const playerData = players.map((player, index) => ({\n      player,\n      score: getScoreTotal(index)\n    }));\n    console.log(`playerData1 => ${JSON.stringify(playerData, null, 2)}`);\n    playerData.sort((a, b) => b.score - a.score);\n    console.log(`playerData2 => ${JSON.stringify(playerData, null, 2)}`);\n    const sortedPlayers = playerData.map(data => data.player);\n    const sortedScores = playerData.map(data => data.score);\n    setSurferData(playerData);\n    //setPlayers(playerData)\n    console.log(`sortedPlayers: ${JSON.stringify(sortedPlayers, null, 2)}`);\n    setSortedPlayers(sortedPlayers);\n    setSortedScores(sortedScores);\n    //localStorage.setItem('players', JSON.stringify(playerData));\n    localStorage.setItem('surfersScores', JSON.stringify(playerData));\n    localStorage.setItem('players', JSON.stringify(players));\n    updatePlayers(playerData);\n  }, [surfersScores]);\n  useEffect(() => {\n    let intervalId;\n    if (timerOn) {\n      intervalId = setInterval(() => {\n        setTime(prevTime => {\n          const newTime = prevTime - 1;\n          if (newTime <= 0) {\n            clearInterval(intervalId);\n            setTimesUp(true);\n            return 0;\n          }\n          return newTime;\n        });\n      }, 1000);\n    }\n    return () => clearInterval(intervalId);\n  }, [timerOn]);\n  useEffect(() => {\n    if (timesUp) {\n      setTimerOn(false);\n      setTime(heatLength);\n      console.log(`heatLength: ${heatLength}`);\n      setTimesUp(false);\n    }\n  }, [timesUp]);\n  const toggleTimer = () => {\n    if (timerOn) {\n      setTimerOn(false);\n    } else {\n      setTimerOn(true);\n    }\n  };\n  const findTwoHighestIndices = scores => {\n    let highestIndex = 0;\n    let secondHighestIndex = -1;\n    scores.forEach((score, index) => {\n      if (score > scores[highestIndex]) {\n        secondHighestIndex = highestIndex;\n        highestIndex = index;\n      } else if (secondHighestIndex === -1 || score > scores[secondHighestIndex]) {\n        secondHighestIndex = index;\n      }\n    });\n    return [highestIndex, secondHighestIndex];\n  };\n  const addScoreForPlayer = (players, playerIndex, score) => {\n    if (playerIndex >= 0 && playerIndex < players.length) {\n      players[playerIndex].scores.push(score);\n    }\n  };\n  //addScoreForPlayer(players, 0, 94);\n\n  const getSurfTotal = (player, index) => {\n    let total = 0;\n    const score = index => localStorage.getItem(surfKey(player, index)) || 0;\n    const addToTotal = value => total = total + value;\n    surfScoring.map((target, index) => {\n      console.log(`getSurfTotal=> ${surfKey(player, index)} ${index}: ${total}`);\n      addToTotal(Number(score(index)));\n    });\n    //console.log(`getsurfTotalplayer=> ${player}: ${total}`)\n    return total;\n  };\n  const scorecard = (player, playerIndex, scoreIndex, score) => {\n    console.log(`${game} - scorecard => player:${player} playerIndex: ${playerIndex} scoreIndex: ${scoreIndex} score: ${score}`);\n    return /*#__PURE__*/_jsxDEV(ScoreCard, {\n      game: game,\n      players: players,\n      playerIndex: playerIndex,\n      scoreIndex: scoreIndex,\n      editPlayer: editPlayer,\n      deletePlayer: deletePlayer,\n      updateTwoPlayerScores: updateTwoPlayerScores,\n      winner: winner\n    }, getKey(player), false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 16\n    }, this);\n  };\n  const surfScores = surfScoring.map((wave, index) => {\n    /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flexContainer width-100-percent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex3Column p-5\",\n        children: scorecard(players[0], 0, index, players[0].surfScores[index])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-20 r-5 font50 color-yellow m-auto\",\n        children: wave\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex3Column p-5\",\n        children: scorecard(players[1], 1, index, players[1].surfScores[index])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this)]\n    }, getKey(`wave${wave}`), true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 8\n    }, this);\n  });\n  const surfClass = playerIndex => 'flex3Column p-20 size25 bold' + (isWinner(playerIndex) ? ' color-neogreen shakingShaka mt-20' : '');\n  const surfScoreboard = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flexContainer glassy width-100-percent mb-20 bg-green r-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: surfClass(0),\n        children: [players[0].player || players[0].name, \":\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-yellow mt-10\",\n          children: getSurfTotal(players[0], 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 90\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-20 bg-yellow navBranding w-200\",\n        children: \"vs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: surfClass(1),\n        children: [players[1].player || players[1].name, \":\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-yellow mt-10\",\n          children: getSurfTotal(players[1], 1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 90\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this), surfScores]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 28\n  }, this);\n  const getTimerButtonClasses = () => {\n    const timerButtonClasses = timerOn ? 'bg-red m-10 r-10 bold size20 p-20 color-light' : 'bg-green m-10 r-10 bold size20 p-20 color-light';\n    return timerButtonClasses;\n  };\n  const getTimerClasses = () => {\n    const timerClasses = time < 120 ? 'blinking-fade' : '';\n    return timerClasses;\n  };\n  const formatTime = timeInSeconds => {\n    const hours = Math.floor(timeInSeconds / 3600);\n    const minutes = Math.floor(timeInSeconds % 3600 / 60);\n    const seconds = timeInSeconds % 60;\n    const formattedHours = hours.toString().padStart(2, '0');\n    const formattedMinutes = minutes.toString().padStart(2, '0');\n    const formattedSeconds = seconds.toString().padStart(2, '0');\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: getTimerButtonClasses(),\n      onClick: () => toggleTimer(),\n      children: timerOn ? 'STOP' : 'START'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-dkBlue m-10 r-10 bold size20 p-20 color-light0\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: getTimerClasses(),\n        children: formatTime(time)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 84\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexContainer color-yellow bold greet ml-10 mr-10\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-10 p-10 w-100 bg-dkGreen m-1 r-5-lft\",\n          children: \"Rank\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex3ColumnLeft m-1 p-10 bg-dkGreen m-1\",\n          children: \"Athlete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex3ColumnRight mr-10 p-10 bg-dkGreen m-1 r-5-rt\",\n          children: \"Total\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 12\n  }, this);\n};\n_s(SurfScores, \"+SCebysHlo8wKJ0GmnwDdUhH0ps=\");\n_c = SurfScores;\nexport default SurfScores;\nvar _c;\n$RefreshReg$(_c, \"SurfScores\");","map":{"version":3,"names":["React","useState","useEffect","LongPressButton","Selector","getKey","ScoreCard","jsxDEV","_jsxDEV","SurfScores","_ref","_s","initPlayers","players","updatePlayers","editPlayer","deletePlayer","winner","updateTwoPlayerScores","game","surfKey","time","setTime","heatLength","setSortedPlayers","isWinner","getTwoHighestScores","surfersScores","setSurfersScores","JSON","parse","localStorage","getItem","sortedScores","setSortedScores","timerOn","setTimerOn","surfScoring","timesUp","setTimesUp","surferData","setSurferData","getScoreTotal","index","highestScore","surfScores","highScoreIndex","secondHighestScore","secondHighScoreIndex","score","console","log","playerData","map","player","stringify","sort","a","b","sortedPlayers","data","setItem","intervalId","setInterval","prevTime","newTime","clearInterval","toggleTimer","findTwoHighestIndices","scores","highestIndex","secondHighestIndex","forEach","addScoreForPlayer","playerIndex","length","push","getSurfTotal","total","addToTotal","value","target","Number","scorecard","scoreIndex","fileName","_jsxFileName","lineNumber","columnNumber","wave","className","children","surfClass","surfScoreboard","Fragment","name","getTimerButtonClasses","timerButtonClasses","getTimerClasses","timerClasses","formatTime","timeInSeconds","hours","Math","floor","minutes","seconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds","onClick","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/SurfScores.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport LongPressButton from './LongPressButton.js';\nimport Selector from '../forms/FunctionalSelector.js';\nimport getKey from '../utils/KeyGenerator.js';\nimport ScoreCard from './ScoreCard.js';\n\nconst SurfScores = ({ initPlayers, players, updatePlayers, editPlayer, deletePlayer, winner, updateTwoPlayerScores, game, surfKey, time, setTime, heatLength, setSortedPlayers, isWinner, getTwoHighestScores}) => {\n\n    const [surfersScores, setSurfersScores] = useState(JSON.parse(localStorage.getItem('surfersScores')) || [])\n    const [sortedScores, setSortedScores] = useState([]);\n    const [timerOn, setTimerOn] = useState(false);\n    const surfScoring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const [timesUp, setTimesUp] = useState(false);\n    const [surferData, setSurferData] = useState([]);\n\n    const getScoreTotal = (index) => {\n        const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex]\n        const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex]\n        const score = (highestScore + secondHighestScore);\n        console.log(`getScore => player: ${index} score: ${score}`);\n        return score;\n    }\n    \n    useEffect(() => {\n\n        const playerData = players.map((player, index) => ({ player, score: getScoreTotal(index) }));\n        console.log(`playerData1 => ${JSON.stringify(playerData,null,2)}`);\n        playerData.sort((a, b) => b.score - a.score);\n        console.log(`playerData2 => ${JSON.stringify(playerData,null,2)}`);\n        const sortedPlayers = playerData.map((data) => data.player);\n        const sortedScores = playerData.map((data) => data.score);\n\n        setSurferData(playerData)\n        //setPlayers(playerData)\n        console.log(`sortedPlayers: ${JSON.stringify(sortedPlayers,null,2)}`)\n        setSortedPlayers(sortedPlayers);\n        setSortedScores(sortedScores);\n        //localStorage.setItem('players', JSON.stringify(playerData));\n        localStorage.setItem('surfersScores', JSON.stringify(playerData));\n        localStorage.setItem('players', JSON.stringify(players));\n        updatePlayers(playerData);\n\n    }, [surfersScores]);\n\n    useEffect(() => {\n        let intervalId;\n        if (timerOn) {\n            intervalId = setInterval(() => {\n                setTime((prevTime) => {\n                    const newTime = prevTime - 1;\n                    if (newTime <= 0) {\n                        clearInterval(intervalId);\n                        setTimesUp(true);\n                        return 0;\n                    }\n                    return newTime;\n                });\n            }, 1000);\n        }\n\n        return () => clearInterval(intervalId);\n    }, [timerOn]);\n\n    useEffect(() => {\n        if (timesUp) {\n            setTimerOn(false);\n            setTime(heatLength);\n            console.log(`heatLength: ${heatLength}`)\n            setTimesUp(false);\n        }\n    }, [timesUp]);\n\n    const toggleTimer = () => {\n        if (timerOn) {\n            setTimerOn(false)\n        } else {\n            setTimerOn(true)\n        }\n    }\n\n    const findTwoHighestIndices = (scores) => {\n        let highestIndex = 0;\n        let secondHighestIndex = -1;\n\n        scores.forEach((score, index) => {\n            if (score > scores[highestIndex]) {\n                secondHighestIndex = highestIndex;\n                highestIndex = index;\n            } else if (secondHighestIndex === -1 || score > scores[secondHighestIndex]) {\n                secondHighestIndex = index;\n            }\n        });\n\n        return [highestIndex, secondHighestIndex];\n    };\n\n    const addScoreForPlayer = (players, playerIndex, score) => {\n        if (playerIndex >= 0 && playerIndex < players.length) {\n            players[playerIndex].scores.push(score);\n        }\n    };\n    //addScoreForPlayer(players, 0, 94);\n\n    const getSurfTotal = (player, index) => {\n        let total = 0;\n        const score = (index) => localStorage.getItem(surfKey(player, index)) || 0;\n        const addToTotal = (value) => total = total + value;\n        surfScoring.map((target, index) => {\n            console.log(`getSurfTotal=> ${surfKey(player, index)} ${index}: ${total}`)\n            addToTotal(Number(score(index)))\n        }\n        );\n        //console.log(`getsurfTotalplayer=> ${player}: ${total}`)\n        return total;\n    }\n\n    const scorecard = (player, playerIndex, scoreIndex, score) => {\n        \n        console.log(`${game} - scorecard => player:${player} playerIndex: ${playerIndex} scoreIndex: ${scoreIndex} score: ${score}`)\n        return <ScoreCard\n            game={game}\n            players={players}\n            playerIndex={playerIndex}\n            scoreIndex={scoreIndex}\n            editPlayer={editPlayer}\n            deletePlayer={deletePlayer}\n            updateTwoPlayerScores={updateTwoPlayerScores}\n            winner={winner}\n            key={getKey(player)}\n        />\n\n    }\n\n    const surfScores = surfScoring.map((wave, index) => {\n       <div className='flexContainer width-100-percent' key={getKey(`wave${wave}`)}>\n            <div className='flex3Column p-5'>\n                {scorecard(players[0], 0, index, players[0].surfScores[index])}\n            </div>\n            <div className='p-20 r-5 font50 color-yellow m-auto'>\n                {wave}\n            </div>\n            <div className='flex3Column p-5'>\n                {scorecard(players[1], 1, index, players[1].surfScores[index])}\n            </div>\n        </div>\n    });\n\n\n    const surfClass = (playerIndex) => 'flex3Column p-20 size25 bold' + ((isWinner(playerIndex)) ? ' color-neogreen shakingShaka mt-20' : '');\n        \n    const surfScoreboard = <React.Fragment>\n                <div className='flexContainer glassy width-100-percent mb-20 bg-green r-10'>\n                    <div className={surfClass(0)}>{players[0].player || players[0].name}:<div className='color-yellow mt-10'>{getSurfTotal(players[0], 0)}</div></div>\n                    <div className='p-20 bg-yellow navBranding w-200'>vs</div>\n                    <div className={surfClass(1)}>{players[1].player || players[1].name}:<div className='color-yellow mt-10'>{getSurfTotal(players[1], 1)}</div></div>\n                </div>\n                {surfScores}\n            </React.Fragment>\n        \n    const getTimerButtonClasses = () => {\n        const timerButtonClasses = timerOn ? 'bg-red m-10 r-10 bold size20 p-20 color-light' : 'bg-green m-10 r-10 bold size20 p-20 color-light';\n        return timerButtonClasses;\n    }\n    const getTimerClasses = () => {\n        const timerClasses = (time < 120) ? 'blinking-fade' : '';\n        return timerClasses;\n    }\n    const formatTime = (timeInSeconds) => {\n        const hours = Math.floor(timeInSeconds / 3600);\n        const minutes = Math.floor((timeInSeconds % 3600) / 60);\n        const seconds = timeInSeconds % 60;\n\n        const formattedHours = hours.toString().padStart(2, '0');\n        const formattedMinutes = minutes.toString().padStart(2, '0');\n        const formattedSeconds = seconds.toString().padStart(2, '0');\n\n        return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n    };\n\n    return <React.Fragment>\n                <div className={getTimerButtonClasses()} onClick={() => toggleTimer()}>\n                    {(timerOn) ? 'STOP' : 'START'}\n                </div>\n                <div className='bg-dkBlue m-10 r-10 bold size20 p-20 color-light0'><span className={getTimerClasses()}>{formatTime(time)}</span></div>\n                <div>\n                    <div className='flexContainer color-yellow bold greet ml-10 mr-10'>\n                        <div className='ml-10 p-10 w-100 bg-dkGreen m-1 r-5-lft'>Rank</div>\n                        <div className='flex3ColumnLeft m-1 p-10 bg-dkGreen m-1'>Athlete</div>\n                        <div className='flex3ColumnRight mr-10 p-10 bg-dkGreen m-1 r-5-rt'>Total</div>\n                    </div>\n                </div>\n            </React.Fragment>\n\n}\n   \nexport default SurfScores;"],"mappings":"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"},"metadata":{},"sourceType":"module"}