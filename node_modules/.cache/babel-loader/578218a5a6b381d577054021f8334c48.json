{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/LoggerFunctional.js\";\nimport React, { useState, useEffect } from 'react';\nimport LogEntry from './LogEntryFunctional.js';\nimport Loader from '../utils/Loader.js';\nimport LogId from './LogId.js';\nimport interfaceData from './InterfaceData.js';\nimport templateData from './TemplateData.js';\n\nconst Logger = ({\n  logId,\n  location\n}) => {\n  const logIdComponent = LogId(logId);\n\n  const logExists = () => localStorage.getItem(logIdComponent) === null ? false : true;\n\n  const initLogId = () => logExists() ? logIdComponent : logIdComponent.generateNewLogId();\n\n  const initLog = () => logExists() ? JSON.parse(localStorage.getItem(logIdComponent)) : templateData;\n\n  const [status, setStatus] = useState({\n    logID: initLogId(),\n    log: initLog(),\n    isLoaded: false,\n    items: []\n  });\n\n  const getSpot = () => localStorage.getItem(\"spot\");\n\n  useEffect(() => {\n    const {\n      state\n    } = location;\n    const logId = state === undefined ? logIdComponent : state.logId.item;\n    console.log(`LoggerFunctional => componentDidMount -> SPOT: ${getSpot()}\\ngetLogId: ${logIdComponent}\\nlogId: ${logId}`);\n\n    if (localStorage.getItem(logId) === null) {\n      setStatus(prevState => ({ ...prevState,\n        log: templateData,\n        logID: logIdComponent.generateNewLogId()\n      }));\n      console.log(`LoggerFunctional => componentDidMount -> 1\\nSPOT: ${getSpot()}\\nlogID: ${status.logID}\\nlog: ${JSON.stringify(status.log, null, 2)}`);\n    } else {\n      setStatus(prevState => ({ ...prevState,\n        log: JSON.parse(localStorage.getItem(logId)),\n        logID: logIdComponent\n      }));\n      console.log(`LoggerFunctional => componentDidMount -> 2\\nSPOT: ${getSpot()}\\nlogID: ${logId}\\nlog: ${JSON.stringify(status.log, null, 2)}`);\n    }\n\n    let data = interfaceData;\n\n    const returnJSON = response => response.json();\n\n    const returnRejection = response => Promise.reject({\n      status: response.status,\n      data\n    });\n\n    const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n    /*\n    const requestInit = {\n        method:'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        mode: 'cors',\n        cache: 'default'\n    };\n    */\n    //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n    //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n\n\n    const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json'; //const uri = 'localhost:8080/writeSurfLog.json';\n\n    /*\n    fetch(uri)\n        .then(response => validate(response))\n        .then(data => {\n            setIsLoaded(true);\n            setItems(data);\n            setLogID(logId);\n        })\n        .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n    */\n\n    setStatus({\n      log: JSON.parse(localStorage.getItem(logIdComponent)),\n      logID: logId,\n      items: data,\n      isLoaded: true\n    });\n  }, [location]);\n\n  const updateLog = (groupTitle, label, selected, set) => {\n    console.log(`updateLog => \\ngroupTitle: ${groupTitle} \\nlabel: ${label}\\nselected: ${selected}\\nset: ${set}`);\n    const log = status.log;\n    log[groupTitle][label] = selected;\n\n    if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n      setStatus(prevState => ({ ...prevState,\n        log: log\n      }));\n    }\n  };\n\n  const getStateLog = () => status.log; //console.log(`LoggerFunctional ===> ${JSON.stringify(status.items, null, 2)}`);\n\n\n  let appInterface = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App-content fadeIn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }\n  }));\n\n  if (status.isLoaded) {\n    appInterface = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-content fadeIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LogEntry, {\n      logId: status.logID,\n      onChange: updateLog,\n      getStateLog: getStateLog,\n      title: \"Session Log\",\n      message: \"Add your session data\",\n      buttonLabel: \"submit\",\n      items: status.items,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  return appInterface;\n};\n\nexport default Logger;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/LoggerFunctional.js"],"names":["React","useState","useEffect","LogEntry","Loader","LogId","interfaceData","templateData","Logger","logId","location","logIdComponent","logExists","localStorage","getItem","initLogId","generateNewLogId","initLog","JSON","parse","status","setStatus","logID","log","isLoaded","items","getSpot","state","undefined","item","console","prevState","stringify","data","returnJSON","response","json","returnRejection","Promise","reject","validate","ok","uri","updateLog","groupTitle","label","selected","set","getStateLog","appInterface"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport LogEntry from './LogEntryFunctional.js';\nimport Loader from '../utils/Loader.js';\nimport LogId from './LogId.js';\nimport interfaceData from './InterfaceData.js'\nimport templateData from './TemplateData.js';\nconst Logger = ({logId, location}) => {\n\n    const logIdComponent = LogId(logId);\n    const logExists = () => (localStorage.getItem(logIdComponent) === null) ? false : true;\n    const initLogId = () => (logExists()) ? logIdComponent : logIdComponent.generateNewLogId();\n    const initLog = () => (logExists()) ? JSON.parse(localStorage.getItem(logIdComponent)) : templateData;\n    const [status, setStatus] = useState({\n        logID: initLogId(),\n        log: initLog(),\n        isLoaded: false,\n        items: []\n    })\n    const getSpot = () => localStorage.getItem(\"spot\");\n    useEffect(() => {\n        const { state } = location;\n        const logId = (state === undefined) ? logIdComponent : state.logId.item;\n        console.log(`LoggerFunctional => componentDidMount -> SPOT: ${getSpot()}\\ngetLogId: ${logIdComponent}\\nlogId: ${logId}`); \n        \n        if (localStorage.getItem(logId) === null) {\n            setStatus(prevState => ({\n                ...prevState,\n                log: templateData,\n                logID:logIdComponent.generateNewLogId()\n            }));\n            console.log(`LoggerFunctional => componentDidMount -> 1\\nSPOT: ${getSpot()}\\nlogID: ${status.logID}\\nlog: ${JSON.stringify(status.log, null, 2)}`); \n        \n        } else {\n            setStatus(prevState => ({\n                ...prevState,\n                log: JSON.parse(localStorage.getItem(logId)),\n                logID: logIdComponent\n            }));\n            console.log(`LoggerFunctional => componentDidMount -> 2\\nSPOT: ${getSpot()}\\nlogID: ${logId}\\nlog: ${JSON.stringify(status.log, null, 2)}`); \n        }\n        \n        let data = interfaceData;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        /*\n        const requestInit = {\n            method:'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            cache: 'default'\n        };\n        */\n        //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n        //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        //const uri = 'localhost:8080/writeSurfLog.json';\n        /*\n        fetch(uri)\n            .then(response => validate(response))\n            .then(data => {\n                setIsLoaded(true);\n                setItems(data);\n                setLogID(logId);\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n        */\n        setStatus({\n            log: JSON.parse(localStorage.getItem(logIdComponent)),\n            logID: logId,\n            items: data,\n            isLoaded: true\n        });\n    }, [location])\n\n    const updateLog = (groupTitle, label, selected, set) => {\n        console.log(`updateLog => \\ngroupTitle: ${groupTitle} \\nlabel: ${label}\\nselected: ${selected}\\nset: ${set}`)\n        const log = status.log;\n        log[groupTitle][label] = selected;\n        if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n            setStatus(prevState => ({\n                ...prevState,\n                log: log\n            }));\n        }\n    }\n    const getStateLog = () => status.log;\n          \n    //console.log(`LoggerFunctional ===> ${JSON.stringify(status.items, null, 2)}`);\n    let appInterface = <div className=\"App-content fadeIn\">\n                            <div className=\"flex3Column\"></div>\n                            <div className=\"flex3Column\">\n                                <Loader />\n                            </div>\n                            <div className=\"flex3Column\"></div>\n                        </div>;\n    if (status.isLoaded) {\n        appInterface = <div className=\"App-content fadeIn\">\n            <div className=\"flex3Column\"></div>\n            <div className=\"flex3Column\">\n                <LogEntry\n                    logId={status.logID}\n                    onChange={updateLog} \n                    getStateLog={getStateLog} \n                    title=\"Session Log\" \n                    message=\"Add your session data\"  \n                    buttonLabel=\"submit\" \n                    items={status.items}\n                />\n            </div>\n            <div className=\"flex3Column\"></div>\n        </div>\n        \n    }\n    return (\n        appInterface            \n    )\n    \n}\nexport default Logger;"]},"metadata":{},"sourceType":"module"}