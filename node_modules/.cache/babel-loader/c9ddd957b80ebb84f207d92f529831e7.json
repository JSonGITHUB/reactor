{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js\";\nimport React from 'react';\nimport Dialog from '../functional/Dialog.js';\nimport Loader from '../utils/Loader.js';\n\nclass Geolocate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getLocation = () => `${this.state.latitude.toFixed(6)}, ${this.state.longitude.toFixed(6)} `;\n\n    this.percent = window.innerWidth < 700 ? 'twentyfivePercent mt--70 mb--70' : 'fiftyPercent mt--40 mb--40';\n\n    this.loading = () => /*#__PURE__*/React.createElement(\"div\", {\n      className: this.percent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      isMotionOn: this.props.isMotionOn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }));\n\n    this.latlon = () => this.state.latitude + \",\" + this.state.longitude;\n\n    this.state = {\n      longitude: null,\n      latitude: null,\n      errorMessage: null,\n      returnCurrentPosition: props.returnCurrentPosition,\n      currentPositionExists: props.currentPositionExists\n    };\n  }\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition( //position => console.log(position.coords.longitude),\n    position => {\n      this.setState({\n        longitude: position.coords.longitude,\n        latitude: position.coords.latitude\n      });\n\n      try {\n        if (!this.props.currentPositionExists()) {\n          this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n        }\n      } catch (err) {\n        document.getElementById(\"demo\").innerHTML = err.message;\n      }\n    }, err => {\n      console.log(err);\n      this.setState({\n        errorMessage: err.message\n      });\n    });\n  }\n\n  render() {\n    const errorExists = this.state.errorMessage ? true : false;\n    const latExists = this.state.latitude ? true : false;\n    const errMessage = this.state.errorMessage;\n    let gelocationStatus = latExists ? this.getLocation() : this.loading();\n    gelocationStatus = errorExists ? `${errMessage}` : gelocationStatus;\n    /*\n    if (latExists) {\n        if (!this.props.currentPositionExists()) {\n            this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n        }\n    }\n    */\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"color-yellow greet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, gelocationStatus));\n  }\n\n}\n\nexport default Geolocate;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js"],"names":["React","Dialog","Loader","Geolocate","Component","constructor","props","getLocation","state","latitude","toFixed","longitude","percent","window","innerWidth","loading","isMotionOn","latlon","errorMessage","returnCurrentPosition","currentPositionExists","componentDidMount","navigator","geolocation","getCurrentPosition","position","setState","coords","err","document","getElementById","innerHTML","message","console","log","render","errorExists","latExists","errMessage","gelocationStatus"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Dialog from '../functional/Dialog.js';\nimport Loader from '../utils/Loader.js';\n\nclass Geolocate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            longitude: null,\n            latitude: null,\n            errorMessage: null,\n            returnCurrentPosition: props.returnCurrentPosition,\n            currentPositionExists: props.currentPositionExists\n        }\n    }\n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            //position => console.log(position.coords.longitude),\n            position => {\n                this.setState({\n                    longitude: position.coords.longitude,\n                    latitude: position.coords.latitude,\n                });\n                try {\n                    if (!this.props.currentPositionExists()) {\n                        this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n                    }\n                }catch(err) {\n                    document.getElementById(\"demo\").innerHTML = err.message;\n                }\n            },\n            err => {\n                console.log(err)\n                this.setState({\n                    errorMessage: err.message\n                });\n\n            }\n        )\n    }\n    getLocation = () => `${this.state.latitude.toFixed(6)}, ${this.state.longitude.toFixed(6)} `;\n    percent = (window.innerWidth < 700) ? 'twentyfivePercent mt--70 mb--70' : 'fiftyPercent mt--40 mb--40';\n    loading = () => <div className={this.percent}>\n                <Loader isMotionOn={this.props.isMotionOn}/>\n            </div>;\n    latlon = () => this.state.latitude + \",\" + this.state.longitude;\n    render() {\n        const errorExists = (this.state.errorMessage) ? true : false;\n        const latExists = (this.state.latitude) ? true : false;\n        const errMessage = this.state.errorMessage;\n        let gelocationStatus = (latExists) ? this.getLocation() : this.loading();\n        gelocationStatus = (errorExists) ? `${errMessage}` : gelocationStatus;\n        /*\n        if (latExists) {\n            if (!this.props.currentPositionExists()) {\n                this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n            }\n        }\n        */\n        return <div>\n                <div className=\"color-yellow greet\">{gelocationStatus}</div>\n            </div>\n    };\n}\n\nexport default Geolocate;"]},"metadata":{},"sourceType":"module"}