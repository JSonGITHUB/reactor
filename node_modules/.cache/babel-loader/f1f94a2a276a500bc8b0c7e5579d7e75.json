{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/PostDirectory.js\";\nimport React from 'react';\n\nconst PostDirectory = () => {\n  const postDirectory = localStorage.getItem(\"postDirectory\") === null ? [] : JSON.parse(localStorage.getItem(\"postDirectory\"));\n  const uniquePosts = [...new Set(postDirectory)];\n  const index = uniquePosts.indexOf(null);\n\n  if (index > -1) {\n    uniquePosts.splice(index, 1);\n  }\n\n  localStorage.setItem(\"postDirectory\", JSON.stringify(uniquePosts));\n  this.state = {\n    postDirectory: this.uniquePosts\n  };\n\n  const getDirectory = () => postDirectory;\n\n  const removeLastId = () => postDirectory.pop();\n\n  const deleteLast = () => {\n    console.log(`PostDirectory => deleteLast()`);\n    postDirectory = removeLastId();\n    localStorage.setItem(\"postDirectory\", JSON.stringify(postDirectory));\n  };\n\n  const add = id => {\n    console.log(`PostDirectory => add(${id})`);\n    postDirectory.push(id);\n    localStorage.setItem(\"postDirectory\", JSON.stringify(postDirectory));\n  };\n\n  const deleteIt = id => {\n    console.log(`PostDirectory => delete(${id})`);\n    const index = postDirectory.indexOf(String(id));\n    console.log(`${index} of ${postDirectory.length}`);\n    postDirectory.splice(index, 1);\n    console.log(`${index} of ${postDirectory.length}`);\n    localStorage.setItem(\"postDirectory\", JSON.stringify(postDirectory));\n    localStorage.removeItem(id);\n    localStorage.setItem(\"lastPostId\", `${postDirectory[postDirectory.length - 1]}`);\n  };\n\n  const getLastIndex = () => Number(postDirectory.length - 1);\n\n  const getLastId = () => postDirectory[getLastIndex()];\n\n  const get2ndToLastId = () => postDirectory[getLastIndex() - 1];\n\n  const getStorageItem = id => localStorage.getItem(id);\n\n  const getLastItem = () => localStorage.getItem(getLastId()) === null ? JSON.parse(getStorageItem(get2ndToLastId())) : JSON.parse(getStorageItem(getLastId()));\n\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }\n  }, \"Count: \", postDirectory.length);\n};\n\nexport default PostDirectory;\n/*\nimport React from 'react';\nclass PostDirectory extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.postDirectory = (localStorage.getItem(\"postDirectory\") === null) ? [] : JSON.parse(localStorage.getItem(\"postDirectory\"));        \n        this.uniquePosts = [...new Set(this.postDirectory)];\n        const index = this.uniquePosts.indexOf(null);\n        if (index > -1) {\n            this.uniquePosts.splice(index, 1);\n        }\n        localStorage.setItem(\"postDirectory\", JSON.stringify(this.uniquePosts))\n        this.state = {\n            postDirectory: this.uniquePosts,\n        };\n    }\n    \n     getDirectory = () => this.postDirectory;\n     removeLastId = () => this.postDirectory.pop();\n     deleteLast = () => {\n         console.log(`PostDirectory => deleteLast()`)\n         this.postDirectory = this.removeLastId();\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n         this.setState({\n             postDirectory: this.postDirectory\n         }); \n     }\n     add = (id) => {\n         console.log(`PostDirectory => add(${id})`);\n         this.postDirectory.push(id);\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n     }\n     delete = (id) => {\n         console.log(`PostDirectory => delete(${id})`)\n         const index = this.postDirectory.indexOf(String(id));\n         console.log(`${index} of ${this.postDirectory.length}`)\n         this.postDirectory.splice(index, 1);\n         console.log(`${index} of ${this.postDirectory.length}`)\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n         localStorage.removeItem(id);\n         localStorage.setItem(\"lastPostId\", `${this.postDirectory[this.postDirectory.length-1]}`);\n         this.setState({\n             postDirectory: this.postDirectory\n         });\n     }\n     getLastIndex = () => Number(this.state.postDirectory.length-1);\n     getLastId = () => this.state.postDirectory[this.getLastIndex()];\n     get2ndToLastId = () => this.state.postDirectory[this.getLastIndex()-1];\n     getStorageItem = (id) => localStorage.getItem(id)\n     getLastItem = () => (localStorage.getItem(this.getLastId()) === null) ? JSON.parse(this.getStorageItem(this.get2ndToLastId())) : JSON.parse(this.getStorageItem(this.getLastId()));\n     render() {      \n             return <p>Count: {this.state.postDirectory.length}</p> \n     }\n     \n }\n export default PostDirectory;\n */","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/PostDirectory.js"],"names":["React","PostDirectory","postDirectory","localStorage","getItem","JSON","parse","uniquePosts","Set","index","indexOf","splice","setItem","stringify","state","getDirectory","removeLastId","pop","deleteLast","console","log","add","id","push","deleteIt","String","length","removeItem","getLastIndex","Number","getLastId","get2ndToLastId","getStorageItem","getLastItem"],"mappings":"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","sourcesContent":["import React from 'react';\nconst PostDirectory = () => {\n\n    const postDirectory = (localStorage.getItem(\"postDirectory\") === null) ? [] : JSON.parse(localStorage.getItem(\"postDirectory\"));        \n    const uniquePosts = [...new Set(postDirectory)];\n    const index = uniquePosts.indexOf(null);\n    if (index > -1) {\n        uniquePosts.splice(index, 1);\n    }\n    localStorage.setItem(\"postDirectory\", JSON.stringify(uniquePosts))\n    this.state = {\n        postDirectory: this.uniquePosts,\n    };\n\n    const getDirectory = () => postDirectory;\n    const removeLastId = () => postDirectory.pop();\n    const deleteLast = () => {\n        console.log(`PostDirectory => deleteLast()`)\n        postDirectory = removeLastId();\n        localStorage.setItem(\"postDirectory\", JSON.stringify(postDirectory))\n    }\n    const add = (id) => {\n        console.log(`PostDirectory => add(${id})`);\n        postDirectory.push(id);\n        localStorage.setItem(\"postDirectory\", JSON.stringify(postDirectory))\n    }\n    const deleteIt = (id) => {\n        console.log(`PostDirectory => delete(${id})`)\n        const index = postDirectory.indexOf(String(id));\n        console.log(`${index} of ${postDirectory.length}`)\n        postDirectory.splice(index, 1);\n        console.log(`${index} of ${postDirectory.length}`)\n        localStorage.setItem(\"postDirectory\", JSON.stringify(postDirectory))\n        localStorage.removeItem(id);\n        localStorage.setItem(\"lastPostId\", `${postDirectory[postDirectory.length-1]}`);\n    }\n    const getLastIndex = () => Number(postDirectory.length-1);\n    const getLastId = () => postDirectory[getLastIndex()];\n    const get2ndToLastId = () => postDirectory[getLastIndex()-1];\n    const getStorageItem = (id) => localStorage.getItem(id)\n    const getLastItem = () => (localStorage.getItem(getLastId()) === null) ? JSON.parse(getStorageItem(get2ndToLastId())) : JSON.parse(getStorageItem(getLastId()));\n    return <p>Count: {postDirectory.length}</p>     \n}\nexport default PostDirectory;\n\n/*\nimport React from 'react';\nclass PostDirectory extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.postDirectory = (localStorage.getItem(\"postDirectory\") === null) ? [] : JSON.parse(localStorage.getItem(\"postDirectory\"));        \n        this.uniquePosts = [...new Set(this.postDirectory)];\n        const index = this.uniquePosts.indexOf(null);\n        if (index > -1) {\n            this.uniquePosts.splice(index, 1);\n        }\n        localStorage.setItem(\"postDirectory\", JSON.stringify(this.uniquePosts))\n        this.state = {\n            postDirectory: this.uniquePosts,\n        };\n    }\n    \n     getDirectory = () => this.postDirectory;\n     removeLastId = () => this.postDirectory.pop();\n     deleteLast = () => {\n         console.log(`PostDirectory => deleteLast()`)\n         this.postDirectory = this.removeLastId();\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n         this.setState({\n             postDirectory: this.postDirectory\n         }); \n     }\n     add = (id) => {\n         console.log(`PostDirectory => add(${id})`);\n         this.postDirectory.push(id);\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n     }\n     delete = (id) => {\n         console.log(`PostDirectory => delete(${id})`)\n         const index = this.postDirectory.indexOf(String(id));\n         console.log(`${index} of ${this.postDirectory.length}`)\n         this.postDirectory.splice(index, 1);\n         console.log(`${index} of ${this.postDirectory.length}`)\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n         localStorage.removeItem(id);\n         localStorage.setItem(\"lastPostId\", `${this.postDirectory[this.postDirectory.length-1]}`);\n         this.setState({\n             postDirectory: this.postDirectory\n         });\n     }\n     getLastIndex = () => Number(this.state.postDirectory.length-1);\n     getLastId = () => this.state.postDirectory[this.getLastIndex()];\n     get2ndToLastId = () => this.state.postDirectory[this.getLastIndex()-1];\n     getStorageItem = (id) => localStorage.getItem(id)\n     getLastItem = () => (localStorage.getItem(this.getLastId()) === null) ? JSON.parse(this.getStorageItem(this.get2ndToLastId())) : JSON.parse(this.getStorageItem(this.getLastId()));\n     render() {      \n             return <p>Count: {this.state.postDirectory.length}</p> \n     }\n     \n }\n export default PostDirectory;\n */\n "]},"metadata":{},"sourceType":"module"}