{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/SurfScoringLogic.js\";\nimport React, { useState, useEffect } from 'react';\nimport surfScoring from './SurfScoring.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SurfScoringLogic = (players, setPlayers) => {\n  const getSurfTotal = player => {\n    let total = 0;\n    const score = index => player.surfScores[index];\n    const addToTotal = value => total = total + value;\n    surfScoring.map((target, index) => {\n      addToTotal(Number(score(index)));\n    });\n    return total;\n  };\n  const getSurferIndexWithPriority = (players, priorityIndex) => {\n    for (let i = 0; i < players.length; i++) {\n      if (Number(players[i].surfPriority) === priorityIndex) {\n        return i;\n      }\n    }\n    return null;\n  };\n  const losePriority = (players, selectedPriority) => {\n    const newPlayers = [...players];\n    newPlayers.map((player, index) => {\n      if (player.surfPriority == selectedPriority) {\n        player.surfPriority = newPlayers.length;\n      } else if (player.surfPriority != 1 && selectedPriority != newPlayers.length) {\n        const shift = player.surfPriority - 1;\n        player.surfPriority = shift > 0 ? shift : newPlayers.length;\n      }\n    });\n    localStorage.setItem('players', JSON.stringify(newPlayers, null, 2));\n    setPlayers(newPlayers);\n  };\n  const shiftPriority = priorityIndex => {\n    const newPlayers = [...players];\n    newPlayers.map((player, index) => {\n      if (player.surfPriority === priorityIndex - 1) {\n        player.surfPriority = priorityIndex;\n      } else if (player.surfPriority === priorityIndex) {\n        player.surfPriority = priorityIndex - 1;\n      }\n    });\n    localStorage.setItem('players', JSON.stringify(newPlayers, null, 2));\n    setPlayers(newPlayers);\n  };\n  const resetSurfersScores = playerId => {\n    const newPlayers = [...players];\n    newPlayers[playerId].surfScore = 0;\n    newPlayers[playerId].surfScores = surfScoring;\n    setPlayers(newPlayers);\n    getScore();\n  };\n  const selectJersey = (playerId, selection) => {\n    const newPlayers = [...players];\n    newPlayers[playerId].surfJerseyColor = selection;\n    localStorage.setItem('players', JSON.stringify(newPlayers));\n    setPlayers(newPlayers);\n  };\n  const getJerseyColorSelector = (playerId, color, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `bg-${color} ht-45 width50px button r-10`,\n    onClick: () => selectJersey(playerId, index)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 64\n  }, this);\n  const editSurfer = playerId => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"m-10 p-10 r-10 bg-darker\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"size30 p-10\",\n      children: \"Name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10`,\n      onClick: () => editPlayer(playerId),\n      children: players[playerId].name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"size30 p-10\",\n      children: \"Jersey color:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: jerseyColors.map((color, index) => index === Math.ceil(jerseyColors.length / 2) ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this), getJerseyColorSelector(playerId, color, index)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this) : getJerseyColorSelector(playerId, color, index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5\",\n        onClick: () => resetSurfersScores(playerId),\n        children: \"Reset Scores\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5\",\n        onClick: () => deleteAthlete(playerId),\n        children: \"Delete Athlete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 38\n  }, this);\n  const scoreTotal = (index, playersArray) => Number(highestScore(index, playersArray) + secondHighestScore(index, playersArray)).toFixed(2);\n  const isTieScore = index => {\n    const score = scoreTotal(index, players);\n    if (index !== 0) {\n      if (score === scoreTotal(index - 1, players)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  const place = index => isTieScore(index) && index !== 0 ? index : index + 1;\n  const placeSuffix = index => rank[isTieScore(index) && index !== 0 ? index - 1 : index > 2 ? 3 : index];\n  const position = index => `${place} ${placeSuffix}`;\n  const rank = ['st', 'nd', 'rd', 'th'];\n  const getTwoHighestScores = index => {\n    const player = players[index];\n    const scores = player.surfScores;\n    const [highestIndex, secondHighestIndex] = findTwoHighestIndices(scores);\n    //console.log(`getTwoHighestScores => playerIndex: ${index} player: ${JSON.stringify(player,null,2)} name: ${(player.player || player.name)}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n    return {\n      highScoreIndex: highestIndex,\n      secondHighScoreIndex: secondHighestIndex\n    };\n  };\n  const highestScore = (index, playersArray) => {\n    return playersArray[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n  };\n  const secondHighestScore = (index, playersArray) => playersArray[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n  const getScoreTotal = index => {\n    const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n    const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n    const score = highestScore + secondHighestScore;\n    return score;\n  };\n};\n_c = SurfScoringLogic;\nexport default SurfScoringLogic;\nvar _c;\n$RefreshReg$(_c, \"SurfScoringLogic\");","map":{"version":3,"names":["React","useState","useEffect","surfScoring","jsxDEV","_jsxDEV","SurfScoringLogic","players","setPlayers","getSurfTotal","player","total","score","index","surfScores","addToTotal","value","map","target","Number","getSurferIndexWithPriority","priorityIndex","i","length","surfPriority","losePriority","selectedPriority","newPlayers","shift","localStorage","setItem","JSON","stringify","shiftPriority","resetSurfersScores","playerId","surfScore","getScore","selectJersey","selection","surfJerseyColor","getJerseyColorSelector","color","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","editSurfer","children","editPlayer","name","jerseyColors","Math","ceil","Fragment","deleteAthlete","scoreTotal","playersArray","highestScore","secondHighestScore","toFixed","isTieScore","place","placeSuffix","rank","position","getTwoHighestScores","scores","highestIndex","secondHighestIndex","findTwoHighestIndices","highScoreIndex","secondHighScoreIndex","getScoreTotal","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/SurfScoringLogic.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport surfScoring from './SurfScoring.js'\n\nconst SurfScoringLogic = (players, setPlayers) => {\n\n    const getSurfTotal = (player) => {\n        let total = 0;\n        const score = (index) => player.surfScores[index];\n        const addToTotal = (value) => total = total + value;\n        surfScoring.map((target, index) => {\n                addToTotal(Number(score(index)))\n            }\n        );\n        return total;\n    }\n    const getSurferIndexWithPriority = (players, priorityIndex) => {\n        for (let i = 0; i < players.length; i++) {\n            if (Number(players[i].surfPriority) === priorityIndex) {\n                return i;\n            }\n        }\n        return null;\n    }\n    const losePriority = (players, selectedPriority) => {\n        const newPlayers = [...players];\n        newPlayers.map((player, index) => {\n            if (player.surfPriority == selectedPriority) {\n                player.surfPriority = newPlayers.length;\n            } else if (player.surfPriority != 1 && selectedPriority != newPlayers.length) {\n                const shift = player.surfPriority - 1;\n                player.surfPriority = (shift > 0) ? shift : newPlayers.length;\n            }\n        });\n        localStorage.setItem('players', JSON.stringify(newPlayers, null, 2));\n        setPlayers(newPlayers);\n    }\n    const shiftPriority = (priorityIndex) => {\n        const newPlayers = [...players];\n        newPlayers.map((player, index) => {\n            if (player.surfPriority === (priorityIndex - 1)) {\n                player.surfPriority = priorityIndex;\n            } else if (player.surfPriority === priorityIndex) {\n                player.surfPriority = (priorityIndex - 1);\n            }\n        });\n        localStorage.setItem('players', JSON.stringify(newPlayers, null, 2));\n        setPlayers(newPlayers);\n    }\n    const resetSurfersScores = (playerId) => {\n        const newPlayers = [...players];\n        newPlayers[playerId].surfScore = 0;\n        newPlayers[playerId].surfScores = surfScoring;\n        setPlayers(newPlayers);\n        getScore();\n    }\n    const selectJersey = (playerId, selection) => {\n        const newPlayers = [...players];\n        newPlayers[playerId].surfJerseyColor = (selection);\n        localStorage.setItem('players', JSON.stringify(newPlayers));\n        setPlayers(newPlayers);\n    }\n    const getJerseyColorSelector = (playerId, color, index) => <button className={`bg-${color} ht-45 width50px button r-10`} onClick={() => selectJersey(playerId, index)}></button>;\n    const editSurfer = (playerId) => <div className='m-10 p-10 r-10 bg-darker'>\n            <div className='size30 p-10'>Name:</div>\n            <button className={`bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10`} onClick={() => editPlayer(playerId)}>{players[playerId].name}</button>\n            <div className='size30 p-10'>Jersey color:</div>\n            <div>\n                {jerseyColors.map((color,index) => \n                    index === Math.ceil(jerseyColors.length / 2) ? (\n                        <React.Fragment key={index}>\n                            <br />\n                            {getJerseyColorSelector(playerId, color, index)}\n                        </React.Fragment>\n                    ) : (\n                        getJerseyColorSelector(playerId, color, index)\n                    )\n                )}\n            </div>\n            <div>\n                <button className='bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5' onClick={() => resetSurfersScores(playerId)}>\n                    Reset Scores\n                </button>\n                <button className='bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5' onClick={() => deleteAthlete(playerId)}>\n                    Delete Athlete\n                </button>\n            </div>\n        </div>\n    \n    const scoreTotal = (index, playersArray) => Number(highestScore(index, playersArray) + secondHighestScore(index, playersArray)).toFixed(2);\n    \n    const isTieScore = (index) => {\n        const score = scoreTotal(index, players);\n        if (index !== 0) {\n            if (score === scoreTotal(index - 1, players)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const place = (index) => (isTieScore(index) && (index !== 0)) ? index : (index + 1);\n    const placeSuffix = (index) => rank[(isTieScore(index) && (index !== 0)) ? (index-1) : (index > 2) ? 3 : (index)];\n    const position = (index) => `${place} ${placeSuffix}`;\n    const rank = ['st', 'nd', 'rd', 'th'];\n    const getTwoHighestScores = (index) => {\n        const player = players[index];\n        const scores = player.surfScores;\n        const [highestIndex, secondHighestIndex] = findTwoHighestIndices(scores);\n        //console.log(`getTwoHighestScores => playerIndex: ${index} player: ${JSON.stringify(player,null,2)} name: ${(player.player || player.name)}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n        return {\n            highScoreIndex: highestIndex,\n            secondHighScoreIndex: secondHighestIndex\n        };\n    };\n    const highestScore = (index, playersArray) => {\n        return playersArray[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n    }\n    const secondHighestScore = (index, playersArray) => playersArray[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n    \n    const getScoreTotal = (index) => {\n        const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex]\n        const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex]\n        const score = (highestScore + secondHighestScore);\n        return score;\n    }\n\n\n}\nexport default SurfScoringLogic;"],"mappings":"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"},"metadata":{},"sourceType":"module"}