{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst stream_1 = require(\"stream\");\n\nconst is_1 = require(\"@sindresorhus/is\");\n\nfunction createProgressStream(name, emitter, totalBytes) {\n  let transformedBytes = 0;\n\n  if (is_1.default.string(totalBytes)) {\n    totalBytes = Number(totalBytes);\n  }\n\n  const progressStream = new stream_1.Transform({\n    transform(chunk, _encoding, callback) {\n      transformedBytes += chunk.length;\n      const percent = totalBytes ? transformedBytes / totalBytes : 0; // Let `flush()` be responsible for emitting the last event\n\n      if (percent < 1) {\n        emitter.emit(name, {\n          percent,\n          transferred: transformedBytes,\n          total: totalBytes\n        });\n      }\n\n      callback(undefined, chunk);\n    },\n\n    flush(callback) {\n      emitter.emit(name, {\n        percent: 1,\n        transferred: transformedBytes,\n        total: totalBytes\n      });\n      callback();\n    }\n\n  });\n  emitter.emit(name, {\n    percent: 0,\n    transferred: 0,\n    total: totalBytes\n  });\n  return progressStream;\n}\n\nexports.createProgressStream = createProgressStream;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/node_modules/got/dist/source/progress.js"],"names":["Object","defineProperty","exports","value","stream_1","require","is_1","createProgressStream","name","emitter","totalBytes","transformedBytes","default","string","Number","progressStream","Transform","transform","chunk","_encoding","callback","length","percent","emit","transferred","total","undefined","flush"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,kBAAD,CAApB;;AACA,SAASE,oBAAT,CAA8BC,IAA9B,EAAoCC,OAApC,EAA6CC,UAA7C,EAAyD;AACrD,MAAIC,gBAAgB,GAAG,CAAvB;;AACA,MAAIL,IAAI,CAACM,OAAL,CAAaC,MAAb,CAAoBH,UAApB,CAAJ,EAAqC;AACjCA,IAAAA,UAAU,GAAGI,MAAM,CAACJ,UAAD,CAAnB;AACH;;AACD,QAAMK,cAAc,GAAG,IAAIX,QAAQ,CAACY,SAAb,CAAuB;AAC1CC,IAAAA,SAAS,CAACC,KAAD,EAAQC,SAAR,EAAmBC,QAAnB,EAA6B;AAClCT,MAAAA,gBAAgB,IAAIO,KAAK,CAACG,MAA1B;AACA,YAAMC,OAAO,GAAGZ,UAAU,GAAGC,gBAAgB,GAAGD,UAAtB,GAAmC,CAA7D,CAFkC,CAGlC;;AACA,UAAIY,OAAO,GAAG,CAAd,EAAiB;AACbb,QAAAA,OAAO,CAACc,IAAR,CAAaf,IAAb,EAAmB;AACfc,UAAAA,OADe;AAEfE,UAAAA,WAAW,EAAEb,gBAFE;AAGfc,UAAAA,KAAK,EAAEf;AAHQ,SAAnB;AAKH;;AACDU,MAAAA,QAAQ,CAACM,SAAD,EAAYR,KAAZ,CAAR;AACH,KAbyC;;AAc1CS,IAAAA,KAAK,CAACP,QAAD,EAAW;AACZX,MAAAA,OAAO,CAACc,IAAR,CAAaf,IAAb,EAAmB;AACfc,QAAAA,OAAO,EAAE,CADM;AAEfE,QAAAA,WAAW,EAAEb,gBAFE;AAGfc,QAAAA,KAAK,EAAEf;AAHQ,OAAnB;AAKAU,MAAAA,QAAQ;AACX;;AArByC,GAAvB,CAAvB;AAuBAX,EAAAA,OAAO,CAACc,IAAR,CAAaf,IAAb,EAAmB;AACfc,IAAAA,OAAO,EAAE,CADM;AAEfE,IAAAA,WAAW,EAAE,CAFE;AAGfC,IAAAA,KAAK,EAAEf;AAHQ,GAAnB;AAKA,SAAOK,cAAP;AACH;;AACDb,OAAO,CAACK,oBAAR,GAA+BA,oBAA/B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"stream\");\nconst is_1 = require(\"@sindresorhus/is\");\nfunction createProgressStream(name, emitter, totalBytes) {\n    let transformedBytes = 0;\n    if (is_1.default.string(totalBytes)) {\n        totalBytes = Number(totalBytes);\n    }\n    const progressStream = new stream_1.Transform({\n        transform(chunk, _encoding, callback) {\n            transformedBytes += chunk.length;\n            const percent = totalBytes ? transformedBytes / totalBytes : 0;\n            // Let `flush()` be responsible for emitting the last event\n            if (percent < 1) {\n                emitter.emit(name, {\n                    percent,\n                    transferred: transformedBytes,\n                    total: totalBytes\n                });\n            }\n            callback(undefined, chunk);\n        },\n        flush(callback) {\n            emitter.emit(name, {\n                percent: 1,\n                transferred: transformedBytes,\n                total: totalBytes\n            });\n            callback();\n        }\n    });\n    emitter.emit(name, {\n        percent: 0,\n        transferred: 0,\n        total: totalBytes\n    });\n    return progressStream;\n}\nexports.createProgressStream = createProgressStream;\n"]},"metadata":{},"sourceType":"script"}