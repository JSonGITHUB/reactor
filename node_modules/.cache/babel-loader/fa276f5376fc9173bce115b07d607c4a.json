{"ast":null,"code":"import React from 'react';\n\nclass WaveUtils extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.addWave = () => {\n      const locations = this.state.locations;\n      const swells = [];\n      const winds = [];\n      const tides = [];\n      let i = 0;\n      let wave = prompt(\"wave: \", \"enter spot\");\n      const swellCount = prompt(\"swell count: \", \"how many directions?\");\n\n      for (i = 0; i < swellCount; i++) {\n        swells[i] = prompt(\"swell direction\", \"direction\");\n      }\n\n      const windCount = prompt(\"wind count: \", \"how many directions?\");\n\n      for (i = 0; i < windCount; i++) {\n        winds[i] = prompt(\"wind direction\", \"direction\");\n      }\n\n      const tideCount = prompt(\"tide count: \", \"how many tides?\");\n\n      for (i = 0; i < tideCount; i++) {\n        tides[i] = prompt(\"tide direction\", \"direction\");\n      }\n\n      const getObj = () => {\n        return {\n          name: wave,\n          latitude: this.state.latitude,\n          longitude: this.state.longitude,\n          swell: swells,\n          wind: winds,\n          tide: tides\n        };\n      };\n\n      locations.push(getObj());\n      console.log(`add a wave...  winds: ${JSON.stringify(getObj(), null, 2)}`);\n      localStorage.setItem('locations', JSON.stringify(locations));\n      this.setState({\n        locations: locations\n      });\n    };\n\n    this.deleteWave = props => {\n      const locations = this.state.locations; //console.log(`Props: ${JSON.stringify(props, null, 2)}`)\n\n      let index = 0;\n      let result = locations.find(obj => {\n        index++;\n        return obj.name === props.name;\n      });\n      console.log(`delete 1 => index: ${index} result: ${JSON.stringify(result, null, 2)}`);\n      console.log(`delete 2 => locations: [${index}]: ${JSON.stringify(locations[index], null, 2)}`); ///////////////\n\n      locations.splice(index - 1, 1);\n      localStorage.setItem('locations', JSON.stringify(locations));\n      console.log(`delete 3 => locations: [${index - 1}]: ${locations.map((location, index) => `${index} ${location.name}`)}`);\n      this.setState({\n        locations: locations\n      });\n    };\n\n    this.editWaveSave = (location, index) => {\n      console.log(`editWaveSave() => ${JSON.stringify(location, null, 2)}`);\n      let locations = this.state.locations;\n      let swells = location.swell;\n      let winds = location.wind;\n      let tides = location.tide;\n      let i = 0;\n      let wave = prompt(\"wave: \", location.name);\n      const swellCount = prompt(\"swell count: \", swells.length);\n\n      for (i = 0; i < swellCount; i++) {\n        swells[i] = prompt(\"edit swell direction\", swells[i]);\n      }\n\n      swells = swells.slice(0, swellCount);\n      const windCount = prompt(\"wind count: \", winds.length);\n\n      for (i = 0; i < windCount; i++) {\n        winds[i] = prompt(\"edit wind direction\", winds[i]);\n      }\n\n      winds = winds.slice(0, windCount);\n      const tideCount = prompt(\"tide count: \", tides.length);\n\n      for (i = 0; i < tideCount; i++) {\n        tides[i] = prompt(\"edit tide direction\", tides[i]);\n      }\n\n      tides = tides.slice(0, tideCount);\n\n      const getObj = () => {\n        return {\n          name: wave,\n          latitude: location.latitude,\n          longitude: location.longitude,\n          swell: swells,\n          wind: winds,\n          tide: tides\n        };\n      };\n\n      console.log(`locations: ${JSON.stringify(locations[index], null, 2)} => will be ${JSON.stringify(getObj(), null, 2)}`);\n      locations[index] = getObj();\n      console.log(`edit a wave saving... ${JSON.stringify(locations[index], null, 2)}`);\n      localStorage.setItem('locations', JSON.stringify(locations));\n      this.setState({\n        locations: locations\n      });\n    };\n\n    this.editWave = props => {\n      const locations = this.state.locations;\n\n      if (props.name === \"button\") {\n        console.log(`edit a wave... ${JSON.stringify(props, null, 2)}`);\n        this.handleEditToggle();\n      } else {\n        console.log(`Props: ${JSON.stringify(props, null, 2)}`);\n        let index = 0;\n        let result = locations.find(obj => {\n          index++;\n          return obj.name === props.name;\n        });\n        console.log(`index: ${index} result: ${JSON.stringify(result, null, 2)}`);\n        console.log(`locations: [${index}]: ${JSON.stringify(locations[index - 1], null, 2)}`);\n        this.editWaveSave(result, index - 1);\n      }\n    };\n\n    this.state = {\n      latitude: 33.083975,\n      longitude: -117.232325\n    };\n  }\n\n}\n\nexport default WaveUtils;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/WaveUtils.js"],"names":["React","WaveUtils","Component","constructor","props","addWave","locations","state","swells","winds","tides","i","wave","prompt","swellCount","windCount","tideCount","getObj","name","latitude","longitude","swell","wind","tide","push","console","log","JSON","stringify","localStorage","setItem","setState","deleteWave","index","result","find","obj","splice","map","location","editWaveSave","length","slice","editWave","handleEditToggle"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass WaveUtils extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            latitude: 33.083975,\n            longitude: -117.232325,\n        };\n    }\n    addWave = () => {\n        const locations = this.state.locations;\n        const swells = [];\n        const winds = [];\n        const tides = [];\n        let i=0;\n        let wave = prompt(\"wave: \", \"enter spot\");\n        const swellCount = prompt(\"swell count: \", \"how many directions?\");\n        for (i=0; i<swellCount; i++) {\n            swells[i] = prompt(\"swell direction\", \"direction\");\n        }\n        const windCount = prompt(\"wind count: \", \"how many directions?\");\n        for (i=0; i<windCount; i++) {\n            winds[i] = prompt(\"wind direction\", \"direction\");\n        }\n        const tideCount = prompt(\"tide count: \", \"how many tides?\");\n        for (i=0; i<tideCount; i++) {\n            tides[i] = prompt(\"tide direction\", \"direction\");\n        }\n        const getObj = () => {\n            return {\n                name: wave,\n                latitude: this.state.latitude,\n                longitude: this.state.longitude,\n                swell: swells,\n                wind: winds,\n                tide: tides\n            }\n        }\n        locations.push(getObj());\n        console.log(`add a wave...  winds: ${JSON.stringify(getObj(), null, 2)}`)\n        localStorage.setItem('locations', JSON.stringify(locations))\n        this.setState({\n            locations: locations\n        })\n    }\n    deleteWave = (props) => {\n        const locations = this.state.locations;\n        //console.log(`Props: ${JSON.stringify(props, null, 2)}`)\n        let index = 0;\n        let result = locations.find(obj => {\n            index++\n            return obj.name === props.name\n        })\n        console.log(`delete 1 => index: ${index} result: ${JSON.stringify(result, null, 2)}`)\n        console.log(`delete 2 => locations: [${index}]: ${JSON.stringify(locations[index], null, 2)}`)\n\n        ///////////////\n        locations.splice(index-1, 1);\n        localStorage.setItem('locations', JSON.stringify(locations))\n        console.log(`delete 3 => locations: [${index-1}]: ${locations.map((location, index) => `${index} ${location.name}`)}`)\n        this.setState({\n            locations: locations\n        })\n    }\n    editWaveSave = (location, index) => {\n        console.log(`editWaveSave() => ${JSON.stringify(location,null,2)}`)\n        let locations = this.state.locations;\n        let swells = location.swell;\n        let winds = location.wind;\n        let tides = location.tide;\n        let i=0;\n        let wave = prompt(\"wave: \", location.name);\n        const swellCount = prompt(\"swell count: \", swells.length);\n        for (i=0; i<swellCount; i++) {\n            swells[i] = prompt(\"edit swell direction\", swells[i]);\n        }\n        swells = swells.slice(0, swellCount);\n        const windCount = prompt(\"wind count: \", winds.length);\n        for (i=0; i<windCount; i++) {\n            winds[i] = prompt(\"edit wind direction\", winds[i]);\n        }\n        winds = winds.slice(0, windCount);\n        const tideCount = prompt(\"tide count: \", tides.length);\n        for (i=0; i<tideCount; i++) {\n            tides[i] = prompt(\"edit tide direction\", tides[i]);\n        }\n        tides = tides.slice(0, tideCount);\n        const getObj = () => {\n            return {\n                name: wave,\n                latitude: location.latitude,\n                longitude: location.longitude,\n                swell: swells,\n                wind: winds,\n                tide: tides\n            }\n        }\n        console.log(`locations: ${JSON.stringify(locations[index],null,2)} => will be ${JSON.stringify(getObj(),null,2)}`)\n        locations[index] = getObj();\n        console.log(`edit a wave saving... ${JSON.stringify(locations[index], null, 2)}`)\n        localStorage.setItem('locations', JSON.stringify(locations))\n        this.setState({\n            locations: locations\n        })\n    }\n    editWave = (props) => {\n        const locations = this.state.locations;\n        \n        if (props.name === \"button\") {\n            console.log(`edit a wave... ${JSON.stringify(props, null, 2)}`);\n            this.handleEditToggle()\n\n        } else {\n            console.log(`Props: ${JSON.stringify(props, null, 2)}`)\n            let index = 0;\n            let result = locations.find(obj => {\n                index++\n                return obj.name === props.name\n            })\n            console.log(`index: ${index} result: ${JSON.stringify(result, null, 2)}`)\n            console.log(`locations: [${index}]: ${JSON.stringify(locations[index-1], null, 2)}`)\n            this.editWaveSave(result, index-1);\n        }\n    }\n}\nexport default WaveUtils"]},"metadata":{},"sourceType":"module"}