{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/Dominos.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport LongPressButton from './LongPressButton.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dominos = _ref => {\n  _s();\n  let {\n    player,\n    playerIndex,\n    scoreIndex,\n    scoreTotal,\n    treeTotal,\n    editPlayer,\n    deletePlayer,\n    getDominoTotal,\n    updateTwoPlayerScores,\n    winner\n  } = _ref;\n  //const dominoKey = `${(player.player||player.name)}Domino${scoreIndex}`;\n  const indexArray = [0, 1, 2, 3];\n  const getScore = () => {\n    //let newScore = 0;\n    //indexArray.map(scoreBox => {\n    //const dominoKey = `${(player.player||player.name)}Domino${scoreBox}`;\n    //console.log(`getScore => dominoKey: ${dominoKey}`)\n    //console.log(`getScore => newScore: ${Number(localStorage.getItem(dominoKey) || 0)}`)\n    //newScore = newScore + Number(localStorage.getItem(dominoKey) || 0);\n    //});\n    //return newScore;\n    const localPlayers = JSON.parse(localStorage.getItem('players'));\n    const localPlayer = localPlayers[playerIndex];\n    return Number(localPlayer.dominoScore);\n  };\n  const [score, setScore] = useState(getScore());\n  const [scoreTotalState, setScoreTotal] = useState(scoreTotal);\n  // eslint-disable-next-line\n  const [edit, setEdit] = useState(false);\n  const [timer, setTimer] = useState(null);\n  const [showButtons, setShowButtons] = useState(false);\n  const handleTouchStart = () => {\n    console.log(`handleTouchStart`);\n    setTimer(setTimeout(() => setShowButtons(true), 1000));\n  };\n  const handleTouchEnd = () => {\n    clearTimeout(timer);\n    //setShowButtons(false);\n  };\n\n  const quadrantScore = quadrant => {\n    //const playerScore = Number(localStorage.getItem(dominoKey));\n    //const playerScore = scoreTotalState;\n    const playerScore = getScore();\n    const scoreStart = treeTotal - quadrant * 10;\n    //console.log(`player: ${player.name} dominoKey: ${dominoKey} playerScore: ${playerScore} \\nscoreTotalState: ${scoreTotalState} \\ntreeTotal: ${treeTotal} \\nscoreStart: ${scoreStart} \\nquadrant: ${quadrant}`)\n    console.log(`player: ${player.name} playerScore: ${playerScore} \\nscoreTotalState: ${scoreTotalState} \\ntreeTotal: ${treeTotal} \\nscoreStart: ${scoreStart} \\nquadrant: ${quadrant}`);\n    //const scoreEnd = scoreStart+((quadrant-1)*10);\n    if (playerScore > scoreStart && playerScore < scoreStart + 10) {\n      return \"/\";\n    } else if (playerScore <= scoreStart) {\n      return \"\";\n    } else {\n      return \"X\";\n    }\n\n    //let quadrantScore = ['-','/', 'X'];\n    //return score;\n  };\n\n  const getDominoScore = quadrant => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"white\",\n    children: quadrantScore(quadrant)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 42\n  }, this);\n  // eslint-disable-next-line\n  const updateScore = newScore => {\n    localStorage.setItem(player.player || player.name, newScore);\n    //setScore(Number(localStorage.getItem(player)));\n  };\n\n  const updateDominos = () => {\n    console.log(`updateDominos() => getScore(): ${getScore()} player: ${player.name} playerIndex: ${playerIndex} scoreIndex: ${scoreIndex}`);\n    updateTwoPlayerScores(player, playerIndex, getScore());\n  };\n  var audioContext = new AudioContext(),\n    oscillator;\n  const playSound = score => {\n    // Create an oscillator node\n    oscillator = audioContext.createOscillator();\n\n    // Connect the oscillator to the audio context's destination (your speakers)\n    oscillator.connect(audioContext.destination);\n    const treeScores = [5, 10, 55, 60, 105, 110, 155, 160];\n    const treeTotals = [50, 100, 150, 200];\n    const treeClosed = () => treeTotals.includes(score);\n    const isTree = () => treeScores.includes(score);\n    const isTree1 = () => score > 0 && score < 55;\n    const isTree2 = () => score > 50 && score < 105;\n    const isTree3 = () => score > 100 && score < 155;\n    const isTree4 = () => score > 150;\n    const isTreeComplete = () => score > 150;\n    // Set the oscillator type to 'sine' (you can experiment with other types like 'square', 'sawtooth', 'triangle')\n\n    const getType = () => score === winner || treeClosed() ? 'sawtooth' : 'triagle';\n    oscillator.type = getType();\n\n    //const note = (treeClosed()) ? 1000 : (440 + (score * 2));\n    const note = treeClosed() ? 1000 : 440;\n    // Set the frequency (Hz) - in this case, 440 Hz is an 'A' note\n    oscillator.frequency.setValueAtTime(note, audioContext.currentTime);\n\n    // Start the oscillator\n    oscillator.start();\n    const soundLength = score == winner ? 1 : 0.05;\n    // Stop the oscillator after 0.5 seconds (you can adjust this time)\n    oscillator.stop(audioContext.currentTime + soundLength);\n  };\n  var audioContext = new AudioContext(),\n    oscillator1;\n  const playSiren = () => {\n    let highPitch = false;\n    const getHighPitch = () => {\n      highPitch = !highPitch;\n      return highPitch;\n    };\n\n    //const AudioContext = window.AudioContext || window.webkitAudioContext;\n    //const audioContext = new AudioContext();\n\n    oscillator1 = audioContext.createOscillator();\n    oscillator1.type = 'sine'; // First oscillator is a sine wave\n    oscillator1.frequency.setValueAtTime(400, audioContext.currentTime);\n    const oscillator2 = audioContext.createOscillator();\n    oscillator2.type = 'sine'; // Second oscillator is a square wave\n    oscillator2.frequency.setValueAtTime(400, audioContext.currentTime);\n\n    // Gain nodes to control volume\n    const gainNode1 = audioContext.createGain();\n    const gainNode2 = audioContext.createGain();\n    oscillator1.connect(gainNode1);\n    oscillator2.connect(gainNode2);\n    gainNode1.connect(audioContext.destination);\n    gainNode2.connect(audioContext.destination);\n    oscillator1.start();\n    oscillator2.start();\n    const sirenInterval = setInterval(() => {\n      const frequency = getHighPitch() ? 1200 : 400; // Random frequency between 400 and 1200 Hz\n      oscillator1.frequency.setValueAtTime(frequency, audioContext.currentTime);\n      oscillator2.frequency.setValueAtTime(frequency, audioContext.currentTime);\n    }, 100); // Change frequency every 10th of a second\n\n    // Stop the siren after 10 seconds\n    setTimeout(() => {\n      clearInterval(sirenInterval);\n      oscillator1.stop();\n      oscillator2.stop();\n    }, 2000);\n  };\n  const addScore = () => {\n    //const playerScore = Number(localStorage.getItem(dominoKey));\n    //const playerScore = Number(localStorage.getItem('twoPlayerScores').split(',')[playerIndex]) || 0;\n    const localPlayers = JSON.parse(localStorage.getItem('players'));\n    const localPlayer = localPlayers[playerIndex];\n    //const playerScore = Number(localStorage.getItem('players').split(',')[playerIndex]) || 0;\n    const playerScore = Number(localPlayer.dominoScore) || 0;\n\n    //console.log(`addScore => dominoKey: ${dominoKey} treeTotal: ${treeTotal} scoreTotalState: ${scoreTotalState}  score: ${score} getScore(): ${getScore()} getDominoTotal(): ${playerScore}`);\n    console.log(`addScore => treeTotal: ${treeTotal} scoreTotalState: ${scoreTotalState}  score: ${score} getScore(): ${getScore()} getDominoTotal(): ${playerScore}`);\n    if (score < Number(treeTotal) && score > Number(treeTotal - 51)) {\n      let newScore = playerScore + 5;\n      const players = JSON.parse(localStorage.getItem('players'));\n      players[playerIndex].dominoScore = newScore;\n      localStorage.setItem('players', JSON.stringify(players));\n      //localStorage.setItem(dominoKey, newScore);\n      const currentScore = getScore();\n      setScore(currentScore);\n      if (currentScore == winner) {\n        playSiren();\n      } else {\n        playSound(currentScore);\n      }\n      //console.log(`addScore => dominoKey: ${dominoKey} treeTotal: ${treeTotal} scoreTotalState: ${scoreTotalState}  score: ${score}  newScore: ${newScore} getScore(): ${getScore()} getDominoTotal(): ${playerScore}`);\n      console.log(`addScore => treeTotal: ${treeTotal} scoreTotalState: ${scoreTotalState}  score: ${score}  newScore: ${newScore} getScore(): ${getScore()} getDominoTotal(): ${playerScore}`);\n      updateDominos();\n    }\n  };\n  const subtractScore = () => {\n    console.log('subtractScore score: ', score);\n    let newScore = Number(score) - 5;\n    newScore = newScore < 0 ? 0 : newScore;\n    const players = JSON.parse(localStorage.getItem('players'));\n    players[playerIndex].dominoScore = newScore;\n    localStorage.setItem('players', JSON.stringify(players));\n\n    //localStorage.setItem(dominoKey, newScore);\n    updateDominos();\n  };\n  const editNav = () => {\n    if (edit) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"subIndex t-0 relative flexContainer color-yellow p-1 bg-dkGreen r-5 bold\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex3Column\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex3Column\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button color-green description r-5 p-5 m-5 bg-yellow\",\n            onClick: () => editPlayer(playerIndex),\n            children: \"EDIT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button color-red description r-5 p-5 m-5 bg-yellow\",\n            onClick: () => deletePlayer(playerIndex),\n            children: \"DELETE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex3Column\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 20\n      }, this);\n    }\n  };\n  const stockClasses = 'r-10 m-1 color-yellow bold bg-darker';\n  const buttonClass = 'bg-darker';\n  const getButtonClass = 'button flex3Column p-10 r-10 ' + buttonClass;\n  // eslint-disable-next-line\n  const dominoClass = () => score >= winner ? 'color-neogreen shakingShaka' : 'white';\n  // eslint-disable-next-line\n  const scoreButtonClasses = 'glassy flex3Column button bg-green m-10 r-10 color-neogreen navBranding centeredContent';\n  const scoreButton = quadrant => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: stockClasses,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: getButtonClass,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-5 r-5 navBranding\",\n            children: getDominoScore(quadrant)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 16\n    }, this);\n  };\n  const quadrantClasses = (quadrant, treeTotal) => {\n    const playerScore = getScore();\n    const startScore = treeTotal - 50;\n    const verticalLineScore = startScore + 5;\n    const horizontalLineScore = startScore + 10;\n    const showVerticalLine = playerScore >= verticalLineScore ? true : false;\n    const showHorizontalLine = playerScore >= horizontalLineScore ? true : false;\n    console.log(`quadrantClasses => treeTotal: ${treeTotal} scoreIndex: ${scoreIndex} score: ${getScore()} playerScore: ${playerScore}`);\n    if (quadrant === 1) {\n      return showVerticalLine ? showHorizontalLine ? \"quadrant on5Right onBottom10\" : \"quadrant on5Right\" : \"quadrant\";\n    } else if (quadrant === 2) {\n      return showVerticalLine ? showHorizontalLine ? \"quadrant on5Left onBottom10\" : \"quadrant on5Left\" : \"quadrant\";\n    } else if (quadrant === 3) {\n      return showVerticalLine ? showHorizontalLine ? \"quadrant on5Right onTop10\" : \"quadrant on5Right\" : \"quadrant\";\n    } else if (quadrant === 4) {\n      return showVerticalLine ? showHorizontalLine ? \"quadrant on5Left onTop10\" : \"quadrant on5Left\" : \"quadrant\";\n    }\n  };\n  const editNavigation = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"myButton p-22 size25\",\n        onClick: subtractScore,\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"myButton p-22 size25\",\n        onClick: addScore,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 16\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"yellow\",\n      children: treeTotal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: stockClasses,\n      onTouchStart: handleTouchStart,\n      onTouchEnd: handleTouchEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"container\",\n        onClick: () => addScore(),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"top-left\",\n          className: quadrantClasses(1, treeTotal),\n          children: scoreButton(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"top-right\",\n          className: quadrantClasses(2, treeTotal),\n          children: scoreButton(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"bottom-left\",\n          className: quadrantClasses(3, treeTotal),\n          children: scoreButton(3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"bottom-right\",\n          className: quadrantClasses(4, treeTotal),\n          children: scoreButton(4)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this), editNav(), showButtons && editNavigation()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 9\n  }, this);\n};\n_s(Dominos, \"MnfzbX0tHomoN0auERnWJ+G4q9Q=\");\n_c = Dominos;\nexport default Dominos;\nvar _c;\n$RefreshReg$(_c, \"Dominos\");","map":{"version":3,"names":["React","useState","useEffect","LongPressButton","jsxDEV","_jsxDEV","Dominos","_ref","_s","player","playerIndex","scoreIndex","scoreTotal","treeTotal","editPlayer","deletePlayer","getDominoTotal","updateTwoPlayerScores","winner","indexArray","getScore","localPlayers","JSON","parse","localStorage","getItem","localPlayer","Number","dominoScore","score","setScore","scoreTotalState","setScoreTotal","edit","setEdit","timer","setTimer","showButtons","setShowButtons","handleTouchStart","console","log","setTimeout","handleTouchEnd","clearTimeout","quadrantScore","quadrant","playerScore","scoreStart","name","getDominoScore","className","children","fileName","_jsxFileName","lineNumber","columnNumber","updateScore","newScore","setItem","updateDominos","audioContext","AudioContext","oscillator","playSound","createOscillator","connect","destination","treeScores","treeTotals","treeClosed","includes","isTree","isTree1","isTree2","isTree3","isTree4","isTreeComplete","getType","type","note","frequency","setValueAtTime","currentTime","start","soundLength","stop","oscillator1","playSiren","highPitch","getHighPitch","oscillator2","gainNode1","createGain","gainNode2","sirenInterval","setInterval","clearInterval","addScore","players","stringify","currentScore","subtractScore","editNav","onClick","stockClasses","buttonClass","getButtonClass","dominoClass","scoreButtonClasses","scoreButton","quadrantClasses","startScore","verticalLineScore","horizontalLineScore","showVerticalLine","showHorizontalLine","editNavigation","onTouchStart","onTouchEnd","id","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Dominos.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport LongPressButton from './LongPressButton.js';\n\nconst Dominos = ({ player, playerIndex, scoreIndex, scoreTotal, treeTotal, editPlayer, deletePlayer, getDominoTotal, updateTwoPlayerScores, winner }) => {\n\n    //const dominoKey = `${(player.player||player.name)}Domino${scoreIndex}`;\n    const indexArray = [0, 1, 2, 3];\n    const getScore = () => {\n        //let newScore = 0;\n        //indexArray.map(scoreBox => {\n        //const dominoKey = `${(player.player||player.name)}Domino${scoreBox}`;\n        //console.log(`getScore => dominoKey: ${dominoKey}`)\n        //console.log(`getScore => newScore: ${Number(localStorage.getItem(dominoKey) || 0)}`)\n        //newScore = newScore + Number(localStorage.getItem(dominoKey) || 0);\n        //});\n        //return newScore;\n        const localPlayers = JSON.parse(localStorage.getItem('players'));\n        const localPlayer = localPlayers[playerIndex]\n        return Number(localPlayer.dominoScore);\n    }\n\n    const [score, setScore] = useState(getScore());\n    const [scoreTotalState, setScoreTotal] = useState(scoreTotal);\n    // eslint-disable-next-line\n    const [edit, setEdit] = useState(false);\n    const [timer, setTimer] = useState(null);\n    const [showButtons, setShowButtons] = useState(false);\n\n    const handleTouchStart = () => {\n        console.log(`handleTouchStart`)\n        setTimer(setTimeout(() => setShowButtons(true), 1000));\n    };\n\n    const handleTouchEnd = () => {\n        clearTimeout(timer);\n        //setShowButtons(false);\n    };\n\n    const quadrantScore = (quadrant) => {\n\n        //const playerScore = Number(localStorage.getItem(dominoKey));\n        //const playerScore = scoreTotalState;\n        const playerScore = getScore();\n        const scoreStart = treeTotal - (quadrant * 10);\n        //console.log(`player: ${player.name} dominoKey: ${dominoKey} playerScore: ${playerScore} \\nscoreTotalState: ${scoreTotalState} \\ntreeTotal: ${treeTotal} \\nscoreStart: ${scoreStart} \\nquadrant: ${quadrant}`)\n        console.log(`player: ${player.name} playerScore: ${playerScore} \\nscoreTotalState: ${scoreTotalState} \\ntreeTotal: ${treeTotal} \\nscoreStart: ${scoreStart} \\nquadrant: ${quadrant}`)\n        //const scoreEnd = scoreStart+((quadrant-1)*10);\n        if (playerScore > scoreStart && playerScore < scoreStart + 10) {\n            return \"/\";\n        } else if (playerScore <= scoreStart) {\n            return \"\";\n        } else {\n            return \"X\";\n        }\n\n        //let quadrantScore = ['-','/', 'X'];\n        //return score;\n    }\n    const getDominoScore = (quadrant) => <div className='white'>{quadrantScore(quadrant)}</div>;\n    // eslint-disable-next-line\n    const updateScore = (newScore) => {\n        localStorage.setItem((player.player || player.name), newScore);\n        //setScore(Number(localStorage.getItem(player)));\n    }\n    const updateDominos = () => {\n        console.log(`updateDominos() => getScore(): ${getScore()} player: ${player.name} playerIndex: ${playerIndex} scoreIndex: ${scoreIndex}`);\n        updateTwoPlayerScores(player, playerIndex, getScore());\n    }\n\n    var audioContext = new AudioContext(),\n    oscillator;\n\n    const playSound = (score) => {\n\n        // Create an oscillator node\n        oscillator = audioContext.createOscillator();\n\n        // Connect the oscillator to the audio context's destination (your speakers)\n        oscillator.connect(audioContext.destination);\n\n        const treeScores = [5, 10, 55, 60, 105, 110, 155, 160];\n        const treeTotals = [50, 100, 150, 200];\n        const treeClosed = () => treeTotals.includes(score);\n        const isTree = () => treeScores.includes(score);\n        const isTree1 = () => (score > 0 && score < 55);\n        const isTree2 = () => (score > 50 && score < 105);\n        const isTree3 = () => (score > 100 && score < 155);\n        const isTree4 = () => (score > 150);\n        const isTreeComplete = () => (score > 150);\n        // Set the oscillator type to 'sine' (you can experiment with other types like 'square', 'sawtooth', 'triangle')\n\n        const getType = () => (score === winner || treeClosed()) ? 'sawtooth' : 'triagle';\n        oscillator.type = getType();\n\n        //const note = (treeClosed()) ? 1000 : (440 + (score * 2));\n        const note = (treeClosed()) ? 1000 : 440;\n        // Set the frequency (Hz) - in this case, 440 Hz is an 'A' note\n        oscillator.frequency.setValueAtTime(note, audioContext.currentTime);\n\n        // Start the oscillator\n        oscillator.start();\n\n        const soundLength = (score == winner) ? 1 : 0.05;\n        // Stop the oscillator after 0.5 seconds (you can adjust this time)\n        oscillator.stop(audioContext.currentTime + soundLength);\n    }\n\n    var audioContext = new AudioContext(),\n    oscillator1;\n\n    const playSiren = () => {\n\n        let highPitch = false;\n\n        const getHighPitch = () => {\n            highPitch = !highPitch;\n            return highPitch;\n        }\n\n        //const AudioContext = window.AudioContext || window.webkitAudioContext;\n        //const audioContext = new AudioContext();\n\n        oscillator1 = audioContext.createOscillator();\n        oscillator1.type = 'sine'; // First oscillator is a sine wave\n        oscillator1.frequency.setValueAtTime(400, audioContext.currentTime);\n\n        const oscillator2 = audioContext.createOscillator();\n        oscillator2.type = 'sine'; // Second oscillator is a square wave\n        oscillator2.frequency.setValueAtTime(400, audioContext.currentTime);\n\n        // Gain nodes to control volume\n        const gainNode1 = audioContext.createGain();\n        const gainNode2 = audioContext.createGain();\n\n        oscillator1.connect(gainNode1);\n        oscillator2.connect(gainNode2);\n\n        gainNode1.connect(audioContext.destination);\n        gainNode2.connect(audioContext.destination);\n\n        oscillator1.start();\n        oscillator2.start();\n\n        const sirenInterval = setInterval(() => {\n            const frequency = (getHighPitch()) ? 1200 : 400; // Random frequency between 400 and 1200 Hz\n            oscillator1.frequency.setValueAtTime(frequency, audioContext.currentTime);\n            oscillator2.frequency.setValueAtTime(frequency, audioContext.currentTime);\n        }, 100); // Change frequency every 10th of a second\n\n        // Stop the siren after 10 seconds\n        setTimeout(() => {\n            clearInterval(sirenInterval);\n            oscillator1.stop();\n            oscillator2.stop();\n        }, 2000);\n\n    }\n\n    const addScore = () => {\n\n        //const playerScore = Number(localStorage.getItem(dominoKey));\n        //const playerScore = Number(localStorage.getItem('twoPlayerScores').split(',')[playerIndex]) || 0;\n        const localPlayers = JSON.parse(localStorage.getItem('players'));\n        const localPlayer = localPlayers[playerIndex];\n        //const playerScore = Number(localStorage.getItem('players').split(',')[playerIndex]) || 0;\n        const playerScore = Number(localPlayer.dominoScore) || 0;\n\n        //console.log(`addScore => dominoKey: ${dominoKey} treeTotal: ${treeTotal} scoreTotalState: ${scoreTotalState}  score: ${score} getScore(): ${getScore()} getDominoTotal(): ${playerScore}`);\n        console.log(`addScore => treeTotal: ${treeTotal} scoreTotalState: ${scoreTotalState}  score: ${score} getScore(): ${getScore()} getDominoTotal(): ${playerScore}`);\n\n        if (score < Number(treeTotal) && score > Number(treeTotal - 51)) {\n            let newScore = playerScore + 5;\n            const players = JSON.parse(localStorage.getItem('players'));\n            players[playerIndex].dominoScore = newScore;\n            localStorage.setItem('players', JSON.stringify(players));\n            //localStorage.setItem(dominoKey, newScore);\n            const currentScore = getScore();\n            setScore(currentScore);\n            if (currentScore == winner) {\n                playSiren();\n            } else {\n                playSound(currentScore);\n            }\n            //console.log(`addScore => dominoKey: ${dominoKey} treeTotal: ${treeTotal} scoreTotalState: ${scoreTotalState}  score: ${score}  newScore: ${newScore} getScore(): ${getScore()} getDominoTotal(): ${playerScore}`);\n            console.log(`addScore => treeTotal: ${treeTotal} scoreTotalState: ${scoreTotalState}  score: ${score}  newScore: ${newScore} getScore(): ${getScore()} getDominoTotal(): ${playerScore}`);\n            updateDominos();\n        }\n    }\n\n    const subtractScore = () => {\n        console.log('subtractScore score: ', score)\n        let newScore = Number(score) - 5;\n        newScore = (newScore < 0) ? 0 : newScore;\n        const players = JSON.parse(localStorage.getItem('players'));\n        players[playerIndex].dominoScore = newScore;\n        localStorage.setItem('players', JSON.stringify(players));\n\n        //localStorage.setItem(dominoKey, newScore);\n        updateDominos();\n    }\n\n    const editNav = () => {\n        if (edit) {\n            return <div className='subIndex t-0 relative flexContainer color-yellow p-1 bg-dkGreen r-5 bold'>\n                <div className=\"flex3Column\"></div>\n                <div className=\"flex3Column\">\n                    <div className='button color-green description r-5 p-5 m-5 bg-yellow' onClick={() => editPlayer(playerIndex)}>EDIT</div>\n                    <div className='button color-red description r-5 p-5 m-5 bg-yellow' onClick={() => deletePlayer(playerIndex)}>DELETE</div>\n                </div>\n                <div className=\"flex3Column\"></div>\n            </div>\n        }\n    }\n    const stockClasses = 'r-10 m-1 color-yellow bold bg-darker';\n    const buttonClass = 'bg-darker';\n    const getButtonClass = 'button flex3Column p-10 r-10 ' + buttonClass;\n    // eslint-disable-next-line\n    const dominoClass = () => (score >= winner) ? 'color-neogreen shakingShaka' : 'white';\n    // eslint-disable-next-line\n    const scoreButtonClasses = 'glassy flex3Column button bg-green m-10 r-10 color-neogreen navBranding centeredContent';\n    const scoreButton = (quadrant) => {\n        return <div className={stockClasses}>\n            <div className='flexContainer'>\n                <span className={getButtonClass}>\n                    <div className='p-5 r-5 navBranding'>\n                        {getDominoScore(quadrant)}\n                    </div>\n                </span>\n            </div>\n        </div>\n    }\n    const quadrantClasses = (quadrant, treeTotal) => {\n\n        const playerScore = getScore();\n        const startScore = treeTotal - 50;\n        const verticalLineScore = startScore + 5;\n        const horizontalLineScore = startScore + 10;\n        const showVerticalLine = (playerScore >= verticalLineScore) ? true : false;\n        const showHorizontalLine = (playerScore >= horizontalLineScore) ? true : false;\n\n        console.log(`quadrantClasses => treeTotal: ${treeTotal} scoreIndex: ${scoreIndex} score: ${getScore()} playerScore: ${playerScore}`)\n        if (quadrant === 1) {\n            return (showVerticalLine) ? ((showHorizontalLine) ? \"quadrant on5Right onBottom10\" : \"quadrant on5Right\") : \"quadrant\";\n        } else if (quadrant === 2) {\n            return (showVerticalLine) ? ((showHorizontalLine) ? \"quadrant on5Left onBottom10\" : \"quadrant on5Left\") : \"quadrant\";\n        } else if (quadrant === 3) {\n            return (showVerticalLine) ? ((showHorizontalLine) ? \"quadrant on5Right onTop10\" : \"quadrant on5Right\") : \"quadrant\";\n        } else if (quadrant === 4) {\n            return (showVerticalLine) ? ((showHorizontalLine) ? \"quadrant on5Left onTop10\" : \"quadrant on5Left\") : \"quadrant\";\n        }\n    }\n    const editNavigation = () => {\n        return <div>\n            <button className='myButton p-22 size25' onClick={subtractScore}>-</button>\n            <button className='myButton p-22 size25' onClick={addScore}>+</button>\n        </div>\n    }\n    return (\n        <div>\n            <div className='yellow'>{treeTotal}</div>\n            <div className={stockClasses} onTouchStart={handleTouchStart} onTouchEnd={handleTouchEnd}>\n                <div id=\"container\" onClick={() => addScore()}>\n                    <div id=\"top-left\" className={quadrantClasses(1, treeTotal)}>{scoreButton(1)}</div>\n                    <div id=\"top-right\" className={quadrantClasses(2, treeTotal)}>{scoreButton(2)}</div>\n                    <div id=\"bottom-left\" className={quadrantClasses(3, treeTotal)}>{scoreButton(3)}</div>\n                    <div id=\"bottom-right\" className={quadrantClasses(4, treeTotal)}>{scoreButton(4)}</div>\n                </div>\n            </div>\n            {editNav()}\n            {showButtons && (\n                editNavigation()\n            )}\n        </div>\n\n    )\n\n}\n\nexport default Dominos;"],"mappings":"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"},"metadata":{},"sourceType":"module"}