{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/weather/CitySelector.js\";\nimport React, { useState } from 'react';\nimport { openweatherAPI_KEY, openweatherAPI_BASE_URL } from '../../apis/config';\n\nconst CitySelector = () => {\n  //api.openweathermap.org/data/2.5/forecast?q=London,us&appid={APIKEY}\n  //Metric\n  //api.openweathermap.org/data/2.5/forecast?q=London,us&appid={APIKEY}&units=metric\n  //Image Source\n  //http://openweathermap.org/img/wn/10d@2x.png\n  const key = openweatherAPI_KEY;\n  const baseUrl = openweatherAPI_BASE_URL;\n  const [city, setCity] = useState('London');\n  const [results, setResults] = useState('');\n  const urlEnd = `/data/2.5/forecast?q=${city},us&appid=`;\n\n  const displayResults = results => {\n    const list = results.list.map(item => {\n      const main = item.main;\n      const temp = main.temp;\n      const feels_like = main.feels_like;\n      const temp_min = main.feels_like;\n      const temp_max = main.feels_like;\n      const humidity = main.humidity;\n      const weather = item.weather[0];\n      const mainDescription = weather.main;\n      const description = weather.description;\n      const icon = weather.icon;\n      const wind = item.wind;\n      const windSpeed = wind.speed;\n      const windDirection = wind.deg;\n      const visibility = item.visibility;\n      const time = item.dt_txt;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"width100Percant p-20 m-20 r-10 bg-dkGreen color-yellow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"color-yellow bold bg-green greet r-10 p-20 m-20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }\n      }, time), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }\n      }, mainDescription)), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }\n      }, description), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }\n      }, \"temp: \", temp, \"\\xB0\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }\n      }, \"feels like: \", feels_like, \"\\xB0 \"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }\n      }, \"humidity: \", humidity, \"\\xB0 \"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }\n      }, \"wind: \", windSpeed, \"mph\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }\n      }, \"wind direction: \", windDirection), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }\n      }, \"visibility: \", visibility));\n    });\n    console.log(`display: ${JSON.stringify(results, null, 2)}`);\n    const display = list;\n    console.log(`display: ${display}`);\n    setResults(display);\n  };\n\n  const onSearch = () => {\n    fetch(`${baseUrl}${urlEnd}${key}`).then(response => response.json()) //        .then((result) => console.log(`${JSON.stringify(result,null, 2)}`))\n    .then(results => displayResults(results));\n  };\n\n  const onKeyDown = event => {\n    if (event.keyCode === 13) {\n      onSearch();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"navBranding color-yellow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \"Search your city\"), /*#__PURE__*/React.createElement(\"input\", {\n    onKeyDown: onKeyDown,\n    value: city,\n    placeholder: \"Enter city\",\n    onChange: event => setCity(event.target.value),\n    className: \"greet p-20 r-10 w-200 brdr-green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onSearch,\n    className: \"ml-5 greet p-20 r-10 w-200 bg-green brdr-green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Check Weather\"), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"navBranding color-yellow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \"Results:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"color-neogreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, results));\n};\n\nexport default CitySelector;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/weather/CitySelector.js"],"names":["React","useState","openweatherAPI_KEY","openweatherAPI_BASE_URL","CitySelector","key","baseUrl","city","setCity","results","setResults","urlEnd","displayResults","list","map","item","main","temp","feels_like","temp_min","temp_max","humidity","weather","mainDescription","description","icon","wind","windSpeed","speed","windDirection","deg","visibility","time","dt_txt","console","log","JSON","stringify","display","onSearch","fetch","then","response","json","onKeyDown","event","keyCode","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { openweatherAPI_KEY, openweatherAPI_BASE_URL } from '../../apis/config';\n\n\nconst CitySelector = () => {\n    //api.openweathermap.org/data/2.5/forecast?q=London,us&appid={APIKEY}\n    //Metric\n    //api.openweathermap.org/data/2.5/forecast?q=London,us&appid={APIKEY}&units=metric\n    //Image Source\n    //http://openweathermap.org/img/wn/10d@2x.png\n    const key = openweatherAPI_KEY;\n    const baseUrl = openweatherAPI_BASE_URL;\n\n    const [city, setCity] = useState('London');\n    const [results, setResults] = useState('');\n    const urlEnd = `/data/2.5/forecast?q=${city},us&appid=`;\n\n    const displayResults = (results) => {\n        const list = results.list.map((item) => {\n            const main = item.main;\n            const temp = main.temp;\n            const feels_like = main.feels_like;\n            const temp_min = main.feels_like;\n            const temp_max = main.feels_like;\n            const humidity = main.humidity;\n            const weather = item.weather[0];\n            const mainDescription = weather.main;\n            const description = weather.description;\n            const icon = weather.icon;\n            const wind = item.wind;\n            const windSpeed = wind.speed;\n            const windDirection = wind.deg;\n            const visibility = item.visibility;\n            const time = item.dt_txt\n            return (\n                <div className='width100Percant p-20 m-20 r-10 bg-dkGreen color-yellow'>\n                    <div>\n                        <div className='color-yellow bold bg-green greet r-10 p-20 m-20'>{time}</div>\n                        <div>{mainDescription}</div>\n                    </div>\n                    <div>{description}</div> \n                    <div>temp: {temp}°</div> \n                    <div>feels like: {feels_like}° </div>\n                    <div>humidity: {humidity}° </div>\n                    <div>wind: {windSpeed}mph</div> \n                    <div>wind direction: {windDirection}</div>\n                    <div>visibility: {visibility}</div>\n                </div>\n            )\n        })\n        console.log(`display: ${JSON.stringify(results, null, 2)}`)\n        const display = list;\n        console.log(`display: ${display}`)\n        setResults(display)\n    }\n\n    const onSearch = () => {\n        fetch(`${baseUrl}${urlEnd}${key}`)\n        .then((response) => response.json())\n//        .then((result) => console.log(`${JSON.stringify(result,null, 2)}`))\n        .then((results) => displayResults(results));\n    };\n    const onKeyDown = (event) => {\n        if (event.keyCode === 13) {\n            onSearch();\n        }\n    };\n    return (\n        <div>\n            <h1 className='navBranding color-yellow'>Search your city</h1>\n            <input onKeyDown={onKeyDown} value={city} placeholder=\"Enter city\"\n                    onChange={(event) => setCity(event.target.value)} className=\"greet p-20 r-10 w-200 brdr-green\"/>\n            <button onClick={onSearch} className=\"ml-5 greet p-20 r-10 w-200 bg-green brdr-green\">\n                Check Weather\n            </button>\n            <h1 className='navBranding color-yellow'>Results:</h1>\n            <div className='color-neogreen'>{results}</div>\n        </div>\n    );\n};\n\nexport default CitySelector;"]},"metadata":{},"sourceType":"module"}