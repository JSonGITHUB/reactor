{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/SurfScoringLogic.js\";\nimport React, { useState, useEffect } from 'react';\nimport surfScoring from './SurfScoring.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SurfScoringLogic = (index, completed, players, setPlayers) => {\n  const getSurfTotal = player => {\n    let total = 0;\n    const score = index => player.surfScores[index];\n    const addToTotal = value => total = total + value;\n    surfScoring.map((target, index) => {\n      addToTotal(Number(score(index)));\n    });\n    return total;\n  };\n  const getSurferIndexWithPriority = (players, priorityIndex) => {\n    for (let i = 0; i < players.length; i++) {\n      if (Number(players[i].surfPriority) === priorityIndex) {\n        return i;\n      }\n    }\n    return null;\n  };\n  const losePriority = (players, selectedPriority) => {\n    const newPlayers = [...players];\n    newPlayers.map((player, index) => {\n      if (player.surfPriority == selectedPriority) {\n        player.surfPriority = newPlayers.length;\n      } else if (player.surfPriority != 1 && selectedPriority != newPlayers.length) {\n        const shift = player.surfPriority - 1;\n        player.surfPriority = shift > 0 ? shift : newPlayers.length;\n      }\n    });\n    localStorage.setItem('players', JSON.stringify(newPlayers, null, 2));\n    setPlayers(newPlayers);\n  };\n  const shiftPriority = priorityIndex => {\n    const newPlayers = [...players];\n    newPlayers.map((player, index) => {\n      if (player.surfPriority === priorityIndex - 1) {\n        player.surfPriority = priorityIndex;\n      } else if (player.surfPriority === priorityIndex) {\n        player.surfPriority = priorityIndex - 1;\n      }\n    });\n    localStorage.setItem('players', JSON.stringify(newPlayers, null, 2));\n    setPlayers(newPlayers);\n  };\n  const resetSurfersScores = playerId => {\n    const newPlayers = [...players];\n    newPlayers[playerId].surfScore = 0;\n    newPlayers[playerId].surfScores = surfScoring;\n    setPlayers(newPlayers);\n    getScore();\n  };\n  const selectJersey = (playerId, selection) => {\n    const newPlayers = [...players];\n    newPlayers[playerId].surfJerseyColor = selection;\n    localStorage.setItem('players', JSON.stringify(newPlayers));\n    setPlayers(newPlayers);\n  };\n  const getJerseyColorSelector = (playerId, color, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `bg-${color} ht-45 width50px button r-10`,\n    onClick: () => selectJersey(playerId, index)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 64\n  }, this);\n  const editSurfer = playerId => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"m-10 p-10 r-10 bg-darker\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"size30 p-10\",\n      children: \"Name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10`,\n      onClick: () => editPlayer(playerId),\n      children: players[playerId].name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"size30 p-10\",\n      children: \"Jersey color:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: jerseyColors.map((color, index) => index === Math.ceil(jerseyColors.length / 2) ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this), getJerseyColorSelector(playerId, color, index)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this) : getJerseyColorSelector(playerId, color, index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5\",\n        onClick: () => resetSurfersScores(playerId),\n        children: \"Reset Scores\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5\",\n        onClick: () => deleteAthlete(playerId),\n        children: \"Delete Athlete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 38\n  }, this);\n  const scoreTotal = (index, playersArray) => Number(highestScore(index, playersArray) + secondHighestScore(index, playersArray)).toFixed(2);\n  const isTieScore = index => {\n    const score = scoreTotal(index, players);\n    if (index !== 0) {\n      if (score === scoreTotal(index - 1, players)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  const place = index => isTieScore(index) && index !== 0 ? index : index + 1;\n  const placeSuffix = index => rank[isTieScore(index) && index !== 0 ? index - 1 : index > 2 ? 3 : index];\n  const position = index => `${place} ${placeSuffix}`;\n  const rank = ['st', 'nd', 'rd', 'th'];\n  const getTwoHighestScores = index => {\n    const player = players[index];\n    const scores = player.surfScores;\n    const [highestIndex, secondHighestIndex] = findTwoHighestIndices(scores);\n    //console.log(`getTwoHighestScores => playerIndex: ${index} player: ${JSON.stringify(player,null,2)} name: ${(player.player || player.name)}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n    return {\n      highScoreIndex: highestIndex,\n      secondHighScoreIndex: secondHighestIndex\n    };\n  };\n  const highestScore = (index, playersArray) => {\n    return playersArray[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n  };\n  const secondHighestScore = (index, playersArray) => playersArray[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n  const getScoreTotal = index => {\n    const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n    const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n    const score = highestScore + secondHighestScore;\n    return score;\n  };\n  const rankStatus = () => {\n    const score = getSurfTotal(players[index]);\n    const scoreDifference = Number(players[index === 0 ? 0 : index - 1].surfScore - players[index === 0 ? 1 : index].surfScore);\n    const difference = scoreDifference < 0 ? -1 * scoreDifference : scoreDifference;\n    const winningScore = Number(players[index === 0 ? 0 : index < 3 ? index - 1 : 1].surfScore);\n    const highestScoresIndices = findTwoHighestIndices(players[index].surfScores);\n    const losersHeighestScore = players[index].surfScores[highestScoresIndices[0]];\n    const need = winningScore - losersHeighestScore + .01;\n    const winsBy = `${completed ? 'Won' : 'Wins'} by ${difference.toFixed(2)}`;\n    const needs = `${completed ? 'Needed' : 'Needs'} ${need.toFixed(2)}`;\n    if (index === 0) {\n      return winsBy;\n    }\n    return needs;\n  };\n  return rankStatus;\n};\n_c = SurfScoringLogic;\nexport default SurfScoringLogic;\nvar _c;\n$RefreshReg$(_c, \"SurfScoringLogic\");","map":{"version":3,"names":["React","useState","useEffect","surfScoring","jsxDEV","_jsxDEV","SurfScoringLogic","index","completed","players","setPlayers","getSurfTotal","player","total","score","surfScores","addToTotal","value","map","target","Number","getSurferIndexWithPriority","priorityIndex","i","length","surfPriority","losePriority","selectedPriority","newPlayers","shift","localStorage","setItem","JSON","stringify","shiftPriority","resetSurfersScores","playerId","surfScore","getScore","selectJersey","selection","surfJerseyColor","getJerseyColorSelector","color","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","editSurfer","children","editPlayer","name","jerseyColors","Math","ceil","Fragment","deleteAthlete","scoreTotal","playersArray","highestScore","secondHighestScore","toFixed","isTieScore","place","placeSuffix","rank","position","getTwoHighestScores","scores","highestIndex","secondHighestIndex","findTwoHighestIndices","highScoreIndex","secondHighScoreIndex","getScoreTotal","rankStatus","scoreDifference","difference","winningScore","highestScoresIndices","losersHeighestScore","need","winsBy","needs","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/SurfScoringLogic.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport surfScoring from './SurfScoring.js'\n\nconst SurfScoringLogic = (index, completed, players, setPlayers) => {\n\n    const getSurfTotal = (player) => {\n        let total = 0;\n        const score = (index) => player.surfScores[index];\n        const addToTotal = (value) => total = total + value;\n        surfScoring.map((target, index) => {\n                addToTotal(Number(score(index)))\n            }\n        );\n        return total;\n    }\n    const getSurferIndexWithPriority = (players, priorityIndex) => {\n        for (let i = 0; i < players.length; i++) {\n            if (Number(players[i].surfPriority) === priorityIndex) {\n                return i;\n            }\n        }\n        return null;\n    }\n    const losePriority = (players, selectedPriority) => {\n        const newPlayers = [...players];\n        newPlayers.map((player, index) => {\n            if (player.surfPriority == selectedPriority) {\n                player.surfPriority = newPlayers.length;\n            } else if (player.surfPriority != 1 && selectedPriority != newPlayers.length) {\n                const shift = player.surfPriority - 1;\n                player.surfPriority = (shift > 0) ? shift : newPlayers.length;\n            }\n        });\n        localStorage.setItem('players', JSON.stringify(newPlayers, null, 2));\n        setPlayers(newPlayers);\n    }\n    const shiftPriority = (priorityIndex) => {\n        const newPlayers = [...players];\n        newPlayers.map((player, index) => {\n            if (player.surfPriority === (priorityIndex - 1)) {\n                player.surfPriority = priorityIndex;\n            } else if (player.surfPriority === priorityIndex) {\n                player.surfPriority = (priorityIndex - 1);\n            }\n        });\n        localStorage.setItem('players', JSON.stringify(newPlayers, null, 2));\n        setPlayers(newPlayers);\n    }\n    const resetSurfersScores = (playerId) => {\n        const newPlayers = [...players];\n        newPlayers[playerId].surfScore = 0;\n        newPlayers[playerId].surfScores = surfScoring;\n        setPlayers(newPlayers);\n        getScore();\n    }\n    const selectJersey = (playerId, selection) => {\n        const newPlayers = [...players];\n        newPlayers[playerId].surfJerseyColor = (selection);\n        localStorage.setItem('players', JSON.stringify(newPlayers));\n        setPlayers(newPlayers);\n    }\n    const getJerseyColorSelector = (playerId, color, index) => <button className={`bg-${color} ht-45 width50px button r-10`} onClick={() => selectJersey(playerId, index)}></button>;\n    const editSurfer = (playerId) => <div className='m-10 p-10 r-10 bg-darker'>\n            <div className='size30 p-10'>Name:</div>\n            <button className={`bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10`} onClick={() => editPlayer(playerId)}>{players[playerId].name}</button>\n            <div className='size30 p-10'>Jersey color:</div>\n            <div>\n                {jerseyColors.map((color,index) => \n                    index === Math.ceil(jerseyColors.length / 2) ? (\n                        <React.Fragment key={index}>\n                            <br />\n                            {getJerseyColorSelector(playerId, color, index)}\n                        </React.Fragment>\n                    ) : (\n                        getJerseyColorSelector(playerId, color, index)\n                    )\n                )}\n            </div>\n            <div>\n                <button className='bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5' onClick={() => resetSurfersScores(playerId)}>\n                    Reset Scores\n                </button>\n                <button className='bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5' onClick={() => deleteAthlete(playerId)}>\n                    Delete Athlete\n                </button>\n            </div>\n        </div>\n    \n    const scoreTotal = (index, playersArray) => Number(highestScore(index, playersArray) + secondHighestScore(index, playersArray)).toFixed(2);\n    \n    const isTieScore = (index) => {\n        const score = scoreTotal(index, players);\n        if (index !== 0) {\n            if (score === scoreTotal(index - 1, players)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const place = (index) => (isTieScore(index) && (index !== 0)) ? index : (index + 1);\n    const placeSuffix = (index) => rank[(isTieScore(index) && (index !== 0)) ? (index-1) : (index > 2) ? 3 : (index)];\n    const position = (index) => `${place} ${placeSuffix}`;\n    const rank = ['st', 'nd', 'rd', 'th'];\n    const getTwoHighestScores = (index) => {\n        const player = players[index];\n        const scores = player.surfScores;\n        const [highestIndex, secondHighestIndex] = findTwoHighestIndices(scores);\n        //console.log(`getTwoHighestScores => playerIndex: ${index} player: ${JSON.stringify(player,null,2)} name: ${(player.player || player.name)}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n        return {\n            highScoreIndex: highestIndex,\n            secondHighScoreIndex: secondHighestIndex\n        };\n    };\n    const highestScore = (index, playersArray) => {\n        return playersArray[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n    }\n    const secondHighestScore = (index, playersArray) => playersArray[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n    \n    const getScoreTotal = (index) => {\n        const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex]\n        const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex]\n        const score = (highestScore + secondHighestScore);\n        return score;\n    }\n    const rankStatus = () => {\n        const score = getSurfTotal(players[index]);\n        const scoreDifference = Number(players[(index === 0) ? 0 : (index - 1)].surfScore - players[(index === 0) ? 1 : (index)].surfScore);\n        const difference = (scoreDifference < 0) ? (-1 * scoreDifference) : scoreDifference;\n        const winningScore = Number(players[(index === 0) ? 0 : ((index < 3) ? (index - 1) : 1)].surfScore);\n        const highestScoresIndices = findTwoHighestIndices(players[index].surfScores);\n        const losersHeighestScore = players[index].surfScores[highestScoresIndices[0]];\n        const need = (winningScore - losersHeighestScore) + .01;\n        const winsBy = `${(completed)?'Won':'Wins'} by ${difference.toFixed(2)}`;\n        const needs = `${(completed)?'Needed':'Needs'} ${need.toFixed(2)}`;\n        if (index === 0) {\n            return winsBy;\n        }\n        return needs;\n    }\n\n    return rankStatus;\n\n\n}\nexport default SurfScoringLogic;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,SAAS,EAAEC,OAAO,EAAEC,UAAU,KAAK;EAEhE,MAAMC,YAAY,GAAIC,MAAM,IAAK;IAC7B,IAAIC,KAAK,GAAG,CAAC;IACb,MAAMC,KAAK,GAAIP,KAAK,IAAKK,MAAM,CAACG,UAAU,CAACR,KAAK,CAAC;IACjD,MAAMS,UAAU,GAAIC,KAAK,IAAKJ,KAAK,GAAGA,KAAK,GAAGI,KAAK;IACnDd,WAAW,CAACe,GAAG,CAAC,CAACC,MAAM,EAAEZ,KAAK,KAAK;MAC3BS,UAAU,CAACI,MAAM,CAACN,KAAK,CAACP,KAAK,CAAC,CAAC,CAAC;IACpC,CACJ,CAAC;IACD,OAAOM,KAAK;EAChB,CAAC;EACD,MAAMQ,0BAA0B,GAAGA,CAACZ,OAAO,EAAEa,aAAa,KAAK;IAC3D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,OAAO,CAACe,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAIH,MAAM,CAACX,OAAO,CAACc,CAAC,CAAC,CAACE,YAAY,CAAC,KAAKH,aAAa,EAAE;QACnD,OAAOC,CAAC;MACZ;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACD,MAAMG,YAAY,GAAGA,CAACjB,OAAO,EAAEkB,gBAAgB,KAAK;IAChD,MAAMC,UAAU,GAAG,CAAC,GAAGnB,OAAO,CAAC;IAC/BmB,UAAU,CAACV,GAAG,CAAC,CAACN,MAAM,EAAEL,KAAK,KAAK;MAC9B,IAAIK,MAAM,CAACa,YAAY,IAAIE,gBAAgB,EAAE;QACzCf,MAAM,CAACa,YAAY,GAAGG,UAAU,CAACJ,MAAM;MAC3C,CAAC,MAAM,IAAIZ,MAAM,CAACa,YAAY,IAAI,CAAC,IAAIE,gBAAgB,IAAIC,UAAU,CAACJ,MAAM,EAAE;QAC1E,MAAMK,KAAK,GAAGjB,MAAM,CAACa,YAAY,GAAG,CAAC;QACrCb,MAAM,CAACa,YAAY,GAAII,KAAK,GAAG,CAAC,GAAIA,KAAK,GAAGD,UAAU,CAACJ,MAAM;MACjE;IACJ,CAAC,CAAC;IACFM,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACL,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACpElB,UAAU,CAACkB,UAAU,CAAC;EAC1B,CAAC;EACD,MAAMM,aAAa,GAAIZ,aAAa,IAAK;IACrC,MAAMM,UAAU,GAAG,CAAC,GAAGnB,OAAO,CAAC;IAC/BmB,UAAU,CAACV,GAAG,CAAC,CAACN,MAAM,EAAEL,KAAK,KAAK;MAC9B,IAAIK,MAAM,CAACa,YAAY,KAAMH,aAAa,GAAG,CAAE,EAAE;QAC7CV,MAAM,CAACa,YAAY,GAAGH,aAAa;MACvC,CAAC,MAAM,IAAIV,MAAM,CAACa,YAAY,KAAKH,aAAa,EAAE;QAC9CV,MAAM,CAACa,YAAY,GAAIH,aAAa,GAAG,CAAE;MAC7C;IACJ,CAAC,CAAC;IACFQ,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACL,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACpElB,UAAU,CAACkB,UAAU,CAAC;EAC1B,CAAC;EACD,MAAMO,kBAAkB,GAAIC,QAAQ,IAAK;IACrC,MAAMR,UAAU,GAAG,CAAC,GAAGnB,OAAO,CAAC;IAC/BmB,UAAU,CAACQ,QAAQ,CAAC,CAACC,SAAS,GAAG,CAAC;IAClCT,UAAU,CAACQ,QAAQ,CAAC,CAACrB,UAAU,GAAGZ,WAAW;IAC7CO,UAAU,CAACkB,UAAU,CAAC;IACtBU,QAAQ,CAAC,CAAC;EACd,CAAC;EACD,MAAMC,YAAY,GAAGA,CAACH,QAAQ,EAAEI,SAAS,KAAK;IAC1C,MAAMZ,UAAU,GAAG,CAAC,GAAGnB,OAAO,CAAC;IAC/BmB,UAAU,CAACQ,QAAQ,CAAC,CAACK,eAAe,GAAID,SAAU;IAClDV,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACL,UAAU,CAAC,CAAC;IAC3DlB,UAAU,CAACkB,UAAU,CAAC;EAC1B,CAAC;EACD,MAAMc,sBAAsB,GAAGA,CAACN,QAAQ,EAAEO,KAAK,EAAEpC,KAAK,kBAAKF,OAAA;IAAQuC,SAAS,EAAG,MAAKD,KAAM,8BAA8B;IAACE,OAAO,EAAEA,CAAA,KAAMN,YAAY,CAACH,QAAQ,EAAE7B,KAAK;EAAE;IAAAuC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;EAChL,MAAMC,UAAU,GAAId,QAAQ,iBAAK/B,OAAA;IAAKuC,SAAS,EAAC,0BAA0B;IAAAO,QAAA,gBAClE9C,OAAA;MAAKuC,SAAS,EAAC,aAAa;MAAAO,QAAA,EAAC;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxC5C,OAAA;MAAQuC,SAAS,EAAG,qEAAqE;MAACC,OAAO,EAAEA,CAAA,KAAMO,UAAU,CAAChB,QAAQ,CAAE;MAAAe,QAAA,EAAE1C,OAAO,CAAC2B,QAAQ,CAAC,CAACiB;IAAI;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eAChK5C,OAAA;MAAKuC,SAAS,EAAC,aAAa;MAAAO,QAAA,EAAC;IAAa;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChD5C,OAAA;MAAA8C,QAAA,EACKG,YAAY,CAACpC,GAAG,CAAC,CAACyB,KAAK,EAACpC,KAAK,KAC1BA,KAAK,KAAKgD,IAAI,CAACC,IAAI,CAACF,YAAY,CAAC9B,MAAM,GAAG,CAAC,CAAC,gBACxCnB,OAAA,CAACL,KAAK,CAACyD,QAAQ;QAAAN,QAAA,gBACX9C,OAAA;UAAAyC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACLP,sBAAsB,CAACN,QAAQ,EAAEO,KAAK,EAAEpC,KAAK,CAAC;MAAA,GAF9BA,KAAK;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CAAC,GAEjBP,sBAAsB,CAACN,QAAQ,EAAEO,KAAK,EAAEpC,KAAK,CAErD;IAAC;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACN5C,OAAA;MAAA8C,QAAA,gBACI9C,OAAA;QAAQuC,SAAS,EAAC,yEAAyE;QAACC,OAAO,EAAEA,CAAA,KAAMV,kBAAkB,CAACC,QAAQ,CAAE;QAAAe,QAAA,EAAC;MAEzI;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT5C,OAAA;QAAQuC,SAAS,EAAC,yEAAyE;QAACC,OAAO,EAAEA,CAAA,KAAMa,aAAa,CAACtB,QAAQ,CAAE;QAAAe,QAAA,EAAC;MAEpI;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;EAEV,MAAMU,UAAU,GAAGA,CAACpD,KAAK,EAAEqD,YAAY,KAAKxC,MAAM,CAACyC,YAAY,CAACtD,KAAK,EAAEqD,YAAY,CAAC,GAAGE,kBAAkB,CAACvD,KAAK,EAAEqD,YAAY,CAAC,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC;EAE1I,MAAMC,UAAU,GAAIzD,KAAK,IAAK;IAC1B,MAAMO,KAAK,GAAG6C,UAAU,CAACpD,KAAK,EAAEE,OAAO,CAAC;IACxC,IAAIF,KAAK,KAAK,CAAC,EAAE;MACb,IAAIO,KAAK,KAAK6C,UAAU,CAACpD,KAAK,GAAG,CAAC,EAAEE,OAAO,CAAC,EAAE;QAC1C,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB,CAAC;EACD,MAAMwD,KAAK,GAAI1D,KAAK,IAAMyD,UAAU,CAACzD,KAAK,CAAC,IAAKA,KAAK,KAAK,CAAE,GAAIA,KAAK,GAAIA,KAAK,GAAG,CAAE;EACnF,MAAM2D,WAAW,GAAI3D,KAAK,IAAK4D,IAAI,CAAEH,UAAU,CAACzD,KAAK,CAAC,IAAKA,KAAK,KAAK,CAAE,GAAKA,KAAK,GAAC,CAAC,GAAKA,KAAK,GAAG,CAAC,GAAI,CAAC,GAAIA,KAAM,CAAC;EACjH,MAAM6D,QAAQ,GAAI7D,KAAK,IAAM,GAAE0D,KAAM,IAAGC,WAAY,EAAC;EACrD,MAAMC,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACrC,MAAME,mBAAmB,GAAI9D,KAAK,IAAK;IACnC,MAAMK,MAAM,GAAGH,OAAO,CAACF,KAAK,CAAC;IAC7B,MAAM+D,MAAM,GAAG1D,MAAM,CAACG,UAAU;IAChC,MAAM,CAACwD,YAAY,EAAEC,kBAAkB,CAAC,GAAGC,qBAAqB,CAACH,MAAM,CAAC;IACxE;IACA,OAAO;MACHI,cAAc,EAAEH,YAAY;MAC5BI,oBAAoB,EAAEH;IAC1B,CAAC;EACL,CAAC;EACD,MAAMX,YAAY,GAAGA,CAACtD,KAAK,EAAEqD,YAAY,KAAK;IAC1C,OAAOA,YAAY,CAACrD,KAAK,CAAC,CAACQ,UAAU,CAACsD,mBAAmB,CAAC9D,KAAK,CAAC,CAACmE,cAAc,CAAC;EACpF,CAAC;EACD,MAAMZ,kBAAkB,GAAGA,CAACvD,KAAK,EAAEqD,YAAY,KAAKA,YAAY,CAACrD,KAAK,CAAC,CAACQ,UAAU,CAACsD,mBAAmB,CAAC9D,KAAK,CAAC,CAACoE,oBAAoB,CAAC;EAEnI,MAAMC,aAAa,GAAIrE,KAAK,IAAK;IAC7B,MAAMsD,YAAY,GAAGpD,OAAO,CAACF,KAAK,CAAC,CAACQ,UAAU,CAACsD,mBAAmB,CAAC9D,KAAK,CAAC,CAACmE,cAAc,CAAC;IACzF,MAAMZ,kBAAkB,GAAGrD,OAAO,CAACF,KAAK,CAAC,CAACQ,UAAU,CAACsD,mBAAmB,CAAC9D,KAAK,CAAC,CAACoE,oBAAoB,CAAC;IACrG,MAAM7D,KAAK,GAAI+C,YAAY,GAAGC,kBAAmB;IACjD,OAAOhD,KAAK;EAChB,CAAC;EACD,MAAM+D,UAAU,GAAGA,CAAA,KAAM;IACrB,MAAM/D,KAAK,GAAGH,YAAY,CAACF,OAAO,CAACF,KAAK,CAAC,CAAC;IAC1C,MAAMuE,eAAe,GAAG1D,MAAM,CAACX,OAAO,CAAEF,KAAK,KAAK,CAAC,GAAI,CAAC,GAAIA,KAAK,GAAG,CAAE,CAAC,CAAC8B,SAAS,GAAG5B,OAAO,CAAEF,KAAK,KAAK,CAAC,GAAI,CAAC,GAAIA,KAAM,CAAC,CAAC8B,SAAS,CAAC;IACnI,MAAM0C,UAAU,GAAID,eAAe,GAAG,CAAC,GAAK,CAAC,CAAC,GAAGA,eAAe,GAAIA,eAAe;IACnF,MAAME,YAAY,GAAG5D,MAAM,CAACX,OAAO,CAAEF,KAAK,KAAK,CAAC,GAAI,CAAC,GAAKA,KAAK,GAAG,CAAC,GAAKA,KAAK,GAAG,CAAC,GAAI,CAAE,CAAC,CAAC8B,SAAS,CAAC;IACnG,MAAM4C,oBAAoB,GAAGR,qBAAqB,CAAChE,OAAO,CAACF,KAAK,CAAC,CAACQ,UAAU,CAAC;IAC7E,MAAMmE,mBAAmB,GAAGzE,OAAO,CAACF,KAAK,CAAC,CAACQ,UAAU,CAACkE,oBAAoB,CAAC,CAAC,CAAC,CAAC;IAC9E,MAAME,IAAI,GAAIH,YAAY,GAAGE,mBAAmB,GAAI,GAAG;IACvD,MAAME,MAAM,GAAI,GAAG5E,SAAS,GAAE,KAAK,GAAC,MAAO,OAAMuE,UAAU,CAAChB,OAAO,CAAC,CAAC,CAAE,EAAC;IACxE,MAAMsB,KAAK,GAAI,GAAG7E,SAAS,GAAE,QAAQ,GAAC,OAAQ,IAAG2E,IAAI,CAACpB,OAAO,CAAC,CAAC,CAAE,EAAC;IAClE,IAAIxD,KAAK,KAAK,CAAC,EAAE;MACb,OAAO6E,MAAM;IACjB;IACA,OAAOC,KAAK;EAChB,CAAC;EAED,OAAOR,UAAU;AAGrB,CAAC;AAAAS,EAAA,GA5IKhF,gBAAgB;AA6ItB,eAAeA,gBAAgB;AAAC,IAAAgF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}