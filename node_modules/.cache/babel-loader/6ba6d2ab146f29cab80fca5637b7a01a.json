{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/AirTemp.js\";\nimport React, { useState, useEffect } from 'react';\nimport Loader from '../utils/Loader.js';\n\nconst AirTemp = ({\n  isMotionOn\n}) => {\n  const [temp, setTemp] = useState(null);\n\n  const getAirTempData = () => {\n    console.log(`getAir ->`);\n    let data;\n\n    const returnJSON = response => response.json();\n\n    const returnRejection = response => Promise.reject({\n      status: response.status,\n      data\n    });\n\n    const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n\n    let getCurrentTime = new Date();\n    const year = getCurrentTime.getFullYear();\n    const currentMonth = getCurrentTime.getMonth() + 1;\n    const month = currentMonth < 10 ? `0${currentMonth}` : currentMonth;\n    const currentDate = getCurrentTime.getDate();\n    const date = currentDate < 10 ? `0${currentDate}` : currentDate;\n    const currentHour = getCurrentTime.getHours();\n    const hours = currentHour < 10 ? `0${currentHour}` : currentHour;\n    const startHour = currentHour - 1 < 10 ? `0${currentHour - 1}` : currentHour - 1;\n    const currentMinutes = getCurrentTime.getMinutes();\n    const minutes = currentMinutes < 10 ? `0${currentMinutes}` : currentMinutes;\n    const getEndTime = `${year}${month}${date}%20${hours}:${minutes}`;\n    const getStartTime = `${year}${month}${date}%20${startHour}:00`;\n    getCurrentTime = `${year}${month}${date}%20${hours}:${minutes}`;\n    console.log(`Air   - getStartTime: ${getStartTime} => getEndTime: ${getEndTime}`);\n    const airTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getStartTime}&end_date=${getEndTime}&station=9410230&product=air_temperature&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`; //`https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=20200520%2018:24&end_date=20200520%2018:24&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`\n\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    fetch(proxyurl + airTempuri).then(response => validate(response)).then(data => {\n      setTemp(Number(data.data[data.data.length - 1].v).toFixed(0));\n    }).catch(err => console.log(`Something went wrong!\\nuri: ${airTempuri} \\npath: ${window.location.pathname}\\n`, err));\n  };\n\n  useEffect(() => {\n    getAirTempData();\n    const timerID = setInterval(() => getAirTempData(), 300000);\n    return function cleanUp() {\n      clearInterval(timerID);\n    };\n  });\n\n  const getCurrentTemp = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"r-10 m-5 p-10 bg-lite white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 34\n    }\n  }, temp, \"\\xB0\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"greet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 33\n    }\n  }, \"F \"));\n\n  const percent = 'twentyfivePercent mt--70 mb--70';\n\n  const loading = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: percent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    isMotionOn: isMotionOn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }));\n\n  return getCurrentTemp();\n};\n\nexport default AirTemp;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/AirTemp.js"],"names":["React","useState","useEffect","Loader","AirTemp","isMotionOn","temp","setTemp","getAirTempData","console","log","data","returnJSON","response","json","returnRejection","Promise","reject","status","validate","ok","getCurrentTime","Date","year","getFullYear","currentMonth","getMonth","month","currentDate","getDate","date","currentHour","getHours","hours","startHour","currentMinutes","getMinutes","minutes","getEndTime","getStartTime","airTempuri","proxyurl","fetch","then","Number","length","v","toFixed","catch","err","window","location","pathname","timerID","setInterval","cleanUp","clearInterval","getCurrentTemp","percent","loading"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Loader from '../utils/Loader.js';\n\nconst AirTemp = ({isMotionOn}) => {\n    \n   const [temp, setTemp] = useState(null);\n   const getAirTempData = () => {\n        console.log(`getAir ->`);\n        let data;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        let getCurrentTime = new Date();\n        const year = getCurrentTime.getFullYear();\n        const currentMonth = getCurrentTime.getMonth()+1;\n        const month = ((currentMonth)<10) ? `0${(currentMonth)}` : currentMonth;\n        const currentDate = getCurrentTime.getDate();\n        const date = (currentDate<10) ? `0${currentDate}` : currentDate;\n        const currentHour = getCurrentTime.getHours();\n        const hours = (currentHour<10) ? `0${currentHour}` : currentHour;\n        const startHour = ((currentHour-1)<10) ? `0${(currentHour-1)}` : (currentHour-1);\n        const currentMinutes = getCurrentTime.getMinutes();\n        const minutes = (currentMinutes<10) ? `0${currentMinutes}` : currentMinutes;\n        const getEndTime = `${year}${month}${date}%20${hours}:${minutes}`;\n        const getStartTime = `${year}${month}${date}%20${startHour}:00`;\n        getCurrentTime = `${year}${month}${date}%20${hours}:${minutes}`;\n        console.log(`Air   - getStartTime: ${getStartTime} => getEndTime: ${getEndTime}`)\n        const airTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getStartTime}&end_date=${getEndTime}&station=9410230&product=air_temperature&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        //`https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=20200520%2018:24&end_date=20200520%2018:24&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n        fetch(proxyurl + airTempuri)\n            .then(response => validate(response))\n            .then(data => {\n                setTemp(Number(data.data[data.data.length - 1].v).toFixed(0));\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${airTempuri} \\npath: ${window.location.pathname}\\n`, err));\n    }\n    useEffect(() => {     \t\n        getAirTempData()\t\n        const timerID = setInterval(\n            () => getAirTempData(),\n            300000\n        );\n        return function cleanUp () {\n            clearInterval(timerID);\n        }\n    });\n    const getCurrentTemp = () => <div className=\"r-10 m-5 p-10 bg-lite white\">\n                                {temp}° \n                                <span className=\"greet\">F </span>\n                            </div>;\n    const percent = 'twentyfivePercent mt--70 mb--70';\n    const loading = () => <div className={percent}>\n                <Loader isMotionOn={isMotionOn}/>\n            </div>;\n    return getCurrentTemp();\n}\n\nexport default AirTemp;"]},"metadata":{},"sourceType":"module"}