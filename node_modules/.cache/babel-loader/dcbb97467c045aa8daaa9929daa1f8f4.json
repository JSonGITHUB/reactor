{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/Tide.js\";\nimport React from 'react';\nimport Loader from '../utils/Loader.js'; //import tide from '../../assets/images/tide.png'\n//import axios from 'axios';\n\nimport arrowDown from '../../assets/images/ArrowDown.png';\nimport arrowUp from '../../assets/images/ArrowUp.png';\n\nclass Tide extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getTideData = () => {\n      console.log(`getTide ->`);\n      let data;\n\n      const returnJSON = response => response.json();\n\n      const returnRejection = response => Promise.reject({\n        status: response.status,\n        data\n      });\n\n      const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n\n      let getCurrentTime = new Date();\n      const year = getCurrentTime.getFullYear();\n      const currentMonth = getCurrentTime.getMonth() + 1;\n      const month = currentMonth < 10 ? `0${currentMonth}` : currentMonth;\n      const currentDate = getCurrentTime.getDate();\n      const date = currentDate < 10 ? `0${currentDate}` : currentDate;\n      const currentHour = getCurrentTime.getHours();\n      const hours = currentHour < 10 ? `0${currentHour}` : currentHour;\n      const startHour = currentHour - 1 < 10 ? `0${currentHour - 1}` : currentHour - 1;\n      const currentMinutes = getCurrentTime.getMinutes();\n      const minutes = currentMinutes < 10 ? `0${currentMinutes}` : currentMinutes;\n      const getEndTime = `${year}${month}${date}%20${hours}:${minutes}`;\n      const getStartTime = `${year}${month}${date}%20${startHour}:00`;\n      getCurrentTime = `${year}${month}${date}%20${hours}:${minutes}`;\n      console.log(`Tide   - getStartTime: ${getStartTime} => getEndTime: ${getEndTime}`);\n      const uriMLLW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getStartTime}&end_date=${getEndTime}&station=9410230&product=water_level&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriMHHW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_level&datum=MHHW&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriMHW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_level&datum=MHW&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriMTL = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_level&datum=MTL&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriMSL = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_level&datum=MSL&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriNAVD = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_level&datum=NAVD&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriSTND = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_level&datum=STND&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriLaJolla = `https://tidesandcurrents.noaa.gov/api/datagetter?product=predictions&amp;application=NOS.COOPS.TAC.WL&amp;begin_date=20201020&amp;end_date=20201021&amp;datum=MLLW&amp;station=9410230&amp;time_zone=lst_ldt&amp;units=english&amp;interval=hilo&amp;format=json`;\n      const uri = uriMLLW;\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\n      const parseTideData = data => {\n        const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1);\n        console.log(`tideData => ${JSON.stringify(data, null, 2)}`);\n        this.props.setTide(waterLevel);\n        this.setState({\n          station: data.metadata.name,\n          tide: waterLevel > 3 ? \"high\" : waterLevel < 2 ? \"low\" : \"med\",\n          tideDirection: \"DOWN\",\n          height: waterLevel\n        });\n      };\n      /*\n      const getTideAxios = async() => {\n          console.log(`getTideAxios $$$$$$$$$ (1)`);\n          const response = await axios.get('https://tidesandcurrents.noaa.gov/api/datagetter?product=predictions&amp;application=NOS.COOPS.TAC.WL&amp;begin_date=20201020&amp;end_date=20201021&amp;datum=MLLW&amp;station=9410230&amp;time_zone=lst_ldt&amp;units=english&amp;interval=hilo&amp;format=json');\n          console.log(`getTideAxios $$$$$$$$$ (2)`);\n          parseTideData(response);\n      }\n      getTideAxios();\n      */\n      //const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`;\n\n\n      fetch(proxyurl + uri).then(response => validate(response)).then(data => {\n        const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1); //console.log(`tideData => ${JSON.stringify(data, null, 2)}`)\n\n        this.props.setTide(waterLevel);\n        this.setState({\n          station: data.metadata.name,\n          tide: waterLevel > 3 ? \"high\" : waterLevel < 2 ? \"low\" : \"med\",\n          tideDirection: waterLevel > Number(localStorage.getItem(\"tide\")) ? \"DOWN\" : \"UP\" || localStorage.getItem(\"tideDirection\"),\n          height: waterLevel\n        });\n      }).catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n    };\n\n    this.getInterval = () => 300000;\n\n    this.previousTide = () => localStorage.getItem(\"tide\") ? Number(localStorage.getItem(\"tide\")) : 0;\n\n    this.notEqual = () => Number(this.previousTide()) !== Number(this.state.height) ? true : false;\n\n    this.greaterThan = () => Number(this.previousTide()) > Number(this.state.height) ? true : false;\n\n    this.getDownArrow = () => {\n      localStorage.setItem(\"tideDirection\", \"DOWN\");\n      return /*#__PURE__*/React.createElement(\"img\", {\n        className: \"mb--2\",\n        src: arrowDown,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 16\n        }\n      });\n    };\n\n    this.getUpArrow = () => {\n      localStorage.setItem(\"tideDirection\", \"UP\");\n      return /*#__PURE__*/React.createElement(\"img\", {\n        className: \"mb--2\",\n        src: arrowUp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 16\n        }\n      });\n    };\n\n    this.getTideDirection = () => this.notEqual() && this.greaterThan() ? \"DOWN\" : this.state.tideDirection;\n\n    this.setLocalTide = () => localStorage.setItem(\"tide\", this.state.height);\n\n    this.setLocalTideDirection = () => localStorage.setItem(\"tideDirection\", this.state.tideDirection);\n\n    this.getCurrentTide = () => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 28\n      }\n    }, this.state.height, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"greet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 29\n      }\n    }, \" ft. \"), this.previousTide() !== Number(this.state.height) ? this.state.tideDirection : this.getTideDirection());\n\n    this.percent = 'twentyfivePercent mt--70 mb--70';\n\n    this.loading = () => /*#__PURE__*/React.createElement(\"div\", {\n      className: this.percent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      isMotionOn: this.props.isMotionOn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }));\n\n    this.state = {\n      tide: null,\n      tideDirection: localStorage.tideDirection || \"?\",\n      height: null\n    };\n  }\n\n  componentDidMount() {\n    this.getTideData();\n    this.timerID = setInterval(() => this.getTideData(), this.getInterval());\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    console.log(`tide direction: ${this.state.tideDirection} previous height: ${this.previousTide()} height: ${this.state.height} == ${this.previousTide() == this.state.height}`);\n    this.setLocalTide();\n    this.setLocalTideDirection();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 16\n      }\n    }, this.getCurrentTide());\n  }\n\n}\n\nexport default Tide;\n/*   sample url data\n{\n    \"metadata\": {\n        \"id\":\"8454000\",\n        \"name\":\"Providence\",\n        \"lat\":\"41.8071\",\n        \"lon\":\"-71.4012\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2013-01-01 10:00\", \n            \"v\":\"0.072\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:06\", \n            \"v\":\"0.095\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:12\", \n            \"v\":\"0.115\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:18\", \n            \"v\":\"0.138\", \n            \"s\":\"0.004\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:24\", \n            \"v\":\"0.167\", \n            \"s\":\"0.004\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        }\n    ]\n}\n*/\n\n/* Sample temp data\nmetadata\":{\n    \"id\":\"8454000\",\n    \"name\":\"Providence\",\n    \"lat\":\"41.8071\",\n    \"lon\":\"-71.4012\"\n}, \n\"data\": [\n    {\n        \"t\":\"2013-08-08 15:00\", \n        \"v\":\"72.5\", \n        \"f\":\"0,0,0\"\n    },\n    {\n        \"t\":\"2013-08-08 15:06\", \n        \"v\":\"72.5\", \n        \"f\":\"0,0,0\"\n    }\n]\n}\n\nhttps://tidesandcurrents.noaa.gov/api/datagetter?\nbegin_date=20200520%2018:46&\nend_date=20200520%2018:46&\nstation=9410230&\nproduct=water_level&\ndatum=mllw&\nunits=english&\ntime_zone=gmt&\napplication=web_services&\nformat=json\n\nhttps://tidesandcurrents.noaa.gov/api/datagetter?\nbegin_date=20200520%2018:24&\nend_date=20200520%2018:24&\nstation=9410230&\nproduct=water_level&\ndatum=mllw&\nunits=english&\ntime_zone=gmt&\napplication=web_services&\nformat=json\n\n{\n    \"metadata\":{\n        \"id\":\"9410230\",\n        \"name\":\"La Jolla\",\n        \"lat\":\"32.8669\",\n        \"lon\":\"-117.2571\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2020-05-20 18:24\", \n            \"v\":\"2.494\", \n            \"s\":\"0.459\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"p\"\n        }\n    ]\n}\n*/","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/Tide.js"],"names":["React","Loader","arrowDown","arrowUp","Tide","Component","constructor","props","getTideData","console","log","data","returnJSON","response","json","returnRejection","Promise","reject","status","validate","ok","getCurrentTime","Date","year","getFullYear","currentMonth","getMonth","month","currentDate","getDate","date","currentHour","getHours","hours","startHour","currentMinutes","getMinutes","minutes","getEndTime","getStartTime","uriMLLW","uriMHHW","uriMHW","uriMTL","uriMSL","uriNAVD","uriSTND","uriLaJolla","uri","proxyurl","parseTideData","waterLevel","Number","length","v","toFixed","JSON","stringify","setTide","setState","station","metadata","name","tide","tideDirection","height","fetch","then","localStorage","getItem","catch","err","window","location","pathname","getInterval","previousTide","notEqual","state","greaterThan","getDownArrow","setItem","getUpArrow","getTideDirection","setLocalTide","setLocalTideDirection","getCurrentTide","percent","loading","isMotionOn","componentDidMount","timerID","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Loader from '../utils/Loader.js';\n//import tide from '../../assets/images/tide.png'\n//import axios from 'axios';\nimport arrowDown from '../../assets/images/ArrowDown.png';\nimport arrowUp from '../../assets/images/ArrowUp.png';\n\nclass Tide extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tide: null,\n            tideDirection: localStorage.tideDirection || \"?\",\n            height: null\n        }\n    }\n    getTideData = () => {\n        console.log(`getTide ->`);\n        let data;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        let getCurrentTime = new Date();\n        const year = getCurrentTime.getFullYear();\n        const currentMonth = getCurrentTime.getMonth()+1;\n        const month = ((currentMonth)<10) ? `0${(currentMonth)}` : currentMonth;\n        const currentDate = getCurrentTime.getDate();\n        const date = (currentDate<10) ? `0${currentDate}` : currentDate;\n        const currentHour = getCurrentTime.getHours();\n        const hours = (currentHour<10) ? `0${currentHour}` : currentHour;\n        const startHour = ((currentHour-1)<10) ? `0${(currentHour-1)}` : (currentHour-1);\n        const currentMinutes = getCurrentTime.getMinutes();\n        const minutes = (currentMinutes<10) ? `0${currentMinutes}` : currentMinutes;\n        const getEndTime = `${year}${month}${date}%20${hours}:${minutes}`;\n        const getStartTime = `${year}${month}${date}%20${startHour}:00`;\n        getCurrentTime = `${year}${month}${date}%20${hours}:${minutes}`;\n        console.log(`Tide   - getStartTime: ${getStartTime} => getEndTime: ${getEndTime}`)\n        const uriMLLW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getStartTime}&end_date=${getEndTime}&station=9410230&product=water_level&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriMHHW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_level&datum=MHHW&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriMHW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_level&datum=MHW&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriMTL = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_level&datum=MTL&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriMSL = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_level&datum=MSL&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriNAVD = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_level&datum=NAVD&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriSTND = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_level&datum=STND&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriLaJolla = `https://tidesandcurrents.noaa.gov/api/datagetter?product=predictions&amp;application=NOS.COOPS.TAC.WL&amp;begin_date=20201020&amp;end_date=20201021&amp;datum=MLLW&amp;station=9410230&amp;time_zone=lst_ldt&amp;units=english&amp;interval=hilo&amp;format=json`;\n        \n        const uri = uriMLLW;\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\n        const parseTideData = (data) => {\n            const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1);\n            console.log(`tideData => ${JSON.stringify(data, null, 2)}`)\n            this.props.setTide(waterLevel)\n            this.setState({\n                station: data.metadata.name,\n                tide:(waterLevel > 3) ? \"high\" : (waterLevel < 2) ? \"low\" : \"med\",\n                tideDirection: \"DOWN\",\n                height: waterLevel\n            })\n        }\n        /*\n        const getTideAxios = async() => {\n            console.log(`getTideAxios $$$$$$$$$ (1)`);\n            const response = await axios.get('https://tidesandcurrents.noaa.gov/api/datagetter?product=predictions&amp;application=NOS.COOPS.TAC.WL&amp;begin_date=20201020&amp;end_date=20201021&amp;datum=MLLW&amp;station=9410230&amp;time_zone=lst_ldt&amp;units=english&amp;interval=hilo&amp;format=json');\n            console.log(`getTideAxios $$$$$$$$$ (2)`);\n            parseTideData(response);\n        }\n        getTideAxios();\n        */\n        //const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`;\n        \n        fetch(proxyurl + uri)\n            .then(response => validate(response))\n            .then(data => {\n                const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1);\n                //console.log(`tideData => ${JSON.stringify(data, null, 2)}`)\n                this.props.setTide(waterLevel)\n                this.setState({\n                    station: data.metadata.name,\n                    tide:(waterLevel > 3) ? \"high\" : (waterLevel < 2) ? \"low\" : \"med\",\n                    tideDirection: (waterLevel > Number(localStorage.getItem(\"tide\"))) ? \"DOWN\" : \"UP\" || localStorage.getItem(\"tideDirection\"),\n                    height: waterLevel\n                })\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n\n    }\n    getInterval = () => 300000;\n    componentDidMount() {\n        this.getTideData();\n        this.timerID = setInterval(() => this.getTideData(), this.getInterval());\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n    previousTide = () => (localStorage.getItem(\"tide\")) ? Number(localStorage.getItem(\"tide\")) : 0;\n    notEqual = () => (Number(this.previousTide()) !== Number(this.state.height)) ? true : false;\n    greaterThan = () => (Number(this.previousTide()) > Number(this.state.height)) ? true : false;\n    getDownArrow = () => {\n        localStorage.setItem(\"tideDirection\", \"DOWN\")\n        return <img className='mb--2' src={arrowDown} />\n    }\n    getUpArrow = () => { \n        localStorage.setItem(\"tideDirection\", \"UP\")\n        return <img className='mb--2' src={arrowUp} />\n    }\n    //getTideDirection = () => (this.notEqual() && this.greaterThan()) ? this.getDownArrow() : this.getUpArrow();\n    getTideDirection = () => (this.notEqual() && this.greaterThan()) ? \"DOWN\" : this.state.tideDirection;\n    setLocalTide = () => localStorage.setItem(\"tide\", this.state.height);\n    setLocalTideDirection = () => localStorage.setItem(\"tideDirection\", this.state.tideDirection);\n\n    getCurrentTide = () => <div>\n                            {this.state.height} \n                            <span className=\"greet\"> ft. </span> \n                            {(this.previousTide() !== Number(this.state.height)) ? this.state.tideDirection : this.getTideDirection()}\n                        </div>;\n\n    percent = 'twentyfivePercent mt--70 mb--70';\n    loading = () => <div className={this.percent}>\n                        <Loader isMotionOn={this.props.isMotionOn}/>\n                    </div>;\n\n    render() {\n        console.log(`tide direction: ${this.state.tideDirection} previous height: ${this.previousTide()} height: ${this.state.height} == ${this.previousTide() == this.state.height}`)\n        this.setLocalTide();\n        this.setLocalTideDirection();\n        return <div>{this.getCurrentTide()}</div>\n    };\n}\n\nexport default Tide;\n/*   sample url data\n{\n    \"metadata\": {\n        \"id\":\"8454000\",\n        \"name\":\"Providence\",\n        \"lat\":\"41.8071\",\n        \"lon\":\"-71.4012\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2013-01-01 10:00\", \n            \"v\":\"0.072\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:06\", \n            \"v\":\"0.095\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:12\", \n            \"v\":\"0.115\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:18\", \n            \"v\":\"0.138\", \n            \"s\":\"0.004\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:24\", \n            \"v\":\"0.167\", \n            \"s\":\"0.004\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        }\n    ]\n}\n*/\n\n/* Sample temp data\nmetadata\":{\n    \"id\":\"8454000\",\n    \"name\":\"Providence\",\n    \"lat\":\"41.8071\",\n    \"lon\":\"-71.4012\"\n}, \n\"data\": [\n    {\n        \"t\":\"2013-08-08 15:00\", \n        \"v\":\"72.5\", \n        \"f\":\"0,0,0\"\n    },\n    {\n        \"t\":\"2013-08-08 15:06\", \n        \"v\":\"72.5\", \n        \"f\":\"0,0,0\"\n    }\n]\n}\n\nhttps://tidesandcurrents.noaa.gov/api/datagetter?\nbegin_date=20200520%2018:46&\nend_date=20200520%2018:46&\nstation=9410230&\nproduct=water_level&\ndatum=mllw&\nunits=english&\ntime_zone=gmt&\napplication=web_services&\nformat=json\n\nhttps://tidesandcurrents.noaa.gov/api/datagetter?\nbegin_date=20200520%2018:24&\nend_date=20200520%2018:24&\nstation=9410230&\nproduct=water_level&\ndatum=mllw&\nunits=english&\ntime_zone=gmt&\napplication=web_services&\nformat=json\n\n{\n    \"metadata\":{\n        \"id\":\"9410230\",\n        \"name\":\"La Jolla\",\n        \"lat\":\"32.8669\",\n        \"lon\":\"-117.2571\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2020-05-20 18:24\", \n            \"v\":\"2.494\", \n            \"s\":\"0.459\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"p\"\n        }\n    ]\n}\n*/"]},"metadata":{},"sourceType":"module"}