{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/Timer.js\";\nimport React, { useState, useEffect } from 'react'; //import ReactDOM from 'react-dom';\n\nconst Timer = () => {\n  const timeItIs = [\"shaka time!!!\", \"get a wave brah!\", \"keep froth alive...\"];\n  let timerID;\n  const logos = [1, 2, 3];\n  let x = 0;\n  let interval = 0;\n  let timeItIsNow = timeItIs[x];\n  const stackIndex = 0;\n\n  const logoStacker = (value, index, array) => {\n    //console.log(`index: ${index} array: ${array} value: ${value}`);\n    let newId = value + stackIndex;\n    newId = newId > array.length ? 1 : newId; //console.log(`logo${value} => z${newId}`)\n\n    document.getElementById('logo' + value).className = \"logo\" + value + \" z\" + newId + \" absolute logo height200 ml--100\";\n  };\n\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    timerID = setInterval(() => tick(), 1000);\n  }, []);\n  /*Hooks?\n  componentWillUnmount() {\n      clearInterval(timerID);\n  }\n  */\n\n  const tick = () => {\n    setDate(new Date());\n  };\n\n  interval = interval === 3 ? 0 : interval + 1;\n  x = x === timeItIs.length - 1 && interval === 0 ? 0 : interval === 0 ? x + 1 : x;\n  timeItIsNow = timeItIs[x];\n  const localDate = date.toLocaleTimeString();\n  const time = localDate.replace(\" \", \"\").toLocaleLowerCase();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time p-20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"color-red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, \"do you know what time it is?\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, time), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"color-green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, timeItIsNow)));\n};\n\nexport default Timer;\n/*\nReactDOM.render(\n    <Timer />,\n    document.getElementById('time')\n);\n\n\nlet initTimer = () => {\n    ReactDOM.render(\n        <Timer date={ new Date() } />,\n        document.getElementById('time')\n    )\n}\nsetTimeout(initTimer, 1000);\n*/","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/Timer.js"],"names":["React","useState","useEffect","Timer","timeItIs","timerID","logos","x","interval","timeItIsNow","stackIndex","logoStacker","value","index","array","newId","length","document","getElementById","className","date","setDate","Date","setInterval","tick","localDate","toLocaleTimeString","time","replace","toLocaleLowerCase"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAChB,QAAMC,QAAQ,GAAG,CAAC,eAAD,EAAkB,kBAAlB,EAAsC,qBAAtC,CAAjB;AACA,MAAIC,OAAJ;AACA,QAAMC,KAAK,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAd;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,WAAW,GAAGL,QAAQ,CAACG,CAAD,CAA1B;AACA,QAAMG,UAAU,GAAG,CAAnB;;AACA,QAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,KAAyB;AACzC;AACA,QAAIC,KAAK,GAAGH,KAAK,GAACF,UAAlB;AACAK,IAAAA,KAAK,GAAIA,KAAK,GAAGD,KAAK,CAACE,MAAf,GAAyB,CAAzB,GAA6BD,KAArC,CAHyC,CAIzC;;AACAE,IAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAON,KAA/B,EAAsCO,SAAtC,GAAkD,SAAOP,KAAP,GAAa,IAAb,GAAkBG,KAAlB,GAAwB,kCAA1E;AACH,GAND;;AAOA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,IAAIqB,IAAJ,EAAD,CAAhC;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,OAAO,GAAGkB,WAAW,CACjB,MAAMC,IAAI,EADO,EAEjB,IAFiB,CAArB;AAIH,GALQ,EAKP,EALO,CAAT;AAMA;AACJ;AACA;AACA;AACA;;AACI,QAAMA,IAAI,GAAG,MAAM;AACfH,IAAAA,OAAO,CAAC,IAAIC,IAAJ,EAAD,CAAP;AACH,GAFD;;AAGAd,EAAAA,QAAQ,GAAIA,QAAQ,KAAK,CAAd,GAAmB,CAAnB,GAAwBA,QAAQ,GAAC,CAA5C;AACAD,EAAAA,CAAC,GAAIA,CAAC,KAAMH,QAAQ,CAACY,MAAT,GAAgB,CAAvB,IAA8BR,QAAQ,KAAK,CAA5C,GAAkD,CAAlD,GAAwDA,QAAQ,KAAK,CAAd,GAAoBD,CAAC,GAAC,CAAtB,GAA2BA,CAAtF;AACAE,EAAAA,WAAW,GAAGL,QAAQ,CAACG,CAAD,CAAtB;AACA,QAAMkB,SAAS,GAAGL,IAAI,CAACM,kBAAL,EAAlB;AACA,QAAMC,IAAI,GAAGF,SAAS,CAACG,OAAV,CAAkB,GAAlB,EAAsB,EAAtB,EAA0BC,iBAA1B,EAAb;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,IAAJ,CALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,eAQI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKlB,WAAL,CADJ,CARJ,CADJ;AAcH,CAlDD;;AAmDA,eAAeN,KAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from 'react';\n//import ReactDOM from 'react-dom';\n   \nconst Timer = () => {\n    const timeItIs = [\"shaka time!!!\", \"get a wave brah!\", \"keep froth alive...\"];\n    let timerID;\n    const logos = [1,2,3];\n    let x = 0;\n    let interval = 0;\n    let timeItIsNow = timeItIs[x];\n    const stackIndex = 0;\n    const logoStacker = (value, index, array) => {\n        //console.log(`index: ${index} array: ${array} value: ${value}`);\n        let newId = value+stackIndex;\n        newId = (newId > array.length) ? 1 : newId;\n        //console.log(`logo${value} => z${newId}`)\n        document.getElementById('logo'+value).className = \"logo\"+value+\" z\"+newId+\" absolute logo height200 ml--100\";\n    }\n    const [date, setDate] = useState(new Date());\n\n    useEffect(() => {     \t\t\n        timerID = setInterval(\n            () => tick(),\n            1000\n        );\n    },[]);\n    /*Hooks?\n    componentWillUnmount() {\n        clearInterval(timerID);\n    }\n    */\n    const tick = () => {\n        setDate(new Date());\n    }\n    interval = (interval === 3) ? 0 : (interval+1);\n    x = (x === (timeItIs.length-1) && (interval === 0)) ? 0 : ((interval === 0) ? (x+1) : x);\n    timeItIsNow = timeItIs[x];\n    const localDate = date.toLocaleTimeString();\n    const time = localDate.replace(\" \",\"\").toLocaleLowerCase();\n    return (\n        <div className=\"time p-20\">\n            <div className='color-red'>\n                do you know what time it is?\n            </div>\n            <br/>\n            <b>{time}</b>\n            <br/>\n            <br/>\n            <div className='color-green'>\n                <b>{ timeItIsNow }</b>\n            </div>\n        </div>\n    )\n}\nexport default Timer;\n/*\nReactDOM.render(\n    <Timer />,\n    document.getElementById('time')\n);\n\n\nlet initTimer = () => {\n    ReactDOM.render(\n        <Timer date={ new Date() } />,\n        document.getElementById('time')\n    )\n}\nsetTimeout(initTimer, 1000);\n*/"]},"metadata":{},"sourceType":"module"}