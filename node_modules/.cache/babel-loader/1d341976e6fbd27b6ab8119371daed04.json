{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/SurfScoringLogic.js\";\nimport React, { useState, useEffect } from 'react';\nimport surfScoring from './SurfScoring.js';\nimport jerseyColors from './JerseyColors.js';\nimport findTwoHighestIndices from './FindTwoHighestIndices.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SurfScoringLogic = (index, completed, players /*setPlayers, editPlayer, deleteAthlete*/) => {\n  const getSurfTotal = player => {\n    let total = 0;\n    const score = index => player.surfScores[index];\n    const addToTotal = value => total = total + value;\n    surfScoring.map((target, index) => {\n      addToTotal(Number(score(index)));\n    });\n    return total;\n  };\n  const getScore = () => window.location.pathname = '/reactor/ScoreKeeper';\n  const resetSurfersScores = playerId => {\n    const newPlayers = [...players];\n    newPlayers[playerId].surfScore = 0;\n    newPlayers[playerId].surfScores = surfScoring;\n    setPlayers(newPlayers);\n    getScore();\n  };\n  const selectJersey = (playerId, selection) => {\n    const newPlayers = [...players];\n    newPlayers[playerId].surfJerseyColor = selection;\n    localStorage.setItem('players', JSON.stringify(newPlayers));\n    setPlayers(newPlayers);\n  };\n  const getJerseyColorSelector = (playerId, color, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `bg-${color} ht-45 width50px button r-10`,\n    onClick: () => selectJersey(playerId, index)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 64\n  }, this);\n  const editSurfer = playerId => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"m-10 p-10 r-10 bg-darker\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"size30 p-10\",\n      children: \"Name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10`,\n      onClick: () => editPlayer(playerId),\n      children: players[playerId].name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"size30 p-10\",\n      children: \"Jersey color:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: jerseyColors.map((color, index) => index === Math.ceil(jerseyColors.length / 2) ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 29\n        }, this), getJerseyColorSelector(playerId, color, index)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }, this) : getJerseyColorSelector(playerId, color, index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5\",\n        onClick: () => resetSurfersScores(playerId),\n        children: \"Reset Scores\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5\",\n        onClick: () => deleteAthlete(playerId),\n        children: \"Delete Athlete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 38\n  }, this);\n  const scoreTotal = (index, playersArray) => Number(highestScore(index, playersArray) + secondHighestScore(index, playersArray)).toFixed(2);\n  const isTieScore = index => {\n    const score = scoreTotal(index, players);\n    if (index !== 0) {\n      if (score === scoreTotal(index - 1, players)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  const place = index => isTieScore(index) && index !== 0 ? index : index + 1;\n  const placeSuffix = index => rank[isTieScore(index) && index !== 0 ? index - 1 : index > 2 ? 3 : index];\n  const position = index => `${place} ${placeSuffix}`;\n  const rank = ['st', 'nd', 'rd', 'th'];\n  const getTwoHighestScores = index => {\n    const player = players[index];\n    const scores = player.surfScores;\n    const [highestIndex, secondHighestIndex] = findTwoHighestIndices(scores);\n    //console.log(`getTwoHighestScores => playerIndex: ${index} player: ${JSON.stringify(player,null,2)} name: ${(player.player || player.name)}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n    return {\n      highScoreIndex: highestIndex,\n      secondHighScoreIndex: secondHighestIndex\n    };\n  };\n  const highestScore = (index, playersArray) => {\n    return playersArray[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n  };\n  const secondHighestScore = (index, playersArray) => playersArray[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n  const getScoreTotal = index => {\n    const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n    const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n    const score = highestScore + secondHighestScore;\n    return score;\n  };\n  const playerId = index.index;\n  //console.log(`SurfScoringLogic => index: ${JSON.stringify(index,null,2)}`);\n  //console.log(`SurfScoringLogic => players: ${JSON.stringify(players,null,2)}`);\n  const scoreDifference = Number(index.players[playerId === 0 ? 0 : playerId - 1].surfScore - index.players[playerId === 0 ? 1 : playerId].surfScore);\n  const difference = scoreDifference < 0 ? -1 * scoreDifference : scoreDifference;\n  const winningScore = Number(index.players[playerId === 0 ? 0 : playerId < 3 ? playerId - 1 : 1].surfScore);\n  const highestScoresIndices = findTwoHighestIndices(index.players[playerId].surfScores);\n  const losersHeighestScore = index.players[playerId].surfScores[highestScoresIndices[0]];\n  const need = winningScore - losersHeighestScore + .01;\n  const winsBy = `${completed ? 'Won' : 'Wins'} by ${difference.toFixed(2)}`;\n  const needs = `${completed ? 'Needed' : 'Needs'} ${need.toFixed(2)}`;\n  if (playerId === 0) {\n    return winsBy;\n  }\n  return needs;\n};\n_c = SurfScoringLogic;\nexport default SurfScoringLogic;\nvar _c;\n$RefreshReg$(_c, \"SurfScoringLogic\");","map":{"version":3,"names":["React","useState","useEffect","surfScoring","jerseyColors","findTwoHighestIndices","jsxDEV","_jsxDEV","SurfScoringLogic","index","completed","players","getSurfTotal","player","total","score","surfScores","addToTotal","value","map","target","Number","getScore","window","location","pathname","resetSurfersScores","playerId","newPlayers","surfScore","setPlayers","selectJersey","selection","surfJerseyColor","localStorage","setItem","JSON","stringify","getJerseyColorSelector","color","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","editSurfer","children","editPlayer","name","Math","ceil","length","Fragment","deleteAthlete","scoreTotal","playersArray","highestScore","secondHighestScore","toFixed","isTieScore","place","placeSuffix","rank","position","getTwoHighestScores","scores","highestIndex","secondHighestIndex","highScoreIndex","secondHighScoreIndex","getScoreTotal","scoreDifference","difference","winningScore","highestScoresIndices","losersHeighestScore","need","winsBy","needs","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/SurfScoringLogic.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport surfScoring from './SurfScoring.js'\nimport jerseyColors from './JerseyColors.js';\nimport findTwoHighestIndices from './FindTwoHighestIndices.js';\n\nconst SurfScoringLogic = (index, completed, players, /*setPlayers, editPlayer, deleteAthlete*/) => {\n\n    const getSurfTotal = (player) => {\n        let total = 0;\n        const score = (index) => player.surfScores[index];\n        const addToTotal = (value) => total = total + value;\n        surfScoring.map((target, index) => {\n                addToTotal(Number(score(index)))\n            }\n        );\n        return total;\n    }\n    const getScore = () => window.location.pathname = '/reactor/ScoreKeeper';\n    const resetSurfersScores = (playerId) => {\n        const newPlayers = [...players];\n        newPlayers[playerId].surfScore = 0;\n        newPlayers[playerId].surfScores = surfScoring;\n        setPlayers(newPlayers);\n        getScore();\n    }\n    const selectJersey = (playerId, selection) => {\n        const newPlayers = [...players];\n        newPlayers[playerId].surfJerseyColor = (selection);\n        localStorage.setItem('players', JSON.stringify(newPlayers));\n        setPlayers(newPlayers);\n    }\n    const getJerseyColorSelector = (playerId, color, index) => <button className={`bg-${color} ht-45 width50px button r-10`} onClick={() => selectJersey(playerId, index)}></button>;\n    const editSurfer = (playerId) => <div className='m-10 p-10 r-10 bg-darker'>\n            <div className='size30 p-10'>Name:</div>\n            <button className={`bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10`} onClick={() => editPlayer(playerId)}>{players[playerId].name}</button>\n            <div className='size30 p-10'>Jersey color:</div>\n            <div>\n                {jerseyColors.map((color,index) => \n                    index === Math.ceil(jerseyColors.length / 2) ? (\n                        <React.Fragment key={index}>\n                            <br />\n                            {getJerseyColorSelector(playerId, color, index)}\n                        </React.Fragment>\n                    ) : (\n                        getJerseyColorSelector(playerId, color, index)\n                    )\n                )}\n            </div>\n            <div>\n                <button className='bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5' onClick={() => resetSurfersScores(playerId)}>\n                    Reset Scores\n                </button>\n                <button className='bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5' onClick={() => deleteAthlete(playerId)}>\n                    Delete Athlete\n                </button>\n            </div>\n        </div>\n    \n    const scoreTotal = (index, playersArray) => Number(highestScore(index, playersArray) + secondHighestScore(index, playersArray)).toFixed(2);\n    \n    const isTieScore = (index) => {\n        const score = scoreTotal(index, players);\n        if (index !== 0) {\n            if (score === scoreTotal(index - 1, players)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const place = (index) => (isTieScore(index) && (index !== 0)) ? index : (index + 1);\n    const placeSuffix = (index) => rank[(isTieScore(index) && (index !== 0)) ? (index-1) : (index > 2) ? 3 : (index)];\n    const position = (index) => `${place} ${placeSuffix}`;\n    const rank = ['st', 'nd', 'rd', 'th'];\n    const getTwoHighestScores = (index) => {\n        const player = players[index];\n        const scores = player.surfScores;\n        const [highestIndex, secondHighestIndex] = findTwoHighestIndices(scores);\n        //console.log(`getTwoHighestScores => playerIndex: ${index} player: ${JSON.stringify(player,null,2)} name: ${(player.player || player.name)}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n        return {\n            highScoreIndex: highestIndex,\n            secondHighScoreIndex: secondHighestIndex\n        };\n    };\n    const highestScore = (index, playersArray) => {\n        return playersArray[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n    }\n    const secondHighestScore = (index, playersArray) => playersArray[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n    \n    const getScoreTotal = (index) => {\n        const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex]\n        const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex]\n        const score = (highestScore + secondHighestScore);\n        return score;\n    }\n    \n    const playerId = index.index;\n    //console.log(`SurfScoringLogic => index: ${JSON.stringify(index,null,2)}`);\n    //console.log(`SurfScoringLogic => players: ${JSON.stringify(players,null,2)}`);\n    const scoreDifference = Number(index.players[(playerId === 0) ? 0 : (playerId - 1)].surfScore - index.players[(playerId === 0) ? 1 : (playerId)].surfScore);\n    const difference = (scoreDifference < 0) ? (-1 * scoreDifference) : scoreDifference;\n    const winningScore = Number(index.players[(playerId === 0) ? 0 : ((playerId < 3) ? (playerId - 1) : 1)].surfScore);\n    const highestScoresIndices = findTwoHighestIndices(index.players[playerId].surfScores);\n    const losersHeighestScore = index.players[playerId].surfScores[highestScoresIndices[0]];\n    const need = (winningScore - losersHeighestScore) + .01;\n    const winsBy = `${(completed)?'Won':'Wins'} by ${difference.toFixed(2)}`;\n    const needs = `${(completed)?'Needed':'Needs'} ${need.toFixed(2)}`;\n    if (playerId === 0) {\n        return winsBy\n    }\n    return needs\n\n}\nexport default SurfScoringLogic;"],"mappings":"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"},"metadata":{},"sourceType":"module"}