{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js\";\nimport React from 'react';\nimport Dialog from '../functional/Dialog.js';\nimport Loader from '../utils/Loader.js';\n\nclass Geolocate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCurrentPostion = () => {\n      window.navigator.geolocation.getCurrentPosition( //position => console.log(position.coords.longitude),\n      position => {\n        console.log(`getCurrentPostion => coords ^^^^^^^^^^^ ${JSON.stringify(position.coords, null, 2)}`);\n        this.setState({\n          longitude: position.coords.longitude,\n          latitude: position.coords.latitude\n        });\n\n        try {\n          if (!this.props.currentPositionExists()) {\n            this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n          }\n        } catch (err) {}\n      }, err => {\n        console.log(err);\n        this.setState({\n          errorMessage: err.message\n        });\n      });\n    };\n\n    this.getLocation = () => `${this.state.latitude.toFixed(6)}, ${this.state.longitude.toFixed(6)} `;\n\n    this.percent = window.innerWidth < 700 ? 'twentyfivePercent mt--70 mb--70' : 'fiftyPercent mt--40 mb--40';\n\n    this.loading = () => /*#__PURE__*/React.createElement(\"div\", {\n      className: this.percent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      isMotionOn: this.props.isMotionOn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }));\n\n    this.latlon = () => this.state.latitude + \",\" + this.state.longitude;\n\n    this.state = {\n      longitude: null,\n      latitude: null,\n      errorMessage: null,\n      returnCurrentPosition: props.returnCurrentPosition,\n      currentPositionExists: props.currentPositionExists\n    };\n  }\n\n  componentDidMount() {\n    this.getCurrentPosition();\n    this.timerID = setInterval(() => this.tick(), 5000);\n  }\n\n  tick() {\n    this.getCurrentPostion();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    const errorExists = this.state.errorMessage ? true : false;\n    const latExists = this.state.latitude ? true : false;\n    const errMessage = this.state.errorMessage;\n    let gelocationStatus = latExists ? this.getLocation() : this.loading();\n    gelocationStatus = errorExists ? `${errMessage}` : gelocationStatus;\n    /*\n    if (latExists) {\n        if (!this.props.currentPositionExists()) {\n            this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n        }\n    }\n    */\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"color-yellow greet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 16\n      }\n    }, gelocationStatus);\n  }\n\n}\n\nexport default Geolocate;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js"],"names":["React","Dialog","Loader","Geolocate","Component","constructor","props","getCurrentPostion","window","navigator","geolocation","getCurrentPosition","position","console","log","JSON","stringify","coords","setState","longitude","latitude","currentPositionExists","returnCurrentPosition","state","err","errorMessage","message","getLocation","toFixed","percent","innerWidth","loading","isMotionOn","latlon","componentDidMount","timerID","setInterval","tick","componentWillUnmount","clearInterval","render","errorExists","latExists","errMessage","gelocationStatus"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Dialog from '../functional/Dialog.js';\nimport Loader from '../utils/Loader.js';\n\nclass Geolocate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            longitude: null,\n            latitude: null,\n            errorMessage: null,\n            returnCurrentPosition: props.returnCurrentPosition,\n            currentPositionExists: props.currentPositionExists\n        }\n    }\n    getCurrentPostion = () => {\n        window.navigator.geolocation.getCurrentPosition(\n            //position => console.log(position.coords.longitude),\n           position => {\n                console.log(`getCurrentPostion => coords ^^^^^^^^^^^ ${JSON.stringify(position.coords,null,2)}`)\n                this.setState({\n                    longitude: position.coords.longitude,\n                    latitude: position.coords.latitude,\n                });\n                try {\n                    if (!this.props.currentPositionExists()) {\n                        this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n                    }\n                }catch(err) {\n                }\n            },\n            err => {\n                console.log(err)\n                this.setState({\n                    errorMessage: err.message\n                });\n\n            }\n        )\n    }\n    componentDidMount() {\n        \n        this.getCurrentPosition();\n        this.timerID = setInterval(\n            () => this.tick(),\n            5000\n        );\n    }\n    tick() {\n        this.getCurrentPostion();\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n    getLocation = () => `${this.state.latitude.toFixed(6)}, ${this.state.longitude.toFixed(6)} `;\n    percent = (window.innerWidth < 700) ? 'twentyfivePercent mt--70 mb--70' : 'fiftyPercent mt--40 mb--40';\n    loading = () => <div className={this.percent}>\n                <Loader isMotionOn={this.props.isMotionOn}/>\n            </div>;\n    latlon = () => this.state.latitude + \",\" + this.state.longitude;\n    render() {\n        const errorExists = (this.state.errorMessage) ? true : false;\n        const latExists = (this.state.latitude) ? true : false;\n        const errMessage = this.state.errorMessage;\n        let gelocationStatus = (latExists) ? this.getLocation() : this.loading();\n        gelocationStatus = (errorExists) ? `${errMessage}` : gelocationStatus;\n        /*\n        if (latExists) {\n            if (!this.props.currentPositionExists()) {\n                this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n            }\n        }\n        */\n        return <div className=\"color-yellow greet\">{gelocationStatus}</div>\n    };\n}\n\nexport default Geolocate;"]},"metadata":{},"sourceType":"module"}