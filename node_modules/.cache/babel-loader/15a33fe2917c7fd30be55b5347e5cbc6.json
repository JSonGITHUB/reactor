{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/LoggerFunctional.js\";\nimport React, { useState, useEffect } from 'react';\nimport LogEntry from './LogEntryFunctional.js';\nimport Loader from '../utils/Loader.js';\nimport interfaceData from './InterfaceData.js';\nimport templateData from './TemplateData.js';\nimport generateNewLogId from './GenerateLogId.js';\n\nconst Logger = ({\n  logId,\n  location\n}) => {\n  console.log(`Logger => logId: ${logId}\\nlocalStorage.getItem('logId'): ${localStorage.getItem('logId')}`);\n\n  const logExists = () => localStorage.getItem(logId) === null ? false : true;\n\n  const initLogId = () => logExists() ? logId : generateNewLogId();\n\n  const initLog = () => logExists() ? JSON.parse(localStorage.getItem(logId)) : templateData;\n\n  const [status, setStatus] = useState({\n    //logID: initLogId(),\n    logID: localStorage.getItem('logId'),\n    log: initLog(),\n    isLoaded: false,\n    items: []\n  });\n\n  const getSpot = () => localStorage.getItem(\"spot\");\n\n  useEffect(() => {\n    const {\n      state\n    } = location;\n    const logId = localStorage.getItem('logId');\n    console.log(`LoggerFunctional => componentDidMount -> SPOT: ${getSpot()}\\ngetLogId: ${localStorage.getItem('logId')}\\nlogId: ${logId}`);\n\n    if (localStorage.getItem(logId) === null) {\n      setStatus(prevState => ({ ...prevState,\n        log: templateData,\n        logID: generateNewLogId()\n      }));\n      console.log(`LoggerFunctional => componentDidMount -> 1\\nSPOT: ${getSpot()}\\nlogID: ${logId}\\nlog: ${JSON.stringify(status.log, null, 2)}`);\n    } else {\n      setStatus(prevState => ({ ...prevState,\n        log: JSON.parse(localStorage.getItem(logId)),\n        logID: logId\n      }));\n      console.log(`LoggerFunctional => componentDidMount -> 2\\nSPOT: ${getSpot()}\\nlogID: ${logId}\\nlog: ${JSON.stringify(status.log, null, 2)}`);\n    }\n\n    let data = interfaceData;\n\n    const returnJSON = response => response.json();\n\n    const returnRejection = response => Promise.reject({\n      status: response.status,\n      data\n    });\n\n    const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n    /*\n    const requestInit = {\n        method:'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        mode: 'cors',\n        cache: 'default'\n    };\n    */\n    //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n    //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n\n\n    const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json'; //const uri = 'localhost:8080/writeSurfLog.json';\n\n    /*\n    fetch(uri)\n        .then(response => validate(response))\n        .then(data => {\n            setIsLoaded(true);\n            setItems(data);\n            setLogID(logId);\n        })\n        .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n    */\n\n    setStatus({\n      log: JSON.parse(localStorage.getItem(logId)),\n      logID: logId,\n      items: data,\n      isLoaded: true\n    });\n  }, [location]);\n\n  const updateLog = (groupTitle, label, selected, set) => {\n    console.log(`updateLog => \\ngroupTitle: ${groupTitle} \\nlabel: ${label}\\nselected: ${selected}\\nset: ${set}`);\n    const log = status.log;\n    log[groupTitle][label] = selected;\n\n    if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n      setStatus(prevState => ({ ...prevState,\n        log: log\n      }));\n    }\n  };\n\n  const getStateLog = () => status.log; //console.log(`LoggerFunctional ===> ${JSON.stringify(status.items, null, 2)}`);\n\n\n  let appInterface = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App-content fadeIn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 29\n    }\n  }));\n\n  if (status.isLoaded) {\n    appInterface = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-content fadeIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LogEntry, {\n      logId: status.logID,\n      onChange: updateLog,\n      getStateLog: getStateLog,\n      title: \"Session Log\",\n      message: \"Add your session data\",\n      buttonLabel: \"submit\",\n      items: status.items,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  return appInterface;\n};\n\nexport default Logger;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/LoggerFunctional.js"],"names":["React","useState","useEffect","LogEntry","Loader","interfaceData","templateData","generateNewLogId","Logger","logId","location","console","log","localStorage","getItem","logExists","initLogId","initLog","JSON","parse","status","setStatus","logID","isLoaded","items","getSpot","state","prevState","stringify","data","returnJSON","response","json","returnRejection","Promise","reject","validate","ok","uri","updateLog","groupTitle","label","selected","set","undefined","getStateLog","appInterface"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport LogEntry from './LogEntryFunctional.js';\nimport Loader from '../utils/Loader.js';\nimport interfaceData from './InterfaceData.js'\nimport templateData from './TemplateData.js';\nimport generateNewLogId from './GenerateLogId.js';\n\nconst Logger = ({logId, location}) => { \n    console.log(`Logger => logId: ${logId}\\nlocalStorage.getItem('logId'): ${localStorage.getItem('logId')}`); \n    const logExists = () => (localStorage.getItem(logId) === null) ? false : true;\n    const initLogId = () => (logExists()) ? logId : generateNewLogId();\n    const initLog = () => (logExists()) ? JSON.parse(localStorage.getItem(logId)) : templateData;\n    const [status, setStatus] = useState({\n        //logID: initLogId(),\n        logID: localStorage.getItem('logId'),\n        log: initLog(),\n        isLoaded: false,\n        items: []\n    })\n    const getSpot = () => localStorage.getItem(\"spot\");\n    useEffect(() => {\n        const { state } = location;\n        const logId = localStorage.getItem('logId');\n        console.log(`LoggerFunctional => componentDidMount -> SPOT: ${getSpot()}\\ngetLogId: ${localStorage.getItem('logId')}\\nlogId: ${logId}`); \n        \n        if (localStorage.getItem(logId) === null) {\n            setStatus(prevState => ({\n                ...prevState,\n                log: templateData,\n                logID:generateNewLogId()\n            }));\n            console.log(`LoggerFunctional => componentDidMount -> 1\\nSPOT: ${getSpot()}\\nlogID: ${logId}\\nlog: ${JSON.stringify(status.log, null, 2)}`); \n        \n        } else {\n            setStatus(prevState => ({\n                ...prevState,\n                log: JSON.parse(localStorage.getItem(logId)),\n                logID: logId\n            }));\n            console.log(`LoggerFunctional => componentDidMount -> 2\\nSPOT: ${getSpot()}\\nlogID: ${logId}\\nlog: ${JSON.stringify(status.log, null, 2)}`); \n        }\n        \n        let data = interfaceData;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        /*\n        const requestInit = {\n            method:'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            cache: 'default'\n        };\n        */\n        //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n        //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        //const uri = 'localhost:8080/writeSurfLog.json';\n        /*\n        fetch(uri)\n            .then(response => validate(response))\n            .then(data => {\n                setIsLoaded(true);\n                setItems(data);\n                setLogID(logId);\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n        */\n        setStatus({\n            log: JSON.parse(localStorage.getItem(logId)),\n            logID: logId,\n            items: data,\n            isLoaded: true\n        });\n    }, [location])\n\n    const updateLog = (groupTitle, label, selected, set) => {\n        console.log(`updateLog => \\ngroupTitle: ${groupTitle} \\nlabel: ${label}\\nselected: ${selected}\\nset: ${set}`)\n        const log = status.log;\n        log[groupTitle][label] = selected;\n        if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n            setStatus(prevState => ({\n                ...prevState,\n                log: log\n            }));\n        }\n    }\n    const getStateLog = () => status.log;\n          \n    //console.log(`LoggerFunctional ===> ${JSON.stringify(status.items, null, 2)}`);\n    let appInterface = <div className=\"App-content fadeIn\">\n                            <div className=\"flex3Column\"></div>\n                            <div className=\"flex3Column\">\n                                <Loader />\n                            </div>\n                            <div className=\"flex3Column\"></div>\n                        </div>;\n    if (status.isLoaded) {\n        appInterface = <div className=\"App-content fadeIn\">\n            <div className=\"flex3Column\"></div>\n            <div className=\"flex3Column\">\n                <LogEntry\n                    logId={status.logID}\n                    onChange={updateLog} \n                    getStateLog={getStateLog} \n                    title=\"Session Log\" \n                    message=\"Add your session data\"  \n                    buttonLabel=\"submit\" \n                    items={status.items}\n                />\n            </div>\n            <div className=\"flex3Column\"></div>\n        </div>\n        \n    }\n    return (\n        appInterface            \n    )\n    \n}\nexport default Logger;"]},"metadata":{},"sourceType":"module"}