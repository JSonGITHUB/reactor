{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/Tide.js\";\nimport React from 'react';\nimport Loader from '../utils/Loader.js'; //import tide from '../../assets/images/tide.png'\n\nimport arrowDown from '../../assets/images/ArrowDown.png';\nimport arrowUp from '../../assets/images/ArrowUp.png';\n\nclass Tide extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCurrentTime = () => {\n      let currentTime = new Date();\n      const year = currentTime.getFullYear();\n      const currentMonth = currentTime.getMonth() + 1;\n      const month = currentMonth < 10 ? `0${currentMonth}` : currentMonth;\n      const currentDate = currentTime.getDate();\n      const date = currentDate < 10 ? `0${currentDate}` : currentDate;\n      const currentHour = currentTime.getHours();\n      const hours = currentHour < 10 ? `0${currentHour}` : currentHour;\n      const startHour = currentHour - 1 < 10 ? `0${currentHour - 1}` : currentHour - 1;\n      const currentMinutes = currentTime.getMinutes();\n      const minutes = currentMinutes < 10 ? `0${currentMinutes}` : currentMinutes;\n      const getEndTime = `${year}${month}${date}%20${hours}:${minutes}`;\n      const getStartTime = `${year}${month}${date}%20${startHour}:00`;\n      currentTime = `${year}${month}${date}%20${hours}:${minutes}`;\n      return {\n        hours,\n        minutes,\n        date,\n        month,\n        year,\n        currentTime,\n        startTime: getStartTime,\n        endTime: getEndTime\n      };\n    };\n\n    this.getTideData = () => {\n      console.log(`getTideData ->`);\n      let data;\n\n      const returnJSON = response => response.json();\n\n      const returnRejection = response => Promise.reject({\n        status: response.status,\n        data\n      });\n\n      const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n\n      console.log(`Tide   - getStartTime: ${this.getCurrentTime().startTime} => getEndTime: ${this.getCurrentTime().endTime}`);\n      const uriMLLW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().startTime}&end_date=${this.getCurrentTime().endTime}&station=9410230&product=water_level&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriMHHW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MHHW&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriMHW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MHW&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriMTL = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MTL&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriMSL = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MSL&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriNAVD = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_level&datum=NAVD&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriSTND = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_level&datum=STND&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriLaJolla = `https://tidesandcurrents.noaa.gov/api/datagetter?product=predictions&amp;application=NOS.COOPS.TAC.WL&amp;begin_date=20201020&amp;end_date=20201021&amp;datum=MLLW&amp;station=9410230&amp;time_zone=lst_ldt&amp;units=english&amp;interval=hilo&amp;format=json`;\n      const uri = uriMLLW;\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\n      const parseTideData = data => {\n        const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1) || 1;\n        console.log(`tideData => ${JSON.stringify(data, null, 2)}`);\n        this.props.setTide(waterLevel);\n        this.setState({\n          station: data.metadata.name,\n          tide: waterLevel > 3 ? \"high\" : waterLevel < 2 ? \"low\" : \"med\",\n          tideDirection: \"DOWN\",\n          height: waterLevel\n        });\n      };\n\n      const getTideHour = tide => Number(tide.t.split(\" \")[1].split(\":\")[0]);\n\n      const getTideMinutes = tide => Number(tide.t.split(\" \")[1].split(\":\")[1]); //        const getTideTime = (tide) => (getTideHour(tide) === this.getCurrentTime().hours) ? getTideHour(tide) : tide;\n\n\n      const getTideTime = tide => `${getTideHour(tide)}:${getTideMinutes(tide)}`;\n\n      const getTideHeight = tide => Number(tide.v); //const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`;\n\n\n      fetch(proxyurl + uri).then(response => validate(response)).then(data => {\n        console.log(`tideData => ${JSON.stringify(data, null, 2)} \\ncurrentTime: ${this.getCurrentTime().hours}:${this.getCurrentTime().minutes}`);\n        const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1);\n        this.props.setTide(waterLevel);\n        this.setState({\n          station: data.metadata.name,\n          tide: waterLevel > 3 ? \"high\" : waterLevel < 2 ? \"low\" : \"med\",\n          tideDirection: waterLevel > Number(localStorage.getItem(\"tide\")) ? \"DOWN\" : localStorage.getItem(\"tideDirection\") || \"UP\",\n          height: waterLevel\n        });\n      }).catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n    };\n\n    this.getDirection = () => {\n      console.log(`getDirection ->`);\n      let data;\n\n      const returnJSON = response => response.json();\n\n      const returnRejection = response => Promise.reject({\n        status: response.status,\n        data\n      });\n\n      const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n\n      console.log(`Tide   - getStartTime: ${this.getCurrentTime().startTime} => getEndTime: ${this.getCurrentTime().endTime}`);\n      const tideDaily = `https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?product=predictions&amp;application=NOS.COOPS.TAC.WL&amp;begin_date=${this.getCurrentTime().year}${this.getCurrentTime().month}${this.getCurrentTime().date}&amp;end_date=${this.getCurrentTime().year}${this.getCurrentTime().month}${this.getCurrentTime().date}&amp;datum=MLLW&amp;station=9410230&amp;time_zone=lst_ldt&amp;units=english&amp;interval=hilo&amp;format=json`;\n      const uri = tideDaily;\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n      console.log(`tideDaily: ${tideDaily}`);\n\n      const getTideHour = tide => Number(tide.t.split(\" \")[1].split(\":\")[0]);\n\n      const getTideMinutes = tide => Number(tide.t.split(\" \")[1].split(\":\")[1]); //        const getTideTime = (tide) => (getTideHour(tide) === this.getCurrentTime().hours) ? getTideHour(tide) : tide;\n\n\n      const getTideTime = tide => `${getTideHour(tide)}:${getTideMinutes(tide)}`;\n\n      const getTideHeight = tide => Number(tide.v);\n\n      const getTide = tide => Number(tide.type); //const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`;\n\n\n      fetch(proxyurl + uri).then(response => validate(response)).then(data => {\n        console.log(`tideDirection => ${JSON.stringify(data, null, 2)} \\ncurrentTime: ${this.getCurrentTime().hours}:${this.getCurrentTime().minutes} \\ntime: ${data.predictions.map(tide => getTideTime(tide))} \\nfeet: ${data.predictions.map(tide => getTideHeight(tide))} \\ntide: ${data.predictions.map(tide => getTide(tide))}`);\n        const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1);\n        this.props.setTide(waterLevel);\n        this.setState({\n          station: data.metadata.name,\n          tide: waterLevel > 3 ? \"high\" : waterLevel < 2 ? \"low\" : \"med\",\n          tideDirection: waterLevel > Number(localStorage.getItem(\"tide\")) ? \"DOWN\" : localStorage.getItem(\"tideDirection\") || \"UP\",\n          height: waterLevel\n        });\n      }).catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n    };\n\n    this.getInterval = () => 300000;\n\n    this.previousTide = () => localStorage.getItem(\"tide\") ? Number(localStorage.getItem(\"tide\")) : 0;\n\n    this.notEqual = () => Number(this.previousTide()) !== Number(this.state.height) ? true : false;\n\n    this.greaterThan = () => Number(this.previousTide()) > Number(this.state.height) ? true : false;\n\n    this.getDownArrow = () => {\n      localStorage.setItem(\"tideDirection\", \"DOWN\");\n      return /*#__PURE__*/React.createElement(\"img\", {\n        className: \"arrows mb--2\",\n        src: arrowDown,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 16\n        }\n      });\n    };\n\n    this.getUpArrow = () => {\n      localStorage.setItem(\"tideDirection\", \"UP\");\n      return /*#__PURE__*/React.createElement(\"img\", {\n        className: \"arrows mb--2\",\n        src: arrowUp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 16\n        }\n      });\n    };\n\n    this.getTideDirection = () => this.state.tideDirection === \"DOWN\" ? this.getDownArrow() : this.getUpArrow();\n\n    this.setLocalTide = () => localStorage.setItem(\"tide\", Number(this.state.height));\n\n    this.setLocalTideDirection = () => localStorage.setItem(\"tideDirection\", this.state.tideDirection);\n\n    this.getCurrentTide = () => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 28\n      }\n    }, this.state.height, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"greet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 29\n      }\n    }, \" ft. \"), this.getTideDirection());\n\n    this.percent = 'twentyfivePercent mt--70 mb--70';\n\n    this.loading = () => /*#__PURE__*/React.createElement(\"div\", {\n      className: this.percent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      isMotionOn: this.props.isMotionOn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }\n    }));\n\n    this.state = {\n      tide: null,\n      tideDirection: localStorage.tideDirection || \"?\",\n      height: null\n    };\n  }\n\n  componentDidMount() {\n    this.getTideData();\n    this.getDirection();\n    this.timerID = setInterval(() => this.getTideData(), this.getInterval());\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    //console.log(`tide direction: ${this.state.tideDirection} previous height: ${this.previousTide()} height: ${this.state.height} == ${this.previousTide() === Number(this.state.height)}`)\n    this.setLocalTide();\n    this.setLocalTideDirection();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 16\n      }\n    }, this.getCurrentTide());\n  }\n\n}\n\nexport default Tide;\n/*   sample url data\n{\n    \"metadata\": {\n        \"id\":\"8454000\",\n        \"name\":\"Providence\",\n        \"lat\":\"41.8071\",\n        \"lon\":\"-71.4012\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2013-01-01 10:00\", \n            \"v\":\"0.072\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:06\", \n            \"v\":\"0.095\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:12\", \n            \"v\":\"0.115\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:18\", \n            \"v\":\"0.138\", \n            \"s\":\"0.004\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:24\", \n            \"v\":\"0.167\", \n            \"s\":\"0.004\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        }\n    ]\n}\n*/\n\n/* Sample temp data\nmetadata\":{\n    \"id\":\"8454000\",\n    \"name\":\"Providence\",\n    \"lat\":\"41.8071\",\n    \"lon\":\"-71.4012\"\n}, \n\"data\": [\n    {\n        \"t\":\"2013-08-08 15:00\", \n        \"v\":\"72.5\", \n        \"f\":\"0,0,0\"\n    },\n    {\n        \"t\":\"2013-08-08 15:06\", \n        \"v\":\"72.5\", \n        \"f\":\"0,0,0\"\n    }\n]\n}\n\nhttps://tidesandcurrents.noaa.gov/api/datagetter?\nbegin_date=20200520%2018:46&\nend_date=20200520%2018:46&\nstation=9410230&\nproduct=water_level&\ndatum=mllw&\nunits=english&\ntime_zone=gmt&\napplication=web_services&\nformat=json\n\nhttps://tidesandcurrents.noaa.gov/api/datagetter?\nbegin_date=20200520%2018:24&\nend_date=20200520%2018:24&\nstation=9410230&\nproduct=water_level&\ndatum=mllw&\nunits=english&\ntime_zone=gmt&\napplication=web_services&\nformat=json\n\n{\n    \"metadata\":{\n        \"id\":\"9410230\",\n        \"name\":\"La Jolla\",\n        \"lat\":\"32.8669\",\n        \"lon\":\"-117.2571\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2020-05-20 18:24\", \n            \"v\":\"2.494\", \n            \"s\":\"0.459\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"p\"\n        }\n    ]\n}\n*/","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/Tide.js"],"names":["React","Loader","arrowDown","arrowUp","Tide","Component","constructor","props","getCurrentTime","currentTime","Date","year","getFullYear","currentMonth","getMonth","month","currentDate","getDate","date","currentHour","getHours","hours","startHour","currentMinutes","getMinutes","minutes","getEndTime","getStartTime","startTime","endTime","getTideData","console","log","data","returnJSON","response","json","returnRejection","Promise","reject","status","validate","ok","uriMLLW","uriMHHW","uriMHW","uriMTL","uriMSL","uriNAVD","uriSTND","uriLaJolla","uri","proxyurl","parseTideData","waterLevel","Number","length","v","toFixed","JSON","stringify","setTide","setState","station","metadata","name","tide","tideDirection","height","getTideHour","t","split","getTideMinutes","getTideTime","getTideHeight","fetch","then","localStorage","getItem","catch","err","window","location","pathname","getDirection","tideDaily","getTide","type","predictions","map","getInterval","previousTide","notEqual","state","greaterThan","getDownArrow","setItem","getUpArrow","getTideDirection","setLocalTide","setLocalTideDirection","getCurrentTide","percent","loading","isMotionOn","componentDidMount","timerID","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"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":["import React from 'react';\nimport Loader from '../utils/Loader.js';\n//import tide from '../../assets/images/tide.png'\nimport arrowDown from '../../assets/images/ArrowDown.png';\nimport arrowUp from '../../assets/images/ArrowUp.png';\n\nclass Tide extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tide: null,\n            tideDirection: localStorage.tideDirection || \"?\",\n            height: null\n        }\n    }\n    getCurrentTime = () => {\n        let currentTime = new Date();\n        const year = currentTime.getFullYear();\n        const currentMonth = currentTime.getMonth()+1;\n        const month = ((currentMonth)<10) ? `0${(currentMonth)}` : currentMonth;\n        const currentDate = currentTime.getDate();\n        const date = (currentDate<10) ? `0${currentDate}` : currentDate;\n        const currentHour = currentTime.getHours();\n        const hours = (currentHour<10) ? `0${currentHour}` : currentHour;\n        const startHour = ((currentHour-1)<10) ? `0${(currentHour-1)}` : (currentHour-1);\n        const currentMinutes = currentTime.getMinutes();\n        const minutes = (currentMinutes<10) ? `0${currentMinutes}` : currentMinutes;\n        const getEndTime = `${year}${month}${date}%20${hours}:${minutes}`;\n        const getStartTime = `${year}${month}${date}%20${startHour}:00`;\n        currentTime = `${year}${month}${date}%20${hours}:${minutes}`;\n        return (\n            {   \n                hours,\n                minutes,\n                date,\n                month,\n                year,\n                currentTime,\n                startTime: getStartTime,\n                endTime: getEndTime\n            }\n        )\n    }\n    getTideData = () => {\n        console.log(`getTideData ->`);\n        let data;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        \n        console.log(`Tide   - getStartTime: ${this.getCurrentTime().startTime} => getEndTime: ${this.getCurrentTime().endTime}`)\n        const uriMLLW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().startTime}&end_date=${this.getCurrentTime().endTime}&station=9410230&product=water_level&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriMHHW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MHHW&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriMHW = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MHW&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriMTL = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MTL&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriMSL = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_level&datum=MSL&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriNAVD = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_level&datum=NAVD&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriSTND = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_level&datum=STND&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriLaJolla = `https://tidesandcurrents.noaa.gov/api/datagetter?product=predictions&amp;application=NOS.COOPS.TAC.WL&amp;begin_date=20201020&amp;end_date=20201021&amp;datum=MLLW&amp;station=9410230&amp;time_zone=lst_ldt&amp;units=english&amp;interval=hilo&amp;format=json`;\n        const uri = uriMLLW;\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n        const parseTideData = (data) => {\n            const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1) || 1;\n            console.log(`tideData => ${JSON.stringify(data, null, 2)}`)\n            this.props.setTide(waterLevel)\n            this.setState({\n                station: data.metadata.name,\n                tide:(waterLevel > 3) ? \"high\" : (waterLevel < 2) ? \"low\" : \"med\",\n                tideDirection: \"DOWN\",\n                height: waterLevel\n            })\n        }\n        const getTideHour = (tide) => Number(tide.t.split(\" \")[1].split(\":\")[0]);\n        const getTideMinutes = (tide) => Number(tide.t.split(\" \")[1].split(\":\")[1]);\n//        const getTideTime = (tide) => (getTideHour(tide) === this.getCurrentTime().hours) ? getTideHour(tide) : tide;\n        const getTideTime = (tide) => `${getTideHour(tide)}:${getTideMinutes(tide)}`;\n        const getTideHeight = (tide) => Number(tide.v);\n        //const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`;\n        fetch(proxyurl + uri)\n            .then(response => validate(response))\n            .then(data => {\n                console.log(`tideData => ${JSON.stringify(data, null, 2)} \\ncurrentTime: ${this.getCurrentTime().hours}:${this.getCurrentTime().minutes}`);\n                const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1);\n                this.props.setTide(waterLevel);\n                this.setState({\n                    station: data.metadata.name,\n                    tide:(waterLevel > 3) ? \"high\" : (waterLevel < 2) ? \"low\" : \"med\",\n                    tideDirection: (waterLevel > Number(localStorage.getItem(\"tide\"))) ? \"DOWN\" : localStorage.getItem(\"tideDirection\") || \"UP\",\n                    height: waterLevel\n                })\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n\n    }\n    getDirection = () => {\n        console.log(`getDirection ->`);\n        let data;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        console.log(`Tide   - getStartTime: ${this.getCurrentTime().startTime} => getEndTime: ${this.getCurrentTime().endTime}`)\n        const tideDaily = `https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?product=predictions&amp;application=NOS.COOPS.TAC.WL&amp;begin_date=${this.getCurrentTime().year}${this.getCurrentTime().month}${this.getCurrentTime().date}&amp;end_date=${this.getCurrentTime().year}${this.getCurrentTime().month}${this.getCurrentTime().date}&amp;datum=MLLW&amp;station=9410230&amp;time_zone=lst_ldt&amp;units=english&amp;interval=hilo&amp;format=json`;\n        const uri = tideDaily;\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n        console.log(`tideDaily: ${tideDaily}`)\n        const getTideHour = (tide) => Number(tide.t.split(\" \")[1].split(\":\")[0]);\n        const getTideMinutes = (tide) => Number(tide.t.split(\" \")[1].split(\":\")[1]);\n//        const getTideTime = (tide) => (getTideHour(tide) === this.getCurrentTime().hours) ? getTideHour(tide) : tide;\n        const getTideTime = (tide) => `${getTideHour(tide)}:${getTideMinutes(tide)}`;\n        const getTideHeight = (tide) => Number(tide.v);\n        const getTide = (tide) => Number(tide.type);\n        //const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${this.getCurrentTime().currentTime}&end_date=${this.getCurrentTime().currentTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`;\n        fetch(proxyurl + uri)\n            .then(response => validate(response))\n            .then(data => {\n                console.log(`tideDirection => ${JSON.stringify(data, null, 2)} \\ncurrentTime: ${this.getCurrentTime().hours}:${this.getCurrentTime().minutes} \\ntime: ${data.predictions.map((tide) => getTideTime(tide))} \\nfeet: ${data.predictions.map((tide) => getTideHeight(tide))} \\ntide: ${data.predictions.map((tide) => getTide(tide))}`);\n                const waterLevel = Number(data.data[data.data.length - 1].v).toFixed(1);\n                this.props.setTide(waterLevel);\n                this.setState({\n                    station: data.metadata.name,\n                    tide:(waterLevel > 3) ? \"high\" : (waterLevel < 2) ? \"low\" : \"med\",\n                    tideDirection: (waterLevel > Number(localStorage.getItem(\"tide\"))) ? \"DOWN\" : localStorage.getItem(\"tideDirection\") || \"UP\",\n                    height: waterLevel\n                })\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n\n    }\n    getInterval = () => 300000;\n    componentDidMount() {\n        this.getTideData();\n        this.getDirection();\n        this.timerID = setInterval(() => this.getTideData(), this.getInterval());\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n    previousTide = () => (localStorage.getItem(\"tide\")) ? Number(localStorage.getItem(\"tide\")) : 0;\n    notEqual = () => (Number(this.previousTide()) !== Number(this.state.height)) ? true : false;\n    greaterThan = () => (Number(this.previousTide()) > Number(this.state.height)) ? true : false;\n    getDownArrow = () => {\n        localStorage.setItem(\"tideDirection\", \"DOWN\")\n        return <img className='arrows mb--2' src={arrowDown} />\n    }\n    getUpArrow = () => { \n        localStorage.setItem(\"tideDirection\", \"UP\")\n        return <img className='arrows mb--2' src={arrowUp} />\n    }\n    getTideDirection = () => (this.state.tideDirection === \"DOWN\") ? this.getDownArrow() : this.getUpArrow();\n    //getTideDirection = () => (this.notEqual() && this.greaterThan()) ? \"DOWN\" : this.state.tideDirection;\n    setLocalTide = () => localStorage.setItem(\"tide\", Number(this.state.height));\n    setLocalTideDirection = () => localStorage.setItem(\"tideDirection\", this.state.tideDirection);\n\n    getCurrentTide = () => <div>\n                            {this.state.height} \n                            <span className=\"greet\"> ft. </span> \n                            {this.getTideDirection()}\n                        </div>;\n\n    percent = 'twentyfivePercent mt--70 mb--70';\n    loading = () => <div className={this.percent}>\n                        <Loader isMotionOn={this.props.isMotionOn}/>\n                    </div>;\n\n    render() {\n        //console.log(`tide direction: ${this.state.tideDirection} previous height: ${this.previousTide()} height: ${this.state.height} == ${this.previousTide() === Number(this.state.height)}`)\n        this.setLocalTide();\n        this.setLocalTideDirection();\n        return <div>{this.getCurrentTide()}</div>\n    };\n}\n\nexport default Tide;\n/*   sample url data\n{\n    \"metadata\": {\n        \"id\":\"8454000\",\n        \"name\":\"Providence\",\n        \"lat\":\"41.8071\",\n        \"lon\":\"-71.4012\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2013-01-01 10:00\", \n            \"v\":\"0.072\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:06\", \n            \"v\":\"0.095\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:12\", \n            \"v\":\"0.115\", \n            \"s\":\"0.003\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:18\", \n            \"v\":\"0.138\", \n            \"s\":\"0.004\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        },\n        {\n            \"t\":\"2013-01-01 10:24\", \n            \"v\":\"0.167\", \n            \"s\":\"0.004\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"v\"\n        }\n    ]\n}\n*/\n\n/* Sample temp data\nmetadata\":{\n    \"id\":\"8454000\",\n    \"name\":\"Providence\",\n    \"lat\":\"41.8071\",\n    \"lon\":\"-71.4012\"\n}, \n\"data\": [\n    {\n        \"t\":\"2013-08-08 15:00\", \n        \"v\":\"72.5\", \n        \"f\":\"0,0,0\"\n    },\n    {\n        \"t\":\"2013-08-08 15:06\", \n        \"v\":\"72.5\", \n        \"f\":\"0,0,0\"\n    }\n]\n}\n\nhttps://tidesandcurrents.noaa.gov/api/datagetter?\nbegin_date=20200520%2018:46&\nend_date=20200520%2018:46&\nstation=9410230&\nproduct=water_level&\ndatum=mllw&\nunits=english&\ntime_zone=gmt&\napplication=web_services&\nformat=json\n\nhttps://tidesandcurrents.noaa.gov/api/datagetter?\nbegin_date=20200520%2018:24&\nend_date=20200520%2018:24&\nstation=9410230&\nproduct=water_level&\ndatum=mllw&\nunits=english&\ntime_zone=gmt&\napplication=web_services&\nformat=json\n\n{\n    \"metadata\":{\n        \"id\":\"9410230\",\n        \"name\":\"La Jolla\",\n        \"lat\":\"32.8669\",\n        \"lon\":\"-117.2571\"\n    }, \n    \"data\": [\n        {\n            \"t\":\"2020-05-20 18:24\", \n            \"v\":\"2.494\", \n            \"s\":\"0.459\", \n            \"f\":\"0,0,0,0\", \n            \"q\":\"p\"\n        }\n    ]\n}\n*/"]},"metadata":{},"sourceType":"module"}