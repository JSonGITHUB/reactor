{"ast":null,"code":"var audioContext=new AudioContext(),oscillator;var playSound=function playSound(winner,score){// Create an oscillator node\noscillator=audioContext.createOscillator();// Connect the oscillator to the audio context's destination (your speakers)\noscillator.connect(audioContext.destination);var treeScores=[5,10,55,60,105,110,155,160];var treeTotals=[50,100,150,200];var treeClosed=function treeClosed(){return treeTotals.includes(score);};var isTree=function isTree(){return treeScores.includes(score);};var isTree1=function isTree1(){return score>0&&score<55;};var isTree2=function isTree2(){return score>50&&score<105;};var isTree3=function isTree3(){return score>100&&score<155;};var isTree4=function isTree4(){return score>150;};var isTreeComplete=function isTreeComplete(){return score>150;};// Set the oscillator type to 'sine' (you can experiment with other types like 'square', 'sawtooth', 'triangle')\nvar getType=function getType(){return score===winner||treeClosed()?'sawtooth':'triangle';};oscillator.type=getType();//const note = (treeClosed()) ? 1000 : (440 + (score * 2));\nvar note=treeClosed()?1000:440;// Set the frequency (Hz) - in this case, 440 Hz is an 'A' note\noscillator.frequency.setValueAtTime(note,audioContext.currentTime);// Start the oscillator\noscillator.start();var soundLength=score==winner?1:0.05;console.log(\"soundLength: \".concat(soundLength,\" score: \").concat(score,\" winner: \").concat(winner));// Stop the oscillator after 0.5 seconds (you can adjust this time)\noscillator.stop(audioContext.currentTime+soundLength);};var audioContext=new AudioContext(),oscillator1;var playSiren=function playSiren(){var highPitch=false;var getHighPitch=function getHighPitch(){highPitch=!highPitch;return highPitch;};//const AudioContext = window.AudioContext || window.webkitAudioContext;\n//const audioContext = new AudioContext();\noscillator1=audioContext.createOscillator();oscillator1.type='sine';// First oscillator is a sine wave\noscillator1.frequency.setValueAtTime(400,audioContext.currentTime);var oscillator2=audioContext.createOscillator();oscillator2.type='sine';// Second oscillator is a square wave\noscillator2.frequency.setValueAtTime(400,audioContext.currentTime);// Gain nodes to control volume\nvar gainNode1=audioContext.createGain();var gainNode2=audioContext.createGain();oscillator1.connect(gainNode1);oscillator2.connect(gainNode2);gainNode1.connect(audioContext.destination);gainNode2.connect(audioContext.destination);oscillator1.start();oscillator2.start();var sirenInterval=setInterval(function(){var frequency=getHighPitch()?1200:400;// Random frequency between 400 and 1200 Hz\noscillator1.frequency.setValueAtTime(frequency,audioContext.currentTime);oscillator2.frequency.setValueAtTime(frequency,audioContext.currentTime);},100);// Change frequency every 10th of a second\n// Stop the siren after 10 seconds\nsetTimeout(function(){clearInterval(sirenInterval);oscillator1.stop();oscillator2.stop();},1000);};var Sounds={playSound:playSound,playSiren:playSiren};export default Sounds;","map":{"version":3,"names":["audioContext","AudioContext","oscillator","playSound","winner","score","createOscillator","connect","destination","treeScores","treeTotals","treeClosed","includes","isTree","isTree1","isTree2","isTree3","isTree4","isTreeComplete","getType","type","note","frequency","setValueAtTime","currentTime","start","soundLength","console","log","concat","stop","oscillator1","playSiren","highPitch","getHighPitch","oscillator2","gainNode1","createGain","gainNode2","sirenInterval","setInterval","setTimeout","clearInterval","Sounds"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Sounds.js"],"sourcesContent":["var audioContext = new AudioContext(),\noscillator;\n\nconst playSound = (winner, score) => {\n\n    // Create an oscillator node\n    oscillator = audioContext.createOscillator();\n\n    // Connect the oscillator to the audio context's destination (your speakers)\n    oscillator.connect(audioContext.destination);\n\n    const treeScores = [5, 10, 55, 60, 105, 110, 155, 160];\n    const treeTotals = [50, 100, 150, 200];\n    const treeClosed = () => treeTotals.includes(score);\n    const isTree = () => treeScores.includes(score);\n    const isTree1 = () => (score > 0 && score < 55);\n    const isTree2 = () => (score > 50 && score < 105);\n    const isTree3 = () => (score > 100 && score < 155);\n    const isTree4 = () => (score > 150);\n    const isTreeComplete = () => (score > 150);\n    // Set the oscillator type to 'sine' (you can experiment with other types like 'square', 'sawtooth', 'triangle')\n\n    const getType = () => (score === winner || treeClosed()) ? 'sawtooth' : 'triangle';\n    oscillator.type = getType();\n\n    //const note = (treeClosed()) ? 1000 : (440 + (score * 2));\n    const note = (treeClosed()) ? 1000 : 440;\n    // Set the frequency (Hz) - in this case, 440 Hz is an 'A' note\n    oscillator.frequency.setValueAtTime(note, audioContext.currentTime);\n\n    // Start the oscillator\n    oscillator.start();\n\n    const soundLength = (score == winner) ? 1 : 0.05;\n    console.log(`soundLength: ${soundLength} score: ${score} winner: ${winner}`)\n    // Stop the oscillator after 0.5 seconds (you can adjust this time)\n    oscillator.stop(audioContext.currentTime + soundLength);\n}\n\nvar audioContext = new AudioContext(),\noscillator1;\n\nconst playSiren = () => {\n\n    let highPitch = false;\n\n    const getHighPitch = () => {\n        highPitch = !highPitch;\n        return highPitch;\n    }\n\n    //const AudioContext = window.AudioContext || window.webkitAudioContext;\n    //const audioContext = new AudioContext();\n\n    oscillator1 = audioContext.createOscillator();\n    oscillator1.type = 'sine'; // First oscillator is a sine wave\n    oscillator1.frequency.setValueAtTime(400, audioContext.currentTime);\n\n    const oscillator2 = audioContext.createOscillator();\n    oscillator2.type = 'sine'; // Second oscillator is a square wave\n    oscillator2.frequency.setValueAtTime(400, audioContext.currentTime);\n\n    // Gain nodes to control volume\n    const gainNode1 = audioContext.createGain();\n    const gainNode2 = audioContext.createGain();\n\n    oscillator1.connect(gainNode1);\n    oscillator2.connect(gainNode2);\n\n    gainNode1.connect(audioContext.destination);\n    gainNode2.connect(audioContext.destination);\n\n    oscillator1.start();\n    oscillator2.start();\n\n    const sirenInterval = setInterval(() => {\n        const frequency = (getHighPitch()) ? 1200 : 400; // Random frequency between 400 and 1200 Hz\n        oscillator1.frequency.setValueAtTime(frequency, audioContext.currentTime);\n        oscillator2.frequency.setValueAtTime(frequency, audioContext.currentTime);\n    }, 100); // Change frequency every 10th of a second\n\n    // Stop the siren after 10 seconds\n    setTimeout(() => {\n        clearInterval(sirenInterval);\n        oscillator1.stop();\n        oscillator2.stop();\n    }, 1000);\n\n}\n\nconst Sounds = {\n    playSound,\n    playSiren\n};\n\nexport default Sounds;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}