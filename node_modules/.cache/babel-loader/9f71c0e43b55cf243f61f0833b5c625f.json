{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/LoggerFunctional.js\";\nimport React, { useState, useEffect } from 'react';\nimport LogEntry from './LogEntryFunctional.js';\nimport Loader from '../utils/Loader.js';\nimport LogId from './LogId.js';\nimport interfaceData from './InterfaceData.js';\nimport templateData from './TemplateData.js';\n\nconst Logger = ({\n  logId,\n  location\n}) => {\n  let [logID, setLogID] = useState(logId);\n  const [spot, setSpot] = useState(localStorage.getItem(\"spot\"));\n  const logIdComponent = new LogId(logID);\n  let [log, setLog] = useState(templateData);\n\n  if (localStorage.getItem(logIdComponent.getLogId()) === null) {\n    logID = logIdComponent.generateNewLogId();\n  } else {\n    log = JSON.parse(localStorage.getItem(logIdComponent.getLogId()));\n    logID = logIdComponent.getLogId();\n  }\n\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    const {\n      state\n    } = location;\n    console.log(`LoggerFunctional => componentDidMount -> SPOT: ${spot}`);\n    const logId = state === undefined ? logIdComponent.getLogId() : state.logId.item;\n\n    if (localStorage.getItem(logIdComponent.getLogId()) === null) {\n      log = templateData;\n      logID = logIdComponent.generateNewLogId();\n    } else {\n      log = JSON.parse(localStorage.getItem(logIdComponent.getLogId()));\n      logID = logIdComponent.getLogId();\n    }\n\n    let data = interfaceData;\n\n    const returnJSON = response => response.json();\n\n    const returnRejection = response => Promise.reject({\n      status: response.status,\n      data\n    });\n\n    const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n    /*\n    const requestInit = {\n        method:'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        mode: 'cors',\n        cache: 'default'\n    };\n    */\n    //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n    //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n\n\n    const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json'; //const uri = 'localhost:8080/writeSurfLog.json';\n\n    /*\n    fetch(uri)\n        .then(response => validate(response))\n        .then(data => {\n            setIsLoaded(true);\n            setItems(data);\n            setLogID(logId);\n        })\n        .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n    */\n\n    setIsLoaded(true);\n    setItems(data);\n    setLogID(logId);\n  });\n\n  const updateLog = (groupTitle, label, selected, set) => {\n    log[groupTitle][label] = selected;\n\n    if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n      setLog(log);\n    }\n  };\n\n  const getStateLog = () => log;\n\n  console.log(`LoggerFunctional ===> ${JSON.stringify(items, null, 2)}`);\n  let appInterface = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App-content fadeIn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 29\n    }\n  }));\n\n  if (isLoaded) {\n    console.log(`LoggerFunctional => -> \\nSPOT: ${spot}\\nlogId: ${logId}`);\n    appInterface = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-content fadeIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LogEntry, {\n      logId: logID,\n      onChange: updateLog,\n      getStateLog: getStateLog,\n      title: \"Session Log\",\n      message: \"Add your session data\",\n      buttonLabel: \"submit\",\n      items: items,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  return appInterface;\n};\n\nexport default Logger;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/LoggerFunctional.js"],"names":["React","useState","useEffect","LogEntry","Loader","LogId","interfaceData","templateData","Logger","logId","location","logID","setLogID","spot","setSpot","localStorage","getItem","logIdComponent","log","setLog","getLogId","generateNewLogId","JSON","parse","isLoaded","setIsLoaded","items","setItems","state","console","undefined","item","data","returnJSON","response","json","returnRejection","Promise","reject","status","validate","ok","uri","updateLog","groupTitle","label","selected","set","getStateLog","stringify","appInterface"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport LogEntry from './LogEntryFunctional.js';\nimport Loader from '../utils/Loader.js';\nimport LogId from './LogId.js';\nimport interfaceData from './InterfaceData.js'\nimport templateData from './TemplateData.js';\nconst Logger = ({logId, location}) => {\n    \n    let [logID, setLogID] = useState(logId);\n    const [spot, setSpot] = useState(localStorage.getItem(\"spot\"));\n    const logIdComponent = new LogId(logID);\n    let [log, setLog] = useState(templateData);\n    if (localStorage.getItem(logIdComponent.getLogId()) === null) {\n        logID = logIdComponent.generateNewLogId();\n    } else {\n        log = JSON.parse(localStorage.getItem(logIdComponent.getLogId()));\n        logID = logIdComponent.getLogId()\n    }\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n    \n    useEffect(() => {\n        const { state } = location;\n        console.log(`LoggerFunctional => componentDidMount -> SPOT: ${spot}`); \n        const logId = (state === undefined) ? logIdComponent.getLogId() : state.logId.item;\n        if (localStorage.getItem(logIdComponent.getLogId()) === null) {\n            log = templateData;\n            logID = logIdComponent.generateNewLogId();\n        } else {\n            log = JSON.parse(localStorage.getItem(logIdComponent.getLogId()));\n            logID = logIdComponent.getLogId()\n        }\n        let data = interfaceData;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        /*\n        const requestInit = {\n            method:'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            cache: 'default'\n        };\n        */\n        //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n        //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        //const uri = 'localhost:8080/writeSurfLog.json';\n        /*\n        fetch(uri)\n            .then(response => validate(response))\n            .then(data => {\n                setIsLoaded(true);\n                setItems(data);\n                setLogID(logId);\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n        */\n        setIsLoaded(true);\n        setItems(data);\n        setLogID(logId);\n    })\n\n    const updateLog = (groupTitle, label, selected, set) => {\n        log[groupTitle][label] = selected;\n        if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n            setLog(log);\n        }\n    }\n    const getStateLog = () => log;\n          \n    console.log(`LoggerFunctional ===> ${JSON.stringify(items, null, 2)}`);\n    let appInterface = <div className=\"App-content fadeIn\">\n                            <div className=\"flex3Column\"></div>\n                            <div className=\"flex3Column\">\n                                <Loader />\n                            </div>\n                            <div className=\"flex3Column\"></div>\n                        </div>;\n    if (isLoaded) {\n        console.log(`LoggerFunctional => -> \\nSPOT: ${spot}\\nlogId: ${logId}`);\n        appInterface = <div className=\"App-content fadeIn\">\n            <div className=\"flex3Column\"></div>\n            <div className=\"flex3Column\">\n                <LogEntry\n                    logId={logID}\n                    onChange={updateLog} \n                    getStateLog={getStateLog} \n                    title=\"Session Log\" \n                    message=\"Add your session data\"  \n                    buttonLabel=\"submit\" \n                    items={items}\n                />\n            </div>\n            <div className=\"flex3Column\"></div>\n        </div>\n        \n    }\n    return (\n        appInterface            \n    )\n    \n}\nexport default Logger;"]},"metadata":{},"sourceType":"module"}