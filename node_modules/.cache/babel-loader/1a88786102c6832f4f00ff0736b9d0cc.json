{"ast":null,"code":"var CalculateDistance=function CalculateDistance(state,item){var latitude=state.latitude,longitude=state.longitude;var lat1=item.latitude;var lat2=latitude;var lon1=item.longitude;var lon2=longitude;var unit=\"Miles\";//console.log(`POOP latitude: ${latitude}\\nlongitude: ${longitude}\\nSTATE: ${JSON.stringify(state, null,2)}`)\nif(lat1===lat2&&lon1===lon2){return 0;}else{var radlat1=Math.PI*lat1/180;var radlat2=Math.PI*lat2/180;var theta=lon1-lon2;var radtheta=Math.PI*theta/180;var dist=Math.sin(radlat1)*Math.sin(radlat2)+Math.cos(radlat1)*Math.cos(radlat2)*Math.cos(radtheta);if(dist>1){dist=1;}dist=Math.acos(dist);dist=dist*180/Math.PI;dist=dist*60*1.1515;dist=dist.toFixed(1);if(unit===\"Kilometers\"){dist=dist*1.609344;}if(unit===\"Nautical\"){dist=dist*0.8684;}//console.log(`DISTANCE => ${dist}`)\nreturn dist;}};export default CalculateDistance;","map":{"version":3,"names":["CalculateDistance","state","item","latitude","longitude","lat1","lat2","lon1","lon2","unit","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","toFixed"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/CalculateDistance.js"],"sourcesContent":["const CalculateDistance = (state, item) => {\n        \n    const { latitude, longitude } = state;\n    const lat1 = item.latitude;\n    const lat2 = latitude;\n    const lon1 = item.longitude;\n    const lon2 = longitude;\n    const unit = \"Miles\"\n    //console.log(`POOP latitude: ${latitude}\\nlongitude: ${longitude}\\nSTATE: ${JSON.stringify(state, null,2)}`)\n    if ((lat1 === lat2) && (lon1 === lon2)) {\n        return 0;\n    } else {\n        var radlat1 = Math.PI * lat1/180;\n        var radlat2 = Math.PI * lat2/180;\n        var theta = lon1-lon2;\n        var radtheta = Math.PI * theta/180;\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n        if (dist > 1) {\n            dist = 1;\n        }\n        dist = Math.acos(dist);\n        dist = dist * 180/Math.PI;\n        dist = dist * 60 * 1.1515;\n        dist = dist.toFixed(1);\n        if (unit===\"Kilometers\") { dist = dist * 1.609344 }\n        if (unit===\"Nautical\") { dist = dist * 0.8684 }\n        //console.log(`DISTANCE => ${dist}`)\n        return dist;\n    }\n}\nexport default CalculateDistance"],"mappings":"AAAA,GAAM,CAAAA,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAIC,KAAK,CAAEC,IAAI,CAAK,CAEvC,GAAQ,CAAAC,QAAQ,CAAgBF,KAAK,CAA7BE,QAAQ,CAAEC,SAAS,CAAKH,KAAK,CAAnBG,SAAS,CAC3B,GAAM,CAAAC,IAAI,CAAGH,IAAI,CAACC,QAAQ,CAC1B,GAAM,CAAAG,IAAI,CAAGH,QAAQ,CACrB,GAAM,CAAAI,IAAI,CAAGL,IAAI,CAACE,SAAS,CAC3B,GAAM,CAAAI,IAAI,CAAGJ,SAAS,CACtB,GAAM,CAAAK,IAAI,CAAG,OAAO,CACpB;AACA,GAAKJ,IAAI,GAAKC,IAAI,EAAMC,IAAI,GAAKC,IAAK,CAAE,CACpC,MAAO,EAAC,CACZ,CAAC,IAAM,CACH,GAAI,CAAAE,OAAO,CAAGC,IAAI,CAACC,EAAE,CAAGP,IAAI,CAAC,GAAG,CAChC,GAAI,CAAAQ,OAAO,CAAGF,IAAI,CAACC,EAAE,CAAGN,IAAI,CAAC,GAAG,CAChC,GAAI,CAAAQ,KAAK,CAAGP,IAAI,CAACC,IAAI,CACrB,GAAI,CAAAO,QAAQ,CAAGJ,IAAI,CAACC,EAAE,CAAGE,KAAK,CAAC,GAAG,CAClC,GAAI,CAAAE,IAAI,CAAGL,IAAI,CAACM,GAAG,CAACP,OAAO,CAAC,CAAGC,IAAI,CAACM,GAAG,CAACJ,OAAO,CAAC,CAAGF,IAAI,CAACO,GAAG,CAACR,OAAO,CAAC,CAAGC,IAAI,CAACO,GAAG,CAACL,OAAO,CAAC,CAAGF,IAAI,CAACO,GAAG,CAACH,QAAQ,CAAC,CAC7G,GAAIC,IAAI,CAAG,CAAC,CAAE,CACVA,IAAI,CAAG,CAAC,CACZ,CACAA,IAAI,CAAGL,IAAI,CAACQ,IAAI,CAACH,IAAI,CAAC,CACtBA,IAAI,CAAGA,IAAI,CAAG,GAAG,CAACL,IAAI,CAACC,EAAE,CACzBI,IAAI,CAAGA,IAAI,CAAG,EAAE,CAAG,MAAM,CACzBA,IAAI,CAAGA,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,CACtB,GAAIX,IAAI,GAAG,YAAY,CAAE,CAAEO,IAAI,CAAGA,IAAI,CAAG,QAAQ,CAAC,CAClD,GAAIP,IAAI,GAAG,UAAU,CAAE,CAAEO,IAAI,CAAGA,IAAI,CAAG,MAAM,CAAC,CAC9C;AACA,MAAO,CAAAA,IAAI,CACf,CACJ,CAAC,CACD,cAAe,CAAAhB,iBAAiB"},"metadata":{},"sourceType":"module"}