{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/weather/CitySelector.js\";\nimport React, { useState } from 'react';\nimport getKey from '../utils/KeyGenerator.js';\nimport { openweatherAPI_KEY, openweatherAPI_BASE_URL } from '../../apis/config';\nimport N from '../../assets/images/windN.png';\nimport NE from '../../assets/images/windNE.png';\nimport E from '../../assets/images/windE.png';\nimport SE from '../../assets/images/windSE.png';\nimport S from '../../assets/images/windS.png';\nimport SW from '../../assets/images/windSW.png';\nimport W from '../../assets/images/windW.png';\nimport NW from '../../assets/images/windNW.png';\n\nconst CitySelector = () => {\n  //api.openweathermap.org/data/2.5/forecast?q=London,us&appid={APIKEY}\n  //Metric\n  //api.openweathermap.org/data/2.5/forecast?q=London,us&appid={APIKEY}&units=metric\n  //Image Source\n  //http://openweathermap.org/img/wn/10d@2x.png\n  const key = openweatherAPI_KEY;\n  const baseUrl = openweatherAPI_BASE_URL;\n  const [city, setCity] = useState('Carlsbad, CA');\n  const [results, setResults] = useState('');\n  const urlEnd = `/data/2.5/forecast?q=${city},us&appid=`;\n\n  const displayResults = results => {\n    const list = results.list.map(item => {\n      const main = item.main;\n      const temp = `temp: ${main.temp}°`;\n      const feels_like = `feels like: ${main.feels_like}°`;\n      const temp_min = main.feels_like;\n      const temp_max = main.feels_like;\n      const humidity = `humidity: ${main.humidity}°`;\n      const weather = item.weather[0];\n      const mainDescription = weather.main;\n      const description = weather.description;\n      const icon = weather.icon;\n      const wind = item.wind;\n\n      const windSpeed = () => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 37\n        }\n      }, wind.speed.toFixed(0), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"copyright\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 64\n        }\n      }, \" mph\"));\n\n      const angleArray = [0, 25, 45, 65, 90, 115, 135, 160, 180, 205, 225, 250, 270, 295, 315, 340];\n      const directionArray = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n\n      const getWindDirection = direction => {\n        const windAngle = direction.toFixed(0);\n        const angleIndex = angleArray.findIndex(angle => angle >= windAngle);\n        return directionArray[angleIndex];\n      };\n\n      const windDirection = () => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 41\n        }\n      }, wind.deg, \"\\xB0\");\n\n      const windDisplay = () => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 39\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"color-yellow bold mb-10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 45\n        }\n      }, \"wind: \"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"r-5 p-10 bg-dkGreen\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 45\n        }\n      }, getWindDirection(wind.deg), windDirection(), windSpeed()));\n\n      const visibility = `visibility: ${item.visibility}`;\n      const time = item.dt_txt;\n      const cards = [description, temp, feels_like, humidity, windDisplay(), visibility];\n\n      const card = matchKind => /*#__PURE__*/React.createElement(\"div\", {\n        key: getKey(\"card\"),\n        className: \"bg-lite mr-5 ml-5 p-10 r-10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"greet\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }\n      }, matchKind));\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"width100Percant p-20 m-20 r-10 bg-dkGreen\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"color-yellow bg-green greet r-10 p-20 m-20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"color-yellow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }\n      }, time), /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }\n      }, mainDescription)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"width100Percent flexContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, cards.map(item => card(item))));\n    });\n    console.log(`display: ${JSON.stringify(results, null, 2)}`);\n    const display = list;\n    console.log(`display: ${display}`);\n    setResults(display);\n  };\n\n  const onSearch = () => {\n    fetch(`${baseUrl}${urlEnd}${key}`).then(response => response.json()) //        .then((result) => console.log(`${JSON.stringify(result,null, 2)}`))\n    .then(results => displayResults(results));\n  };\n\n  const onKeyDown = event => {\n    if (event.keyCode === 13) {\n      onSearch();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"navBranding color-yellow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, \"Search your city\"), /*#__PURE__*/React.createElement(\"input\", {\n    onKeyDown: onKeyDown,\n    value: city,\n    placeholder: \"Enter city\",\n    onChange: event => setCity(event.target.value),\n    className: \"greet p-20 r-10 w-200 brdr-green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onSearch,\n    className: \"ml-5 greet p-20 r-10 w-200 bg-green brdr-green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Check Weather\"), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"navBranding color-yellow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, \"Results:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"color-neogreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, results));\n};\n\nexport default CitySelector;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/weather/CitySelector.js"],"names":["React","useState","getKey","openweatherAPI_KEY","openweatherAPI_BASE_URL","N","NE","E","SE","S","SW","W","NW","CitySelector","key","baseUrl","city","setCity","results","setResults","urlEnd","displayResults","list","map","item","main","temp","feels_like","temp_min","temp_max","humidity","weather","mainDescription","description","icon","wind","windSpeed","speed","toFixed","angleArray","directionArray","getWindDirection","direction","windAngle","angleIndex","findIndex","angle","windDirection","deg","windDisplay","visibility","time","dt_txt","cards","card","matchKind","console","log","JSON","stringify","display","onSearch","fetch","then","response","json","onKeyDown","event","keyCode","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport getKey from '../utils/KeyGenerator.js';\nimport { openweatherAPI_KEY, openweatherAPI_BASE_URL } from '../../apis/config';\nimport N from '../../assets/images/windN.png'\nimport NE from '../../assets/images/windNE.png'\nimport E from '../../assets/images/windE.png'\nimport SE from '../../assets/images/windSE.png'\nimport S from '../../assets/images/windS.png'\nimport SW from '../../assets/images/windSW.png'\nimport W from '../../assets/images/windW.png'\nimport NW from '../../assets/images/windNW.png'\n\nconst CitySelector = () => {\n    //api.openweathermap.org/data/2.5/forecast?q=London,us&appid={APIKEY}\n    //Metric\n    //api.openweathermap.org/data/2.5/forecast?q=London,us&appid={APIKEY}&units=metric\n    //Image Source\n    //http://openweathermap.org/img/wn/10d@2x.png\n    const key = openweatherAPI_KEY;\n    const baseUrl = openweatherAPI_BASE_URL;\n\n    const [city, setCity] = useState('Carlsbad, CA');\n    const [results, setResults] = useState('');\n    const urlEnd = `/data/2.5/forecast?q=${city},us&appid=`;\n\n    const displayResults = (results) => {\n        const list = results.list.map((item) => {\n            const main = item.main;\n            const temp = `temp: ${main.temp}°`;\n            const feels_like = `feels like: ${main.feels_like}°`;\n            const temp_min = main.feels_like;\n            const temp_max = main.feels_like;\n            const humidity = `humidity: ${main.humidity}°`;\n            const weather = item.weather[0];\n            const mainDescription = weather.main;\n            const description = weather.description;\n            const icon = weather.icon;\n            const wind = item.wind;\n            const windSpeed = () => <div>\n                                        {wind.speed.toFixed(0)}<span className='copyright'> mph</span>\n                                    </div>;\n            const angleArray = [ 0, 25, 45, 65, 90, 115, 135, 160, 180, 205, 225, 250, 270, 295, 315, 340]\n            const directionArray = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n            const getWindDirection = (direction) => {\n               const windAngle = direction.toFixed(0);\n               const angleIndex = angleArray.findIndex(angle => angle >= windAngle);\n               return directionArray[angleIndex];\n            }\n            const windDirection = () => <div>{wind.deg}°</div>;\n            const windDisplay = () => <div>\n                                            <div className='color-yellow bold mb-10'>wind: </div>\n                                            <div className='r-5 p-10 bg-dkGreen'>\n                                                {getWindDirection(wind.deg)}\n                                                {windDirection()}\n                                                {windSpeed()}\n                                            </div>\n                                        </div>\n            const visibility = `visibility: ${item.visibility}`;\n            const time = item.dt_txt;\n            const cards = [description, temp, feels_like, humidity, windDisplay(), visibility]\n\n            const card = (matchKind) => <div key={getKey(\"card\")} className=\"bg-lite mr-5 ml-5 p-10 r-10\">\n                            {/*this.getMatchIcon(matchKind)*/}\n                            <div className=\"greet\">{matchKind}</div>\n                        </div>;\n            return (\n                <div className='width100Percant p-20 m-20 r-10 bg-dkGreen'>\n                    <div className='color-yellow bg-green greet r-10 p-20 m-20'>\n                        <div className='color-yellow'>{time}</div>\n                        <h1 className='white'>{mainDescription}</h1>\n                    </div>\n                    <div className=\"width100Percent flexContainer\">\n                        {cards.map((item) => card(item))}\n                    </div>\n                </div>\n            )\n        })\n        console.log(`display: ${JSON.stringify(results, null, 2)}`)\n        const display = list;\n        console.log(`display: ${display}`)\n        setResults(display)\n    }\n\n    const onSearch = () => {\n        fetch(`${baseUrl}${urlEnd}${key}`)\n        .then((response) => response.json())\n//        .then((result) => console.log(`${JSON.stringify(result,null, 2)}`))\n        .then((results) => displayResults(results));\n    };\n    const onKeyDown = (event) => {\n        if (event.keyCode === 13) {\n            onSearch();\n        }\n    };\n    return (\n        <div>\n            <h1 className='navBranding color-yellow'>Search your city</h1>\n            <input onKeyDown={onKeyDown} value={city} placeholder=\"Enter city\"\n                    onChange={(event) => setCity(event.target.value)} className=\"greet p-20 r-10 w-200 brdr-green\"/>\n            <button onClick={onSearch} className=\"ml-5 greet p-20 r-10 w-200 bg-green brdr-green\">\n                Check Weather\n            </button>\n            <h1 className='navBranding color-yellow'>Results:</h1>\n            <div className='color-neogreen'>{results}</div>\n        </div>\n    );\n};\n\nexport default CitySelector;"]},"metadata":{},"sourceType":"module"}