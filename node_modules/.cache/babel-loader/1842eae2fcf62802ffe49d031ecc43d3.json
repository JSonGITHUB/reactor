{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/SurfScores.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport LongPressButton from './LongPressButton.js';\nimport Selector from '../forms/FunctionalSelector.js';\nimport getKey from '../utils/KeyGenerator.js';\nimport ScoreCard from './ScoreCard.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SurfScores = _ref => {\n  _s();\n  let {\n    scoreTotal,\n    editPlayer,\n    deletePlayer,\n    winner,\n    updateTwoPlayerScores,\n    game,\n    surfKey,\n    setTimer,\n    time,\n    setTime,\n    heatLength,\n    sortedPlayers,\n    playerScores\n  } = _ref;\n  const initPlayers = ['You', 'Me'];\n  const [players, setPlayers] = useState(JSON.parse(localStorage.getItem('players')) || initPlayers);\n  const [surfersScores, setSurfersScores] = useState(JSON.parse(localStorage.getItem('surfersScores')) || []);\n  const [sortedScores, setSortedScores] = useState([]);\n  const [timerOn, setTimerOn] = useState(false);\n  const surfScoring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const [timesUp, setTimesUp] = useState(false);\n  useEffect(() => {\n    const playerData = players.map((player, index) => ({\n      player,\n      score: surfersScores[index]\n    }));\n    playerData.sort((a, b) => b.score - a.score);\n    const sortedPlayers = playerData.map(data => data.player);\n    const sortedScores = playerData.map(data => data.score);\n    setSortedPlayers(sortedPlayers);\n    setSortedScores(sortedScores);\n    localStorage.setItem('players', JSON.stringify(sortedPlayers));\n    localStorage.setItem('surfersScores', JSON.stringify(sortedScores));\n  }, [players, surfersScores]);\n  useEffect(() => {\n    let intervalId;\n    if (timerOn) {\n      intervalId = setInterval(() => {\n        setTime(prevTime => {\n          const newTime = prevTime - 1;\n          if (newTime <= 0) {\n            clearInterval(intervalId);\n            setTimesUp(true);\n            return 0;\n          }\n          return newTime;\n        });\n      }, 1000);\n    }\n    return () => clearInterval(intervalId);\n  }, [timerOn]);\n  useEffect(() => {\n    if (timesUp) {\n      setTimerOn(false);\n      setTime(heatLength);\n      console.log(`heatLength: ${heatLength}`);\n      setTimesUp(false);\n    }\n  }, [timesUp]);\n  const toggleTimer = () => {\n    if (timerOn) {\n      setTimerOn(false);\n    } else {\n      setTimerOn(true);\n    }\n  };\n  const findTwoHighestIndices = scores => {\n    let highestIndex = 0;\n    let secondHighestIndex = -1;\n    scores.forEach((score, index) => {\n      if (score > scores[highestIndex]) {\n        secondHighestIndex = highestIndex;\n        highestIndex = index;\n      } else if (secondHighestIndex === -1 || score > scores[secondHighestIndex]) {\n        secondHighestIndex = index;\n      }\n    });\n    return [highestIndex, secondHighestIndex];\n  };\n  const getWave = (playerId, index, score) => {\n    console.log(`getWave => playerId: ${playerId} index: ${index} score: ${score}`);\n    const highestScores = findTwoHighestIndices(playerScores[playerId].scores);\n    const highestId = highestScores[0];\n    const secondHighestId = highestScores[1];\n    const firstScore = index === highestId ? true : false;\n    const secondScore = index === secondHighestId ? true : false;\n    const getClasses = firstScore || secondScore ? 'greet bold color-neogreen p-5' : 'greet color-light p-5';\n    const wave = /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"greet bold color-yellow bg-dkYellow w-100 p-5\",\n        children: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: getClasses,\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 22\n    }, this);\n    return wave;\n  };\n  const addScoreForPlayer = (players, playerIndex, score) => {\n    if (playerIndex >= 0 && playerIndex < players.length) {\n      players[playerIndex].scores.push(score);\n    }\n  };\n  //addScoreForPlayer(players, 0, 94);\n  // Find the indices of the two highest scores for each player\n  const getTwoHighestScores = playerIndex => {\n    const player = playerScores[playerIndex];\n    const [highestIndex, secondHighestIndex] = findTwoHighestIndices(playerScores[playerIndex].scores);\n    console.log(`${player.name}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n    return {\n      'highScoreIndex': highestIndex,\n      'secondHighScoreIndex': secondHighestIndex\n    };\n  };\n  const floatDecimalOneDigit = number => {\n    if (Number.isInteger(number) && number >= 10 && number <= 99) {\n      return number / 10;\n    } else {\n      return null;\n    }\n  };\n  const getSurfTotal = (player, index) => {\n    let total = 0;\n    const score = index => localStorage.getItem(surfKey(player, index)) || 0;\n    const addToTotal = value => total = total + value;\n    surfScoring.map((target, index) => {\n      console.log(`getSurfTotal=> ${surfKey(player, index)} ${index}: ${total}`);\n      addToTotal(Number(score(index)));\n    });\n    //console.log(`getsurfTotalplayer=> ${player}: ${total}`)\n    return total;\n  };\n  const scorecard = (player, index, score) => {\n    console.log(`${game} - scorecard => player:${player} index: ${index} score: ${score}`);\n    return /*#__PURE__*/_jsxDEV(ScoreCard, {\n      game: game,\n      player: player,\n      index: index,\n      editPlayer: editPlayer,\n      deletePlayer: deletePlayer,\n      updateTwoPlayerScores: updateTwoPlayerScores,\n      winner: winner\n    }, getKey(player), false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 16\n    }, this);\n  };\n  const surfScores = surfScoring.map((wave, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flexContainer width-100-percent\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex3Column p-5\",\n      children: scorecard(index, index)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-20 r-5 font50 color-yellow m-auto\",\n      children: wave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex3Column p-5\",\n      children: scorecard(index, index)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)]\n  }, getKey(wave), true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 57\n  }, this));\n  const getSurfScore = index => {\n    const newPlayer = {\n      'name': players[index],\n      'scores': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    };\n    if (playerScores.length < players.length) {\n      playerScores.push(newPlayer);\n    }\n    const scoreTotal = floatDecimalOneDigit(Number(playerScores[index].scores[getTwoHighestScores(index).highScoreIndex])) + floatDecimalOneDigit(Number(playerScores[index].scores[getTwoHighestScores(index).secondHighScoreIndex]));\n    return scoreTotal;\n  };\n  const surfClass = playerIndex => 'flex3Column p-20 size25 bold' + (isWinner(playerIndex) ? ' color-neogreen shakingShaka mt-20' : '');\n  const surfScoreboard = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flexContainer glassy width-100-percent mb-20 bg-green r-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: surfClass(0),\n        children: [players[0], \":\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-yellow mt-10\",\n          children: getSurfTotal(players[0], 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 64\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-20 bg-yellow navBranding w-200\",\n        children: \"vs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: surfClass(1),\n        children: [players[1], \":\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-yellow mt-10\",\n          children: getSurfTotal(players[1], 1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 64\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }, this), surfScores]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 28\n  }, this);\n  const getTimerButtonClasses = () => {\n    const timerButtonClasses = timerOn ? 'bg-red m-10 r-10 bold size20 p-20 color-light' : 'bg-green m-10 r-10 bold size20 p-20 color-light';\n    return timerButtonClasses;\n  };\n  const getTimerClasses = () => {\n    const timerClasses = time < 120 ? 'blinking-fade' : '';\n    return timerClasses;\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: getTimerButtonClasses(),\n      onClick: () => toggleTimer(),\n      children: timerOn ? 'STOP' : 'START'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-dkBlue m-10 r-10 bold size20 p-20 color-light0\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: getTimerClasses(),\n        children: formatTime(time)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 84\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexContainer color-yellow bold greet ml-10 mr-10\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-10 p-10 w-100 bg-dkGreen m-1 r-5-lft\",\n          children: \"Rank\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex3ColumnLeft m-1 p-10 bg-dkGreen m-1\",\n          children: \"Athlete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex3ColumnRight mr-10 p-10 bg-dkGreen m-1 r-5-rt\",\n          children: \"Total\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 12\n  }, this);\n};\n_s(SurfScores, \"kXP/uDsXHWh0ejDwSVkWUixw7cA=\");\n_c = SurfScores;\nexport default SurfScores;\nvar _c;\n$RefreshReg$(_c, \"SurfScores\");","map":{"version":3,"names":["React","useState","useEffect","LongPressButton","Selector","getKey","ScoreCard","jsxDEV","_jsxDEV","SurfScores","_ref","_s","scoreTotal","editPlayer","deletePlayer","winner","updateTwoPlayerScores","game","surfKey","setTimer","time","setTime","heatLength","sortedPlayers","playerScores","initPlayers","players","setPlayers","JSON","parse","localStorage","getItem","surfersScores","setSurfersScores","sortedScores","setSortedScores","timerOn","setTimerOn","surfScoring","timesUp","setTimesUp","playerData","map","player","index","score","sort","a","b","data","setSortedPlayers","setItem","stringify","intervalId","setInterval","prevTime","newTime","clearInterval","console","log","toggleTimer","findTwoHighestIndices","scores","highestIndex","secondHighestIndex","forEach","getWave","playerId","highestScores","highestId","secondHighestId","firstScore","secondScore","getClasses","wave","class","children","className","fileName","_jsxFileName","lineNumber","columnNumber","addScoreForPlayer","playerIndex","length","push","getTwoHighestScores","name","floatDecimalOneDigit","number","Number","isInteger","getSurfTotal","total","addToTotal","value","target","scorecard","surfScores","getSurfScore","newPlayer","highScoreIndex","secondHighScoreIndex","surfClass","isWinner","surfScoreboard","Fragment","getTimerButtonClasses","timerButtonClasses","getTimerClasses","timerClasses","onClick","formatTime","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/SurfScores.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport LongPressButton from './LongPressButton.js';\nimport Selector from '../forms/FunctionalSelector.js';\nimport getKey from '../utils/KeyGenerator.js';\nimport ScoreCard from './ScoreCard.js';\n\nconst SurfScores = ({ scoreTotal, editPlayer, deletePlayer, winner, updateTwoPlayerScores, game, surfKey, setTimer, time, setTime, heatLength, sortedPlayers, playerScores}) => {\n\n    const initPlayers = ['You', 'Me'];\n    const [players, setPlayers] = useState(JSON.parse(localStorage.getItem('players')) || initPlayers);\n    const [surfersScores, setSurfersScores] = useState(JSON.parse(localStorage.getItem('surfersScores')) || [])\n    const [sortedScores, setSortedScores] = useState([]);\n    const [timerOn, setTimerOn] = useState(false);\n    const surfScoring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const [timesUp, setTimesUp] = useState(false);\n    \n    useEffect(() => {\n\n        const playerData = players.map((player, index) => ({ player, score: surfersScores[index] }));\n        playerData.sort((a, b) => b.score - a.score);\n\n        const sortedPlayers = playerData.map((data) => data.player);\n        const sortedScores = playerData.map((data) => data.score);\n\n        setSortedPlayers(sortedPlayers);\n        setSortedScores(sortedScores);\n\n        localStorage.setItem('players', JSON.stringify(sortedPlayers));\n        localStorage.setItem('surfersScores', JSON.stringify(sortedScores));\n\n    }, [players, surfersScores]);\n\n    useEffect(() => {\n        let intervalId;\n        if (timerOn) {\n            intervalId = setInterval(() => {\n                setTime((prevTime) => {\n                    const newTime = prevTime - 1;\n                    if (newTime <= 0) {\n                        clearInterval(intervalId);\n                        setTimesUp(true);\n                        return 0;\n                    }\n                    return newTime;\n                });\n            }, 1000);\n        }\n\n        return () => clearInterval(intervalId);\n    }, [timerOn]);\n\n    useEffect(() => {\n        if (timesUp) {\n            setTimerOn(false);\n            setTime(heatLength);\n            console.log(`heatLength: ${heatLength}`)\n            setTimesUp(false);\n        }\n    }, [timesUp]);\n\n    const toggleTimer = () => {\n        if (timerOn) {\n            setTimerOn(false)\n        } else {\n            setTimerOn(true)\n        }\n    }\n\n    const findTwoHighestIndices = (scores) => {\n        let highestIndex = 0;\n        let secondHighestIndex = -1;\n\n        scores.forEach((score, index) => {\n            if (score > scores[highestIndex]) {\n                secondHighestIndex = highestIndex;\n                highestIndex = index;\n            } else if (secondHighestIndex === -1 || score > scores[secondHighestIndex]) {\n                secondHighestIndex = index;\n            }\n        });\n\n        return [highestIndex, secondHighestIndex];\n    };\n\n    const getWave = (playerId, index, score) => {\n        console.log(`getWave => playerId: ${playerId} index: ${index} score: ${score}`);\n        const highestScores = findTwoHighestIndices(playerScores[playerId].scores);\n        const highestId = highestScores[0];\n        const secondHighestId = highestScores[1];\n        const firstScore = (index === highestId) ? true : false;\n        const secondScore = (index === secondHighestId) ? true : false;\n        const getClasses = (firstScore || secondScore) ? 'greet bold color-neogreen p-5' : 'greet color-light p-5';\n        const wave = <div class=\"column\">\n            <div className='greet bold color-yellow bg-dkYellow w-100 p-5'>{index + 1}</div>\n            <div className={getClasses}>{score}</div>\n        </div>\n        return wave\n    }\n\n    const addScoreForPlayer = (players, playerIndex, score) => {\n        if (playerIndex >= 0 && playerIndex < players.length) {\n            players[playerIndex].scores.push(score);\n        }\n    };\n    //addScoreForPlayer(players, 0, 94);\n    // Find the indices of the two highest scores for each player\n    const getTwoHighestScores = (playerIndex) => {\n        const player = playerScores[playerIndex];\n        const [highestIndex, secondHighestIndex] = findTwoHighestIndices(playerScores[playerIndex].scores);\n        console.log(`${player.name}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n        return {\n            'highScoreIndex': highestIndex,\n            'secondHighScoreIndex': secondHighestIndex\n        }\n    }\n    const floatDecimalOneDigit = (number) => {\n        if (Number.isInteger(number) && number >= 10 && number <= 99) {\n            return number / 10;\n        } else {\n            return null;\n        }\n    };\n\n    const getSurfTotal = (player, index) => {\n        let total = 0;\n        const score = (index) => localStorage.getItem(surfKey(player, index)) || 0;\n        const addToTotal = (value) => total = total + value;\n        surfScoring.map((target, index) => {\n            console.log(`getSurfTotal=> ${surfKey(player, index)} ${index}: ${total}`)\n            addToTotal(Number(score(index)))\n        }\n        );\n        //console.log(`getsurfTotalplayer=> ${player}: ${total}`)\n        return total;\n    }\n\n    const scorecard = (player, index, score) => {\n        \n        console.log(`${game} - scorecard => player:${player} index: ${index} score: ${score}`)\n        return <ScoreCard\n            game={game}\n            player={player}\n            index={index}\n            editPlayer={editPlayer}\n            deletePlayer={deletePlayer}\n            updateTwoPlayerScores={updateTwoPlayerScores}\n            winner={winner}\n            key={getKey(player)}\n        />\n\n    }\n\n    const surfScores = surfScoring.map((wave, index) => <div className='flexContainer width-100-percent' key={getKey(wave)}>\n            <div className='flex3Column p-5'>\n                {scorecard(index, index)}\n            </div>\n            <div className='p-20 r-5 font50 color-yellow m-auto'>\n                {wave}\n            </div>\n            <div className='flex3Column p-5'>\n                {scorecard(index, index)}\n            </div>\n        </div>);\n\n    const getSurfScore = (index) => {\n        const newPlayer = {\n            'name': players[index],\n            'scores': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        }\n        if (playerScores.length < players.length) {\n            playerScores.push(newPlayer)\n        }\n        const scoreTotal = floatDecimalOneDigit(Number(playerScores[index].scores[getTwoHighestScores(index).highScoreIndex])) + floatDecimalOneDigit(Number(playerScores[index].scores[getTwoHighestScores(index).secondHighScoreIndex]));\n        return scoreTotal;\n    };\n\n    const surfClass = (playerIndex) => 'flex3Column p-20 size25 bold' + ((isWinner(playerIndex)) ? ' color-neogreen shakingShaka mt-20' : '');\n        \n    const surfScoreboard = <React.Fragment>\n                <div className='flexContainer glassy width-100-percent mb-20 bg-green r-10'>\n                    <div className={surfClass(0)}>{players[0]}:<div className='color-yellow mt-10'>{getSurfTotal(players[0], 0)}</div></div>\n                    <div className='p-20 bg-yellow navBranding w-200'>vs</div>\n                    <div className={surfClass(1)}>{players[1]}:<div className='color-yellow mt-10'>{getSurfTotal(players[1], 1)}</div></div>\n                </div>\n                {surfScores}\n            </React.Fragment>\n        \n    const getTimerButtonClasses = () => {\n        const timerButtonClasses = timerOn ? 'bg-red m-10 r-10 bold size20 p-20 color-light' : 'bg-green m-10 r-10 bold size20 p-20 color-light';\n        return timerButtonClasses;\n    }\n    const getTimerClasses = () => {\n        const timerClasses = (time < 120) ? 'blinking-fade' : '';\n        return timerClasses;\n    }\n\n    return <React.Fragment>\n                <div className={getTimerButtonClasses()} onClick={() => toggleTimer()}>\n                    {(timerOn) ? 'STOP' : 'START'}\n                </div>\n                <div className='bg-dkBlue m-10 r-10 bold size20 p-20 color-light0'><span className={getTimerClasses()}>{formatTime(time)}</span></div>\n                <div>\n                    <div className='flexContainer color-yellow bold greet ml-10 mr-10'>\n                        <div className='ml-10 p-10 w-100 bg-dkGreen m-1 r-5-lft'>Rank</div>\n                        <div className='flex3ColumnLeft m-1 p-10 bg-dkGreen m-1'>Athlete</div>\n                        <div className='flex3ColumnRight mr-10 p-10 bg-dkGreen m-1 r-5-rt'>Total</div>\n                    </div>\n                </div>\n\n            </React.Fragment>\n\n}\n   \nexport default SurfScores;"],"mappings":"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"},"metadata":{},"sourceType":"module"}