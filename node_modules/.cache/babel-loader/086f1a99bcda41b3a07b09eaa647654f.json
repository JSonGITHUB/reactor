{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/Translate.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport config from './apis/config';\n\nconst Translate = ({\n  language,\n  text\n}) => {\n  console.log(`language: ${JSON.stringify(language, null, 2)}`);\n  const [translated, setTranslated] = useState('');\n  const [debouncedText, setDebouncedText] = useState(text);\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      setDebouncedText(text);\n    }, 800);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [text]);\n  useEffect(() => {\n    const getTranslation = async () => {\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n      const {\n        data\n      } = await axios.post(proxyurl + config.googleAPI_BASE_URL, {}, {\n        params: {\n          q: debouncedText,\n          source: language.source,\n          target: language.value,\n          key: config.googleAPI_KEY\n        }\n      }\n      /*\n                      headers: {\"X-HTTP-Method-Override\":\"GET\"},\n                      url: \"https://www.googleapis.com/language/translate/v2\",\n                      dataType: \"jsonp\",\n                      data: { key: config.googleAPI_KEY,\n                              source: SOURCE_LANGUAGE,\n                              target: language.value,\n                              q: debouncedText },\n                      success: function(result){\n                          if(!result.error){\n                          // translated text in \n                          // result.data.translations[0].translatedText\n                          }\n                      }\n      */\n      );\n      setTranslated(data.data.translations[0].translatedText);\n    };\n\n    getTranslation();\n  }, [language, debouncedText]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ui bg-dkGreen color-neogreen p-10 r-5 mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, translated);\n};\n\nexport default Translate;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/Translate.js"],"names":["React","useState","useEffect","axios","config","Translate","language","text","console","log","JSON","stringify","translated","setTranslated","debouncedText","setDebouncedText","timerId","setTimeout","clearTimeout","getTranslation","proxyurl","data","post","googleAPI_BASE_URL","params","q","source","target","value","key","googleAPI_KEY","translations","translatedText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAAsB;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAa,aAAYC,IAAI,CAACC,SAAL,CAAeL,QAAf,EAAwB,IAAxB,EAA6B,CAA7B,CAAgC,EAAzD;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAACM,IAAD,CAAlD;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMc,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC7BF,MAAAA,gBAAgB,CAACR,IAAD,CAAhB;AACH,KAFyB,EAEvB,GAFuB,CAA1B;AAGA,WAAO,MAAM;AACTW,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACH,KAFD;AAGH,GAPQ,EAOP,CAACT,IAAD,CAPO,CAAT;AASAL,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMiB,cAAc,GAAG,YAAY;AAC/B,YAAMC,QAAQ,GAAG,sCAAjB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMlB,KAAK,CAACmB,IAAN,CAClBF,QAAQ,GAAGhB,MAAM,CAACmB,kBADA,EAEnB,EAFmB,EAGnB;AACIC,QAAAA,MAAM,EAAE;AACJC,UAAAA,CAAC,EAAEX,aADC;AAEJY,UAAAA,MAAM,EAAEpB,QAAQ,CAACoB,MAFb;AAGJC,UAAAA,MAAM,EAAErB,QAAQ,CAACsB,KAHb;AAIJC,UAAAA,GAAG,EAAEzB,MAAM,CAAC0B;AAJR;AADZ;AAQA;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBmC,OAAvB;AA2BAjB,MAAAA,aAAa,CAACQ,IAAI,CAACA,IAAL,CAAUU,YAAV,CAAuB,CAAvB,EAA0BC,cAA3B,CAAb;AACH,KA9BD;;AA+BAb,IAAAA,cAAc;AACjB,GAjCQ,EAiCN,CAACb,QAAD,EAAWQ,aAAX,CAjCM,CAAT;AAkCA,sBACI;AAAK,IAAA,SAAS,EAAC,4CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6DF,UAA7D,CADJ;AAGH,CAnDD;;AAqDA,eAAeP,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport config from './apis/config';\n\nconst Translate = ({language, text}) => {\n    console.log(`language: ${JSON.stringify(language,null,2)}`)\n    const [translated, setTranslated] = useState('');\n    const [debouncedText, setDebouncedText] = useState(text);\n    \n    useEffect(() => {\n        const timerId = setTimeout(() => {\n            setDebouncedText(text);\n        }, 800);\n        return () => {\n            clearTimeout(timerId);\n        };\n    },[text]);\n    \n    useEffect(() => {\n        const getTranslation = async () => {\n            const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n            const { data } = await axios.post(\n                (proxyurl + config.googleAPI_BASE_URL), \n                {}, \n                {\n                    params: {\n                        q: debouncedText,\n                        source: language.source,\n                        target: language.value,\n                        key: config.googleAPI_KEY\n                    },\n                }\n                /*\n                                headers: {\"X-HTTP-Method-Override\":\"GET\"},\n                                url: \"https://www.googleapis.com/language/translate/v2\",\n                                dataType: \"jsonp\",\n                                data: { key: config.googleAPI_KEY,\n                                        source: SOURCE_LANGUAGE,\n                                        target: language.value,\n                                        q: debouncedText },\n                                success: function(result){\n                                    if(!result.error){\n                                    // translated text in \n                                    // result.data.translations[0].translatedText\n                                    }\n                                }\n                */\n            );\n            setTranslated(data.data.translations[0].translatedText);\n        };\n        getTranslation();\n    }, [language, debouncedText]);\n    return (\n        <div className='ui bg-dkGreen color-neogreen p-10 r-5 mt-5'>{translated}</div>\n    )\n};\n\nexport default Translate;"]},"metadata":{},"sourceType":"module"}