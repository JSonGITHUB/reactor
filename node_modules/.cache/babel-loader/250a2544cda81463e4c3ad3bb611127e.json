{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/SurfingScores.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport getKey from '../utils/KeyGenerator.js';\nimport jerseyColors from './JerseyColors.js';\nimport SurfScoringLogic from './SurfScoringLogic.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SurfingScores = (players, index, surfScoring, setPlayers, editPlayer, deletePlayer) => {\n  _s();\n  const [state, setState] = useState({\n    editIndex: null,\n    showButtons: false\n  });\n  const [timer, setTimer] = useState(null);\n  const [showButtons, setShowButtons] = useState(false);\n  const handleTouchStart = () => {\n    console.log(`handleTouchStart`);\n    setTimer(setTimeout(() => setShowButtons(true), 1000));\n  };\n  const handleTouchEnd = () => {\n    clearTimeout(timer);\n    //setShowButtons(false);\n  };\n\n  const rank = ['st', 'nd', 'rd', 'th'];\n  const findTwoHighestIndices = scores => {\n    const newScores = scores !== undefined ? scores : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    let highestIndex = -1;\n    let secondHighestIndex = -1;\n    let highestScore = -Infinity;\n    let secondHighestScore = -Infinity;\n    for (let i = 0; i < newScores.length; i++) {\n      if (newScores[i] > highestScore) {\n        secondHighestIndex = highestIndex;\n        secondHighestScore = highestScore;\n        highestIndex = i;\n        highestScore = newScores[i];\n      } else if (newScores[i] > secondHighestScore) {\n        secondHighestIndex = i;\n        secondHighestScore = newScores[i];\n      }\n    }\n    return [highestIndex, secondHighestIndex];\n  };\n  const getTwoHighestScores = () => {\n    const player = players[index];\n    const scores = player.surfScores;\n    const [highestIndex, secondHighestIndex] = findTwoHighestIndices(scores);\n    //console.log(`getTwoHighestScores => playerIndex: ${index} player: ${JSON.stringify(player,null,2)} name: ${(player.player || player.name)}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n    return {\n      highScoreIndex: highestIndex,\n      secondHighScoreIndex: secondHighestIndex\n    };\n  };\n  const getScoreTotal = index => {\n    const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n    const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n    const score = highestScore + secondHighestScore;\n    console.log(`getScoreTotal => player: ${index} score: ${score}`);\n    return score;\n  };\n  const highestScore = playersArray => {\n    //console.log(`highestScore = (index: ${index}, playersArray: ${JSON.stringify(playersArray, null, 2)})`)\n    return playersArray[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n  };\n  const secondHighestScore = playersArray => playersArray[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n  const scoreTotal = (index, playersArray) => Number(highestScore(playersArray) + secondHighestScore(playersArray)).toFixed(2);\n  const setSurfScore = (playerId, index, score) => {\n    const newScore = prompt(`Enter ${players[playerId].player || players[playerId].name}'s score for wave ${index + 1}: `, Number(score || ''));\n    const newPlayers = [...players];\n    const currentScore = newPlayers[playerId].surfScores[index];\n    const edit = currentScore !== '' && currentScore !== 0 ? false : true;\n    newPlayers[playerId].surfScores[index] = Number(newScore);\n    newPlayers[playerId].surfScore = scoreTotal(playerId, newPlayers);\n    if ((newPlayers[playerId].surfPriority === 1 || newPlayers[playerId].surfPriority === 0) && edit) {\n      newPlayers.map((player, index) => {\n        if (index === playerId) {\n          player.surfPriority = players.length;\n        } else if (player.surfPriority != 0) {\n          player.surfPriority = player.surfPriority - 1;\n        }\n      });\n    }\n    const sortedPlayers = [...newPlayers];\n    sortedPlayers.sort((a, b) => b.surfScore - a.surfScore);\n    console.log('setSurfScore => sortedPlayers: ', sortedPlayers);\n    localStorage.setItem('players', JSON.stringify(sortedPlayers, null, 2));\n    setPlayers(sortedPlayers);\n  };\n  const get2ndHighestScore = playerId => {\n    const highestScores = findTwoHighestIndices(players[playerId].surfScores);\n    const secondHighestId = highestScores[1];\n    return players[playerId].surfScores[secondHighestId];\n  };\n  const getWave = (playerId, index, score) => {\n    const player = players[playerId];\n    const theScore = player.surfScores[index];\n    const highestScores = findTwoHighestIndices(players[playerId].surfScores);\n    const highestId = highestScores[0];\n    const secondHighestId = highestScores[1];\n    const firstScore = index === highestId ? true : false;\n    const secondScore = index === secondHighestId ? true : false;\n    const getClasses = firstScore || secondScore ? 'size30 bold color-neogreen p-10' : 'size30 white p-10';\n    const wave = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column r-10\",\n      onClick: () => setSurfScore(playerId, index, score),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"size30 bold color-yellow bg-dkYellow w-100 p-10\",\n        children: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `ht-40 ${getClasses}`,\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, getKey(`wave${playerId}${index}${score}`), true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 26\n    }, this);\n    return wave;\n  };\n  const selectJersey = index => {\n    const newPlayers = [...players];\n    newPlayers[index].surfJerseyColor = Number(newPlayers[index].surfJerseyColor) + 1;\n    newPlayers[index].surfJerseyColor = newPlayers[index].surfJerseyColor > jerseyColors.length - 1 ? 0 : newPlayers[index].surfJerseyColor;\n    localStorage.setItem('players', JSON.stringify(newPlayers));\n    setPlayers(newPlayers);\n  };\n  const isTieScore = index => {\n    const score = scoreTotal(index, players);\n    if (index !== 0) {\n      if (score === scoreTotal(index - 1, players)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  const editSurfer = index => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: alert(`Subtract ${index}`),\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: alert(`Add ${index}`),\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 39\n  }, this);\n  const getSurfTotal = player => {\n    let total = 0;\n    const score = index => player.surfScores[index];\n    const addToTotal = value => total = total + value;\n    surfScoring.map((target, index) => {\n      //console.log(`getSurfTotal => player: ${player.name} index: ${index} score: ${score(index)}`)\n      addToTotal(Number(score(index)));\n    });\n    return total;\n  };\n  const surferScores = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `flexContainer r-10 ml-10 mr-10 mb--10 color-dark text-outline-light bg-${jerseyColors[0] || jerseyColors[0]}`,\n      onTouchStart: () => handleTouchStart(index),\n      onTouchEnd: handleTouchEnd,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex2Column contentLeft r-10-lft m-0 w-75 p-10`,\n        onClick: () => selectJersey(index),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"size25 mt--10\",\n            children: isTieScore(index) && index !== 0 ? index : index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"size15 mt--10\",\n            children: rank[isTieScore(index) && index !== 0 ? index : index > 2 ? 3 : index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"size30 mt-5 mb-5\",\n          children: (players[index].player || players[index].name).split(' ')[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"size20\",\n          children: (players[index].player || players[index].name).split(' ')[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `r-10-rt flex2Column contentRight m-0 mr-10 pb-10 pl-10 pr-10 pt-15`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"size40 bold\",\n          children: getSurfTotal(players[index])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-10 bold\",\n          children: /*#__PURE__*/_jsxDEV(SurfScoringLogic, {\n            index: index,\n            completed: (time = 0) ? true : false,\n            players: players,\n            setPlayers: setPlayers,\n            editPlayer: editPlayer,\n            deleteAthlete: deletePlayer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)]\n    }, getKey(`${index}${players[index].player || players[index].name}`), true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: showButtons && editSurfer(index)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-scroll color-white copyright ml-10 mr-10 mt-5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container mt-10\",\n            children: players[index].surfScores.map((score, wave) => getWave(index, wave, players[index].surfScores[wave]))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, getKey(`${index}${players[index].player || players[index].name}`), true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 36\n  }, this);\n  return surferScores();\n};\n_s(SurfingScores, \"AmNAeTid2YHvHMuSjN2UT1cCjWA=\");\n_c = SurfingScores;\nexport default SurfingScores;\nvar _c;\n$RefreshReg$(_c, \"SurfingScores\");","map":{"version":3,"names":["React","useState","useEffect","getKey","jerseyColors","SurfScoringLogic","jsxDEV","_jsxDEV","SurfingScores","players","index","surfScoring","setPlayers","editPlayer","deletePlayer","_s","state","setState","editIndex","showButtons","timer","setTimer","setShowButtons","handleTouchStart","console","log","setTimeout","handleTouchEnd","clearTimeout","rank","findTwoHighestIndices","scores","newScores","undefined","highestIndex","secondHighestIndex","highestScore","Infinity","secondHighestScore","i","length","getTwoHighestScores","player","surfScores","highScoreIndex","secondHighScoreIndex","getScoreTotal","score","playersArray","scoreTotal","Number","toFixed","setSurfScore","playerId","newScore","prompt","name","newPlayers","currentScore","edit","surfScore","surfPriority","map","sortedPlayers","sort","a","b","localStorage","setItem","JSON","stringify","get2ndHighestScore","highestScores","secondHighestId","getWave","theScore","highestId","firstScore","secondScore","getClasses","wave","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","selectJersey","surfJerseyColor","isTieScore","editSurfer","alert","getSurfTotal","total","addToTotal","value","target","surferScores","onTouchStart","onTouchEnd","split","completed","time","deleteAthlete","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/SurfingScores.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport getKey from '../utils/KeyGenerator.js';\nimport jerseyColors from './JerseyColors.js';\nimport SurfScoringLogic from './SurfScoringLogic.js';\n\nconst SurfingScores = (players, index, surfScoring, setPlayers, editPlayer, deletePlayer) => {\n        const [state, setState] = useState({\n            editIndex: null,\n            showButtons: false\n        });\n        const [timer, setTimer] = useState(null);\n        const [showButtons, setShowButtons] = useState(false);\n        const handleTouchStart = () => {\n            console.log(`handleTouchStart`)\n            setTimer(setTimeout(() => setShowButtons(true), 1000));\n        };\n    \n        const handleTouchEnd = () => {\n            clearTimeout(timer);\n            //setShowButtons(false);\n        };\n        const rank = ['st', 'nd', 'rd', 'th'];\n        \n        const findTwoHighestIndices = (scores) => {\n            const newScores = (scores !== undefined) ? scores : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n            let highestIndex = -1;\n            let secondHighestIndex = -1;\n            let highestScore = -Infinity;\n            let secondHighestScore = -Infinity;\n            for (let i = 0; i < newScores.length; i++) {\n                if (newScores[i] > highestScore) {\n                    secondHighestIndex = highestIndex;\n                    secondHighestScore = highestScore;\n                    highestIndex = i;\n                    highestScore = newScores[i];\n                } else if (newScores[i] > secondHighestScore) {\n                    secondHighestIndex = i;\n                    secondHighestScore = newScores[i];\n                }\n            }\n            return [highestIndex, secondHighestIndex];\n        };\n        const getTwoHighestScores = () => {\n            const player = players[index];\n            const scores = player.surfScores;\n            const [highestIndex, secondHighestIndex] = findTwoHighestIndices(scores);\n            //console.log(`getTwoHighestScores => playerIndex: ${index} player: ${JSON.stringify(player,null,2)} name: ${(player.player || player.name)}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n            return {\n                highScoreIndex: highestIndex,\n                secondHighScoreIndex: secondHighestIndex\n            };\n        };\n        const getScoreTotal = (index) => {\n            const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex]\n            const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex]\n            const score = (highestScore + secondHighestScore);\n            console.log(`getScoreTotal => player: ${index} score: ${score}`);\n            return score;\n        }\n        const highestScore = (playersArray) => {\n            //console.log(`highestScore = (index: ${index}, playersArray: ${JSON.stringify(playersArray, null, 2)})`)\n            return playersArray[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n        }\n        const secondHighestScore = (playersArray) => playersArray[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n        const scoreTotal = (index, playersArray) => Number(highestScore(playersArray) + secondHighestScore(playersArray)).toFixed(2);\n        \n        const setSurfScore = (playerId, index, score) => {\n\n            const newScore = prompt(`Enter ${players[playerId].player || players[playerId].name}'s score for wave ${index + 1}: `, Number(score || ''));\n            const newPlayers = [...players];\n            const currentScore = newPlayers[playerId].surfScores[index];\n            const edit = (currentScore !== '' && currentScore !== 0) ? false : true;\n            newPlayers[playerId].surfScores[index] = Number(newScore);\n            newPlayers[playerId].surfScore = scoreTotal(playerId, newPlayers);\n            if ((newPlayers[playerId].surfPriority === 1 || newPlayers[playerId].surfPriority === 0) && edit) {\n                newPlayers.map((player, index) => {\n                    if (index === playerId) {\n                        player.surfPriority = players.length;\n                    } else if (player.surfPriority != 0) {\n                        player.surfPriority = player.surfPriority - 1;\n                    }\n                });\n            }\n            const sortedPlayers = [...newPlayers];\n            sortedPlayers.sort((a, b) => b.surfScore - a.surfScore);\n\n            console.log('setSurfScore => sortedPlayers: ', sortedPlayers)\n\n            localStorage.setItem('players', JSON.stringify(sortedPlayers, null, 2));\n            setPlayers(sortedPlayers);\n        }\n        const get2ndHighestScore = (playerId) => {\n            const highestScores = findTwoHighestIndices(players[playerId].surfScores);\n            const secondHighestId = highestScores[1];\n            return players[playerId].surfScores[secondHighestId];\n        }\n        const getWave = (playerId, index, score) => {\n            const player = players[playerId];\n            const theScore = player.surfScores[index];\n            const highestScores = findTwoHighestIndices(players[playerId].surfScores);\n            const highestId = highestScores[0];\n            const secondHighestId = highestScores[1];\n            const firstScore = (index === highestId) ? true : false;\n            const secondScore = (index === secondHighestId) ? true : false;\n            const getClasses = (firstScore || secondScore) ? 'size30 bold color-neogreen p-10' : 'size30 white p-10';\n            const wave = <div className=\"column r-10\" onClick={() => setSurfScore(playerId, index, score)} key={getKey(`wave${playerId}${index}${score}`)}>\n                <div className='size30 bold color-yellow bg-dkYellow w-100 p-10'>{index + 1}</div>\n                <div className={`ht-40 ${getClasses}`}>{score}</div>\n            </div>\n            return wave\n        }\n        const selectJersey = (index) => {\n            const newPlayers = [...players];\n            newPlayers[index].surfJerseyColor = Number(newPlayers[index].surfJerseyColor) + 1;\n            newPlayers[index].surfJerseyColor = (newPlayers[index].surfJerseyColor > (jerseyColors.length - 1)) ? 0 : newPlayers[index].surfJerseyColor;\n            localStorage.setItem('players', JSON.stringify(newPlayers));\n            setPlayers(newPlayers);\n        }\n        const isTieScore = (index) => {\n            const score = scoreTotal(index, players);\n            if (index !== 0) {\n                if (score === scoreTotal(index - 1, players)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        const editSurfer = (index) => <div>\n                <button onClick={alert(`Subtract ${index}`)}>-</button>\n                <button onClick={alert(`Add ${index}`)}>+</button>\n            </div>\n        const getSurfTotal = (player) => {\n            let total = 0;\n            const score = (index) => player.surfScores[index];\n            const addToTotal = (value) => total = total + value;\n            surfScoring.map((target, index) => {\n                //console.log(`getSurfTotal => player: ${player.name} index: ${index} score: ${score(index)}`)\n                addToTotal(Number(score(index)))\n            }\n            );\n            return total;\n        }\n            \n        const surferScores = () => <div key={getKey(`${index}${(players[index].player || players[index].name)}`)}>\n            {/*<div className={`flexContainer r-10 ml-10 mr-10 mb--10 color-dark text-outline-light bg-${jerseyColors[Number(players[index].surfJerseyColor)] || jerseyColors[0]}`} key={getKey(`${index}${(player.player || player.name)}`)}  onTouchStart={() => handleTouchStart(index)} onTouchEnd={handleTouchEnd}>*/}\n            <div className={`flexContainer r-10 ml-10 mr-10 mb--10 color-dark text-outline-light bg-${jerseyColors[0] || jerseyColors[0]}`} key={getKey(`${index}${(players[index].player || players[index].name)}`)}  onTouchStart={() => handleTouchStart(index)} onTouchEnd={handleTouchEnd}>\n                <div className={`flex2Column contentLeft r-10-lft m-0 w-75 p-10`} onClick={() => selectJersey(index)}>\n                    <div>\n                        <span className='size25 mt--10'>\n                            {(isTieScore(index) && (index !== 0)) ? index : (index + 1)}\n                        </span>\n                        <span className='size15 mt--10'>\n                            {rank[(isTieScore(index) && (index !== 0)) ? index : (index > 2) ? 3 : (index)]}\n                        </span>\n                    </div>\n                    <div className='size30 mt-5 mb-5'>\n                        {(players[index].player || players[index].name).split(' ')[0]}\n                    </div>\n                    <div className='size20'>\n                        {(players[index].player || players[index].name).split(' ')[1]}\n                    </div>\n                </div>\n                <div className={`r-10-rt flex2Column contentRight m-0 mr-10 pb-10 pl-10 pr-10 pt-15`}>\n                    <div className='size40 bold'>{getSurfTotal(players[index])}</div>\n                    <div className='mt-10 bold'>\n                        <SurfScoringLogic\n                            index={index} \n                            completed={(time=0)?true:false}\n                            players={players}\n                            setPlayers={setPlayers}\n                            editPlayer={editPlayer}\n                            deleteAthlete={deletePlayer}\n                            />\n                    </div>\n                </div>\n            </div>\n            <div>\n            {showButtons && (\n                editSurfer(index)\n            )}\n            </div>\n            <div>\n                <div>\n                    <div className='h-scroll color-white copyright ml-10 mr-10 mt-5'>\n                        <div className=\"container mt-10\">\n                            {players[index].surfScores.map((score, wave) => getWave(index, wave, players[index].surfScores[wave]))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        return surferScores()\n}\nexport default SurfingScores;"],"mappings":"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"},"metadata":{},"sourceType":"module"}