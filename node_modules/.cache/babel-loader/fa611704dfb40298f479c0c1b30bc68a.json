{"ast":null,"code":"import _slicedToArray from\"/Users/js/Dev/my-first-reactor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import Loader from'../utils/Loader.js';var Geolocate=function Geolocate(_ref){var isMotionOn=_ref.isMotionOn,returnCurrentPosition=_ref.returnCurrentPosition,currentPositionExists=_ref.currentPositionExists;var _useState=useState({longitude:null,latitude:null,errorMessage:null,returnCurrentPosition:returnCurrentPosition,currentPositionExists:currentPositionExists}),_useState2=_slicedToArray(_useState,2),status=_useState2[0],setStatus=_useState2[1];var getCurrentPosition=function getCurrentPosition(){window.navigator.geolocation.getCurrentPosition(//position => console.log(position.coords.longitude),\nfunction(position){var _position$coords=position.coords,longitude=_position$coords.longitude,latitude=_position$coords.latitude;returnCurrentPosition(longitude,latitude);//console.log(`getCurrentPosition => coords ^^^^^^^^^^^ ${longitude}, ${latitude}`)\nsetStatus({longitude:longitude,latitude:latitude,errorMessage:null,returnCurrentPosition:returnCurrentPosition,currentPositionExists:currentPositionExists});/*\n                try {\n                    //if (!currentPositionExists()) {\n                        returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n                    //}\n                }catch(err) {\n                }\n                */},function(err){console.log(err);setStatus({longitude:status.longitude,latitude:status.latitude,errorMessage:err.message,returnCurrentPosition:returnCurrentPosition,currentPositionExists:currentPositionExists});});};var tick=function tick(){getCurrentPosition();};useEffect(function(){var timerID=setInterval(function(){return tick();},5000);return function cleanUp(){clearInterval(timerID);};},[]);var getLocation=function getLocation(){return\"\".concat(status.latitude.toFixed(6),\", \").concat(status.longitude.toFixed(6),\" \");};var percent=window.innerWidth<700?'twentyfivePercent mt--70 mb--70':'fiftyPercent mt--40 mb--40';var loading=function loading(){return/*#__PURE__*/React.createElement(\"div\",{className:percent},/*#__PURE__*/React.createElement(Loader,{isMotionOn:isMotionOn}));};var latlon=function latlon(){return status.latitude+\",\"+status.longitude;};var latitude=status.latitude,errorMessage=status.errorMessage;var errorExists=errorMessage?true:false;var latExists=latitude?true:false;var errMessage=errorMessage;var geolocationStatus=latExists?getLocation():loading();geolocationStatus=errorExists?\"\".concat(errMessage):geolocationStatus;/*\n    if (latExists) {\n        if (!currentPositionExists()) {\n            returnCurrentPosition(status.longitude, status.latitude);\n        }\n    }\n    */return/*#__PURE__*/React.createElement(\"div\",{className:\"color-yellow greet\"},geolocationStatus);};export default Geolocate;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js"],"names":["React","useState","useEffect","Loader","Geolocate","isMotionOn","returnCurrentPosition","currentPositionExists","longitude","latitude","errorMessage","status","setStatus","getCurrentPosition","window","navigator","geolocation","position","coords","err","console","log","message","tick","timerID","setInterval","cleanUp","clearInterval","getLocation","toFixed","percent","innerWidth","loading","latlon","errorExists","latExists","errMessage","geolocationStatus"],"mappings":"qJAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAAkE,IAA/DC,CAAAA,UAA+D,MAA/DA,UAA+D,CAAnDC,qBAAmD,MAAnDA,qBAAmD,CAA5BC,qBAA4B,MAA5BA,qBAA4B,eAEpDN,QAAQ,CAAC,CAC7BO,SAAS,CAAE,IADkB,CAE7BC,QAAQ,CAAE,IAFmB,CAG7BC,YAAY,CAAE,IAHe,CAI7BJ,qBAAqB,CAAEA,qBAJM,CAK7BC,qBAAqB,CAAEA,qBALM,CAAD,CAF4C,wCAEzEI,MAFyE,eAEjEC,SAFiE,eAUhF,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CAC7BC,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BH,kBAA7B,CACI;AACD,SAAAI,QAAQ,CAAI,sBACyBA,QAAQ,CAACC,MADlC,CACCV,SADD,kBACCA,SADD,CACYC,QADZ,kBACYA,QADZ,CAEPH,qBAAqB,CAACE,SAAD,CAAYC,QAAZ,CAArB,CACA;AACAG,SAAS,CAAC,CACNJ,SAAS,CAAEA,SADL,CAENC,QAAQ,CAAEA,QAFJ,CAGNC,YAAY,CAAE,IAHR,CAINJ,qBAAqB,CAAEA,qBAJjB,CAKNC,qBAAqB,CAAEA,qBALjB,CAAD,CAAT,CAOA;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,kBACa,CArBL,CAsBI,SAAAY,GAAG,CAAI,CACHC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACAP,SAAS,CAAC,CACNJ,SAAS,CAAEG,MAAM,CAACH,SADZ,CAENC,QAAQ,CAAEE,MAAM,CAACF,QAFX,CAGNC,YAAY,CAAES,GAAG,CAACG,OAHZ,CAINhB,qBAAqB,CAAEA,qBAJjB,CAKNC,qBAAqB,CAAEA,qBALjB,CAAD,CAAT,CAQH,CAhCL,EAkCH,CAnCD,CAoCA,GAAMgB,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACfV,kBAAkB,GACrB,CAFD,CAGAX,SAAS,CAAC,UAAM,CACZ,GAAMsB,CAAAA,OAAO,CAAGC,WAAW,CACvB,iBAAMF,CAAAA,IAAI,EAAV,EADuB,CAEvB,IAFuB,CAA3B,CAIA,MAAO,SAASG,CAAAA,OAAT,EAAoB,CACvBC,aAAa,CAACH,OAAD,CAAb,CACH,CAFD,CAGH,CARQ,CAQP,EARO,CAAT,CASA,GAAMI,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,mBAASjB,MAAM,CAACF,QAAP,CAAgBoB,OAAhB,CAAwB,CAAxB,CAAT,cAAwClB,MAAM,CAACH,SAAP,CAAiBqB,OAAjB,CAAyB,CAAzB,CAAxC,OAApB,CACA,GAAMC,CAAAA,OAAO,CAAIhB,MAAM,CAACiB,UAAP,CAAoB,GAArB,CAA4B,iCAA5B,CAAgE,4BAAhF,CACA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,sBAAM,2BAAK,SAAS,CAAEF,OAAhB,eACV,oBAAC,MAAD,EAAQ,UAAU,CAAEzB,UAApB,EADU,CAAN,EAAhB,CAGA,GAAM4B,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SAAMtB,CAAAA,MAAM,CAACF,QAAP,CAAkB,GAAlB,CAAwBE,MAAM,CAACH,SAArC,EAAf,CA/DgF,GAgExEC,CAAAA,QAhEwE,CAgE7CE,MAhE6C,CAgExEF,QAhEwE,CAgE9DC,YAhE8D,CAgE7CC,MAhE6C,CAgE9DD,YAhE8D,CAiEhF,GAAMwB,CAAAA,WAAW,CAAIxB,YAAD,CAAiB,IAAjB,CAAwB,KAA5C,CACA,GAAMyB,CAAAA,SAAS,CAAI1B,QAAD,CAAa,IAAb,CAAoB,KAAtC,CACA,GAAM2B,CAAAA,UAAU,CAAG1B,YAAnB,CACA,GAAI2B,CAAAA,iBAAiB,CAAIF,SAAD,CAAcP,WAAW,EAAzB,CAA8BI,OAAO,EAA7D,CACAK,iBAAiB,CAAIH,WAAD,WAAmBE,UAAnB,EAAkCC,iBAAtD,CACA;AACJ;AACA;AACA;AACA;AACA;AACA,MACI,mBAAO,2BAAK,SAAS,CAAC,oBAAf,EAAqCA,iBAArC,CAAP,CACH,CA9ED,CAgFA,cAAejC,CAAAA,SAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Loader from '../utils/Loader.js';\n\nconst Geolocate = ({ isMotionOn, returnCurrentPosition, currentPositionExists }) => {\n\n    const [status, setStatus] = useState({\n            longitude: null,\n            latitude: null,\n            errorMessage: null,\n            returnCurrentPosition: returnCurrentPosition,\n            currentPositionExists: currentPositionExists\n        })\n\n    const getCurrentPosition = () => {\n        window.navigator.geolocation.getCurrentPosition(\n            //position => console.log(position.coords.longitude),\n           position => {\n                const { longitude, latitude } = position.coords;\n                returnCurrentPosition(longitude, latitude);\n                //console.log(`getCurrentPosition => coords ^^^^^^^^^^^ ${longitude}, ${latitude}`)\n                setStatus({\n                    longitude: longitude,\n                    latitude: latitude,\n                    errorMessage: null,\n                    returnCurrentPosition: returnCurrentPosition,\n                    currentPositionExists: currentPositionExists\n                });\n                /*\n                try {\n                    //if (!currentPositionExists()) {\n                        returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n                    //}\n                }catch(err) {\n                }\n                */\n            },\n            err => {\n                console.log(err)\n                setStatus({\n                    longitude: status.longitude,\n                    latitude: status.latitude,\n                    errorMessage: err.message,\n                    returnCurrentPosition: returnCurrentPosition,\n                    currentPositionExists: currentPositionExists\n                });\n\n            }\n        )\n    }\n    const tick = () => {\n        getCurrentPosition();\n    }\n    useEffect(() => {     \t\t\n        const timerID = setInterval(\n            () => tick(),\n            5000\n        );\n        return function cleanUp () {\n            clearInterval(timerID);\n        }\n    },[]);\n    const getLocation = () => `${status.latitude.toFixed(6)}, ${status.longitude.toFixed(6)} `;\n    const percent = (window.innerWidth < 700) ? 'twentyfivePercent mt--70 mb--70' : 'fiftyPercent mt--40 mb--40';\n    const loading = () => <div className={percent}>\n                <Loader isMotionOn={isMotionOn}/>\n            </div>;\n    const latlon = () => status.latitude + \",\" + status.longitude;\n    const { latitude, errorMessage } = status;\n    const errorExists = (errorMessage) ? true : false;\n    const latExists = (latitude) ? true : false;\n    const errMessage = errorMessage;\n    let geolocationStatus = (latExists) ? getLocation() : loading();\n    geolocationStatus = (errorExists) ? `${errMessage}` : geolocationStatus;\n    /*\n    if (latExists) {\n        if (!currentPositionExists()) {\n            returnCurrentPosition(status.longitude, status.latitude);\n        }\n    }\n    */\n    return <div className=\"color-yellow greet\">{geolocationStatus}</div>\n}\n\nexport default Geolocate;"]},"metadata":{},"sourceType":"module"}