{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/Logger.js\";\nimport React from 'react';\nimport LogEntry from './LogEntry.js';\nimport Loader from './utils/Loader.js';\n\nclass Logger extends React.Component {\n  constructor(props) {\n    super(props);\n    this.templateData = {\n      Day: {},\n      Location: {},\n      Swell: {},\n      Wind: {},\n      Tide: {},\n      Conditions: {},\n      Comments: {}\n    };\n\n    this.getStateLog = () => this.state.log;\n\n    this.log = this.templateData;\n    this.logId = this.props.location.state === undefined ? localStorage.getItem(\"lastPostId\") : this.props.location.state.item;\n    console.log(`Logger => constructor -> props.logId: ${this.props.location.state.logId.item}`);\n    this.state = {\n      date: new Date(),\n      log: {},\n      items: [],\n      isLoaded: false,\n      logId: this.logId\n    };\n    this.updateLog = this.updateLog.bind(this);\n    this.getStateLog = this.getStateLog.bind(this);\n  }\n\n  componentDidMount() {\n    const logId = this.props.location.state === undefined ? localStorage.getItem(\"lastPostId\") : this.props.location.state.item;\n    console.log(`Logger => componentDidMount -> logId: ${logId}`);\n    let data;\n\n    const returnJSON = response => response.json();\n\n    const returnRejection = response => Promise.reject({\n      status: response.status,\n      data\n    });\n\n    const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n\n    const requestInit = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      mode: 'cors',\n      cache: 'default'\n    }; //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n    //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n\n    const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json'; //const uri = 'localhost:8080/writeSurfLog.json';\n\n    fetch(uri).then(response => validate(response)).then(data => {\n      this.setState({\n        isLoaded: true,\n        items: data,\n        logId: logId.item || logId\n      });\n    }).catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n  }\n\n  updateLog(groupTitle, label, selected, set) {\n    this.log[groupTitle][label] = selected;\n\n    if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n      this.setState({\n        log: this.log\n      });\n    }\n  }\n\n  render() {\n    let {\n      isLoaded,\n      items\n    } = this.state; //console.log(`Logger => ${JSON.stringify(this.state, null, 2)}`);\n\n    let appInterface = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-content fadeIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 33\n      }\n    }));\n\n    if (isLoaded) {\n      appInterface = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App-content fadeIn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex3Column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex3Column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(LogEntry, {\n        logId: this.state.logId,\n        onChange: this.updateLog,\n        getStateLog: this.getStateLog,\n        title: \"Session Log\",\n        message: \"Add your session data\",\n        buttonLabel: \"Submit\",\n        items: items,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex3Column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return appInterface;\n  }\n\n}\n\nexport default Logger;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/Logger.js"],"names":["React","LogEntry","Loader","Logger","Component","constructor","props","templateData","Day","Location","Swell","Wind","Tide","Conditions","Comments","getStateLog","state","log","logId","location","undefined","localStorage","getItem","item","console","date","Date","items","isLoaded","updateLog","bind","componentDidMount","data","returnJSON","response","json","returnRejection","Promise","reject","status","validate","ok","requestInit","method","headers","mode","cache","uri","fetch","then","setState","catch","err","window","pathname","groupTitle","label","selected","set","render","appInterface"],"mappings":"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","sourcesContent":["import React from 'react';\nimport LogEntry from './LogEntry.js';\nimport Loader from './utils/Loader.js';\nclass Logger extends React.Component {\n\n    templateData = {\n        Day: {},\n        Location: {},\n        Swell: {},\n        Wind: {},\n        Tide: {},\n        Conditions: {},\n        Comments: {}\n    };\n\n    constructor(props) {\n        super(props);\n        this.log = this.templateData;\n        this.logId = (this.props.location.state === undefined) ? localStorage.getItem(\"lastPostId\") : this.props.location.state.item;\n        console.log(`Logger => constructor -> props.logId: ${this.props.location.state.logId.item}`)\n        this.state = {\n            date: new Date(),\n            log: {},\n            items: [],\n            isLoaded: false,\n            logId: this.logId\n        };\n        this.updateLog = this.updateLog.bind(this);\n        this.getStateLog = this.getStateLog.bind(this);\n    }\n    componentDidMount() {\n        const logId = (this.props.location.state === undefined) ? localStorage.getItem(\"lastPostId\") : this.props.location.state.item;\n        console.log(`Logger => componentDidMount -> logId: ${logId}`)\n        let data;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        const requestInit = {\n            method:'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            cache: 'default'\n        };\n        //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n        //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        //const uri = 'localhost:8080/writeSurfLog.json';\n        fetch(uri)\n            .then(response => validate(response))\n            .then(data => {\n                this.setState({\n                    isLoaded: true,\n                    items: data,\n                    logId: logId.item || logId\n                })\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n       \n    }\n\n    updateLog(groupTitle, label, selected, set) {\n        this.log[groupTitle][label] = selected;\n        if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n            this.setState({log: this.log});\n        }\n    }\n    getStateLog = () => this.state.log;\n    \n    render() {      \n        let {isLoaded, items} = this.state;           \n        //console.log(`Logger => ${JSON.stringify(this.state, null, 2)}`);\n        let appInterface = <div className=\"App-content fadeIn\">\n                                <div className=\"flex3Column\"></div>\n                                <div className=\"flex3Column\">\n                                    <Loader />\n                                </div>\n                                <div className=\"flex3Column\"></div>\n                            </div>;\n        if (isLoaded) {\n            appInterface = <div className=\"App-content fadeIn\">\n                <div className=\"flex3Column\"></div>\n                <div className=\"flex3Column\">\n                    <LogEntry\n                        logId={this.state.logId}\n                        onChange={this.updateLog} \n                        getStateLog={this.getStateLog} \n                        title=\"Session Log\" \n                        message=\"Add your session data\"  \n                        buttonLabel=\"Submit\" \n                        items={items}\n                    />\n                </div>\n                <div className=\"flex3Column\"></div>\n            </div>\n            \n        }\n        return (\n            appInterface            \n        )\n    }\n    \n}\nexport default Logger;"]},"metadata":{},"sourceType":"module"}