{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst decompressResponse = require(\"decompress-response\");\n\nconst mimicResponse = require(\"mimic-response\");\n\nconst stream = require(\"stream\");\n\nconst util_1 = require(\"util\");\n\nconst progress_1 = require(\"./progress\");\n\nconst pipeline = util_1.promisify(stream.pipeline);\n\nexports.default = async (response, options, emitter) => {\n  var _a;\n\n  const downloadBodySize = Number(response.headers['content-length']) || undefined;\n  const progressStream = progress_1.createProgressStream('downloadProgress', emitter, downloadBodySize);\n  mimicResponse(response, progressStream);\n  const newResponse = options.decompress && options.method !== 'HEAD' ? decompressResponse(progressStream) : progressStream;\n\n  if (!options.decompress && ['gzip', 'deflate', 'br'].includes((_a = newResponse.headers['content-encoding'], _a !== null && _a !== void 0 ? _a : ''))) {\n    options.responseType = 'buffer';\n  }\n\n  emitter.emit('response', newResponse);\n  return pipeline(response, progressStream).catch(error => {\n    if (error.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      throw error;\n    }\n  });\n};","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/node_modules/got/dist/source/get-response.js"],"names":["Object","defineProperty","exports","value","decompressResponse","require","mimicResponse","stream","util_1","progress_1","pipeline","promisify","default","response","options","emitter","_a","downloadBodySize","Number","headers","undefined","progressStream","createProgressStream","newResponse","decompress","method","includes","responseType","emit","catch","error","code"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,qBAAD,CAAlC;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMK,QAAQ,GAAGF,MAAM,CAACG,SAAP,CAAiBJ,MAAM,CAACG,QAAxB,CAAjB;;AACAR,OAAO,CAACU,OAAR,GAAkB,OAAOC,QAAP,EAAiBC,OAAjB,EAA0BC,OAA1B,KAAsC;AACpD,MAAIC,EAAJ;;AACA,QAAMC,gBAAgB,GAAGC,MAAM,CAACL,QAAQ,CAACM,OAAT,CAAiB,gBAAjB,CAAD,CAAN,IAA8CC,SAAvE;AACA,QAAMC,cAAc,GAAGZ,UAAU,CAACa,oBAAX,CAAgC,kBAAhC,EAAoDP,OAApD,EAA6DE,gBAA7D,CAAvB;AACAX,EAAAA,aAAa,CAACO,QAAD,EAAWQ,cAAX,CAAb;AACA,QAAME,WAAW,GAAIT,OAAO,CAACU,UAAR,IACjBV,OAAO,CAACW,MAAR,KAAmB,MADF,GACWrB,kBAAkB,CAACiB,cAAD,CAD7B,GACgDA,cADrE;;AAEA,MAAI,CAACP,OAAO,CAACU,UAAT,IAAuB,CAAC,MAAD,EAAS,SAAT,EAAoB,IAApB,EAA0BE,QAA1B,EAAoCV,EAAE,GAAGO,WAAW,CAACJ,OAAZ,CAAoB,kBAApB,CAAL,EAA+CH,EAAE,KAAK,IAAP,IAAeA,EAAE,KAAK,KAAK,CAA3B,GAA+BA,EAA/B,GAAoC,EAAvH,EAA3B,EAAyJ;AACrJF,IAAAA,OAAO,CAACa,YAAR,GAAuB,QAAvB;AACH;;AACDZ,EAAAA,OAAO,CAACa,IAAR,CAAa,UAAb,EAAyBL,WAAzB;AACA,SAAOb,QAAQ,CAACG,QAAD,EAAWQ,cAAX,CAAR,CAAmCQ,KAAnC,CAAyCC,KAAK,IAAI;AACrD,QAAIA,KAAK,CAACC,IAAN,KAAe,4BAAnB,EAAiD;AAC7C,YAAMD,KAAN;AACH;AACJ,GAJM,CAAP;AAKH,CAhBD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst decompressResponse = require(\"decompress-response\");\nconst mimicResponse = require(\"mimic-response\");\nconst stream = require(\"stream\");\nconst util_1 = require(\"util\");\nconst progress_1 = require(\"./progress\");\nconst pipeline = util_1.promisify(stream.pipeline);\nexports.default = async (response, options, emitter) => {\n    var _a;\n    const downloadBodySize = Number(response.headers['content-length']) || undefined;\n    const progressStream = progress_1.createProgressStream('downloadProgress', emitter, downloadBodySize);\n    mimicResponse(response, progressStream);\n    const newResponse = (options.decompress &&\n        options.method !== 'HEAD' ? decompressResponse(progressStream) : progressStream);\n    if (!options.decompress && ['gzip', 'deflate', 'br'].includes((_a = newResponse.headers['content-encoding'], (_a !== null && _a !== void 0 ? _a : '')))) {\n        options.responseType = 'buffer';\n    }\n    emitter.emit('response', newResponse);\n    return pipeline(response, progressStream).catch(error => {\n        if (error.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n            throw error;\n        }\n    });\n};\n"]},"metadata":{},"sourceType":"script"}