{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/LoggerFunctional.js\";\nimport React, { useState, useEffect } from 'react';\nimport LogEntry from './LogEntryFunctional.js';\nimport Loader from '../utils/Loader.js';\nimport LogId from './LogId.js';\nimport interfaceData from './InterfaceData.js';\nimport templateData from './TemplateData.js';\n\nconst Logger = ({\n  logId,\n  location\n}) => {\n  const [status, setStatus] = useState({\n    logID: logId,\n    log: templateData,\n    spot: localStorage.getItem(\"spot\"),\n    isLoaded: false,\n    items: []\n  });\n  const logIdComponent = new LogId(status.logID);\n  useEffect(() => {\n    const {\n      state\n    } = location;\n    console.log(`LoggerFunctional => componentDidMount -> SPOT: ${status.spot}`);\n    const logId = status.logID;\n    let data = interfaceData;\n\n    const returnJSON = response => response.json();\n\n    const returnRejection = response => Promise.reject({\n      status: response.status,\n      data\n    });\n\n    const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n    /*\n    const requestInit = {\n        method:'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        mode: 'cors',\n        cache: 'default'\n    };\n    */\n    //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n    //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n\n\n    const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json'; //const uri = 'localhost:8080/writeSurfLog.json';\n\n    /*\n    fetch(uri)\n        .then(response => validate(response))\n        .then(data => {\n            setIsLoaded(true);\n            setItems(data);\n            setLogID(logId);\n        })\n        .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n    */\n\n    if (localStorage.getItem(logIdComponent.getLogId()) === null) {\n      const newId = logIdComponent.generateNewLogId();\n      setStatus({\n        logID: newId,\n        log: templateData,\n        spot: localStorage.getItem(\"spot\"),\n        isLoaded: false,\n        items: interfaceData\n      });\n    } else {\n      setStatus({\n        logID: logId,\n        log: JSON.parse(localStorage.getItem(logIdComponent.getLogId())),\n        spot: localStorage.getItem(\"spot\"),\n        isLoaded: true,\n        items: data\n      });\n    }\n  });\n\n  const updateLog = (groupTitle, label, selected, set) => {\n    const log = status.log;\n    console.log(`updateLog: `);\n    log[groupTitle][label] = selected;\n\n    if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n      setStatus({\n        logID: logId,\n        log: log,\n        spot: localStorage.getItem(\"spot\"),\n        isLoaded: true,\n        items: status.items\n      });\n    }\n  };\n\n  const getStateLog = () => status.log;\n\n  console.log(`LoggerFunctional ===> ${JSON.stringify(status.items, null, 2)}`);\n  let appInterface = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App-content fadeIn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex3Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  }));\n\n  if (status.isLoaded) {\n    console.log(`LoggerFunctional => -> \\nSPOT: ${status.spot}\\nlogId: ${status.logID}\\nlog: ${JSON.stringify(status.log, null, 2)}`);\n    appInterface = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-content fadeIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LogEntry, {\n      logId: status.logID,\n      onChange: updateLog,\n      getStateLog: getStateLog,\n      title: \"Session Log\",\n      message: \"Add your session data\",\n      buttonLabel: \"submit\",\n      items: status.items,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  return appInterface;\n};\n\nexport default Logger;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/LoggerFunctional.js"],"names":["React","useState","useEffect","LogEntry","Loader","LogId","interfaceData","templateData","Logger","logId","location","status","setStatus","logID","log","spot","localStorage","getItem","isLoaded","items","logIdComponent","state","console","data","returnJSON","response","json","returnRejection","Promise","reject","validate","ok","uri","getLogId","newId","generateNewLogId","JSON","parse","updateLog","groupTitle","label","selected","set","undefined","getStateLog","stringify","appInterface"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;;AACA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AAElC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC;AACjCY,IAAAA,KAAK,EAAEJ,KAD0B;AAEjCK,IAAAA,GAAG,EAAEP,YAF4B;AAGjCQ,IAAAA,IAAI,EAAEC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAH2B;AAIjCC,IAAAA,QAAQ,EAAE,KAJuB;AAKjCC,IAAAA,KAAK,EAAE;AAL0B,GAAD,CAApC;AAQA,QAAMC,cAAc,GAAG,IAAIf,KAAJ,CAAUM,MAAM,CAACE,KAAjB,CAAvB;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEmB,MAAAA;AAAF,QAAYX,QAAlB;AACAY,IAAAA,OAAO,CAACR,GAAR,CAAa,kDAAiDH,MAAM,CAACI,IAAK,EAA1E;AACA,UAAMN,KAAK,GAAGE,MAAM,CAACE,KAArB;AACA,QAAIU,IAAI,GAAGjB,aAAX;;AACA,UAAMkB,UAAU,GAAIC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAAjC;;AACA,UAAMC,eAAe,GAAIF,QAAD,IAAcG,OAAO,CAACC,MAAR,CAAe;AAAClB,MAAAA,MAAM,EAAEc,QAAQ,CAACd,MAAlB;AAA0BY,MAAAA;AAA1B,KAAf,CAAtC;;AACA,UAAMO,QAAQ,GAAIL,QAAD,IAAeA,QAAQ,CAACM,EAAV,GAAgBP,UAAU,CAACC,QAAD,CAA1B,GAAuCE,eAAe,CAACF,QAAD,CAArF;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACA;;;AACA,UAAMO,GAAG,GAAG,iEAAZ,CApBY,CAqBZ;;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,QAAIhB,YAAY,CAACC,OAAb,CAAqBG,cAAc,CAACa,QAAf,EAArB,MAAoD,IAAxD,EAA8D;AAC1D,YAAMC,KAAK,GAAGd,cAAc,CAACe,gBAAf,EAAd;AACAvB,MAAAA,SAAS,CAAC;AACNC,QAAAA,KAAK,EAAEqB,KADD;AAENpB,QAAAA,GAAG,EAAEP,YAFC;AAGNQ,QAAAA,IAAI,EAAEC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAHA;AAINC,QAAAA,QAAQ,EAAE,KAJJ;AAKNC,QAAAA,KAAK,EAAEb;AALD,OAAD,CAAT;AAOH,KATD,MASO;AACHM,MAAAA,SAAS,CAAC;AACNC,QAAAA,KAAK,EAAEJ,KADD;AAENK,QAAAA,GAAG,EAAEsB,IAAI,CAACC,KAAL,CAAWrB,YAAY,CAACC,OAAb,CAAqBG,cAAc,CAACa,QAAf,EAArB,CAAX,CAFC;AAGNlB,QAAAA,IAAI,EAAEC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAHA;AAINC,QAAAA,QAAQ,EAAE,IAJJ;AAKNC,QAAAA,KAAK,EAAEI;AALD,OAAD,CAAT;AAOH;AACJ,GAlDQ,CAAT;;AAoDA,QAAMe,SAAS,GAAG,CAACC,UAAD,EAAaC,KAAb,EAAoBC,QAApB,EAA8BC,GAA9B,KAAsC;AACpD,UAAM5B,GAAG,GAAGH,MAAM,CAACG,GAAnB;AACAQ,IAAAA,OAAO,CAACR,GAAR,CAAa,aAAb;AACAA,IAAAA,GAAG,CAACyB,UAAD,CAAH,CAAgBC,KAAhB,IAAyBC,QAAzB;;AACA,QAAIF,UAAU,KAAKI,SAAf,IAA4BJ,UAAU,KAAK,CAA3C,IAAgDE,QAAQ,KAAKE,SAA7D,IAA0ED,GAA9E,EAAmF;AAC/E9B,MAAAA,SAAS,CAAC;AACNC,QAAAA,KAAK,EAAEJ,KADD;AAENK,QAAAA,GAAG,EAAEA,GAFC;AAGNC,QAAAA,IAAI,EAAEC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAHA;AAINC,QAAAA,QAAQ,EAAE,IAJJ;AAKNC,QAAAA,KAAK,EAAER,MAAM,CAACQ;AALR,OAAD,CAAT;AAOH;AACJ,GAbD;;AAcA,QAAMyB,WAAW,GAAG,MAAMjC,MAAM,CAACG,GAAjC;;AAEAQ,EAAAA,OAAO,CAACR,GAAR,CAAa,yBAAwBsB,IAAI,CAACS,SAAL,CAAelC,MAAM,CAACQ,KAAtB,EAA6B,IAA7B,EAAmC,CAAnC,CAAsC,EAA3E;AACA,MAAI2B,YAAY,gBAAG;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACK;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,eAEK;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFL,eAKK;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALL,CAAnB;;AAOA,MAAInC,MAAM,CAACO,QAAX,EAAqB;AACjBI,IAAAA,OAAO,CAACR,GAAR,CAAa,kCAAiCH,MAAM,CAACI,IAAK,YAAWJ,MAAM,CAACE,KAAM,UAASuB,IAAI,CAACS,SAAL,CAAelC,MAAM,CAACG,GAAtB,EAA2B,IAA3B,EAAiC,CAAjC,CAAoC,EAA/H;AACAgC,IAAAA,YAAY,gBAAG;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACX;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW,eAEX;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AACI,MAAA,KAAK,EAAEnC,MAAM,CAACE,KADlB;AAEI,MAAA,QAAQ,EAAEyB,SAFd;AAGI,MAAA,WAAW,EAAEM,WAHjB;AAII,MAAA,KAAK,EAAC,aAJV;AAKI,MAAA,OAAO,EAAC,uBALZ;AAMI,MAAA,WAAW,EAAC,QANhB;AAOI,MAAA,KAAK,EAAEjC,MAAM,CAACQ,KAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFW,eAaX;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbW,CAAf;AAgBH;;AACD,SACI2B,YADJ;AAIH,CA/GD;;AAgHA,eAAetC,MAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport LogEntry from './LogEntryFunctional.js';\nimport Loader from '../utils/Loader.js';\nimport LogId from './LogId.js';\nimport interfaceData from './InterfaceData.js'\nimport templateData from './TemplateData.js';\nconst Logger = ({logId, location}) => {\n    \n    const [status, setStatus] = useState({\n        logID: logId,\n        log: templateData,\n        spot: localStorage.getItem(\"spot\"),\n        isLoaded: false,\n        items: [],\n\n    })\n    const logIdComponent = new LogId(status.logID);\n    \n    useEffect(() => {\n        const { state } = location;\n        console.log(`LoggerFunctional => componentDidMount -> SPOT: ${status.spot}`); \n        const logId = status.logID;\n        let data = interfaceData;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        /*\n        const requestInit = {\n            method:'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            cache: 'default'\n        };\n        */\n        //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n        //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        //const uri = 'localhost:8080/writeSurfLog.json';\n        /*\n        fetch(uri)\n            .then(response => validate(response))\n            .then(data => {\n                setIsLoaded(true);\n                setItems(data);\n                setLogID(logId);\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n        */        \n        if (localStorage.getItem(logIdComponent.getLogId()) === null) {\n            const newId = logIdComponent.generateNewLogId();\n            setStatus({\n                logID: newId,\n                log: templateData,\n                spot: localStorage.getItem(\"spot\"),\n                isLoaded: false,\n                items: interfaceData,\n            })\n        } else {\n            setStatus({\n                logID: logId,\n                log: JSON.parse(localStorage.getItem(logIdComponent.getLogId())),\n                spot: localStorage.getItem(\"spot\"),\n                isLoaded: true,\n                items: data,\n            })\n        }    \n    })\n\n    const updateLog = (groupTitle, label, selected, set) => {\n        const log = status.log;\n        console.log(`updateLog: `)\n        log[groupTitle][label] = selected;\n        if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n            setStatus({\n                logID: logId,\n                log: log,\n                spot: localStorage.getItem(\"spot\"),\n                isLoaded: true,\n                items: status.items,\n            }) \n        }\n    }\n    const getStateLog = () => status.log;\n          \n    console.log(`LoggerFunctional ===> ${JSON.stringify(status.items, null, 2)}`);\n    let appInterface = <div className=\"App-content fadeIn\">\n                            <div className=\"flex3Column\"></div>\n                            <div className=\"flex3Column\">\n                                <Loader />\n                            </div>\n                            <div className=\"flex3Column\"></div>\n                        </div>;\n    if (status.isLoaded) {\n        console.log(`LoggerFunctional => -> \\nSPOT: ${status.spot}\\nlogId: ${status.logID}\\nlog: ${JSON.stringify(status.log, null, 2)}`);\n        appInterface = <div className=\"App-content fadeIn\">\n            <div className=\"flex3Column\"></div>\n            <div className=\"flex3Column\">\n                <LogEntry\n                    logId={status.logID}\n                    onChange={updateLog} \n                    getStateLog={getStateLog} \n                    title=\"Session Log\" \n                    message=\"Add your session data\"  \n                    buttonLabel=\"submit\" \n                    items={status.items}\n                />\n            </div>\n            <div className=\"flex3Column\"></div>\n        </div>\n        \n    }\n    return (\n        appInterface            \n    )\n    \n}\nexport default Logger;"]},"metadata":{},"sourceType":"module"}