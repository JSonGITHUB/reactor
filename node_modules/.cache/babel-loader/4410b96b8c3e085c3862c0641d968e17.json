{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/PostDirectory.js\";\nimport React from 'react';\n\nclass PostDirectory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getDirectory = () => this.postDirectory;\n\n    this.removeLastId = () => this.postDirectory.pop();\n\n    this.deleteLast = () => {\n      console.log(`PostDirectory => deleteLast()`);\n      this.postDirectory = this.removeLastId();\n      localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory));\n      this.setState({\n        postDirectory: this.postDirectory\n      });\n    };\n\n    this.add = id => {\n      console.log(`PostDirectory => add(${id})`);\n      this.postDirectory.push(id);\n      localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory));\n    };\n\n    this.delete = id => {\n      console.log(`PostDirectory => delete(${id})`);\n      const index = this.postDirectory.indexOf(String(id));\n      console.log(`${index} of ${this.postDirectory.length}`);\n      this.postDirectory.splice(index, 1);\n      console.log(`${index} of ${this.postDirectory.length}`);\n      localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory));\n      localStorage.removeItem(id);\n      localStorage.setItem(\"lastPostId\", `${this.postDirectory[this.postDirectory.length - 1]}`);\n      this.setState({\n        postDirectory: this.postDirectory\n      });\n    };\n\n    this.getLastIndex = () => Number(this.state.postDirectory.length - 1);\n\n    this.getLastId = () => this.state.postDirectory[this.getLastIndex()];\n\n    this.get2ndToLastId = () => this.state.postDirectory[this.getLastIndex() - 1];\n\n    this.getStorageItem = id => localStorage.getItem(id);\n\n    this.getLastItem = () => localStorage.getItem(this.getLastId()) === null ? JSON.parse(this.getStorageItem(this.get2ndToLastId())) : JSON.parse(this.getStorageItem(this.getLastId()));\n\n    this.postDirectory = localStorage.getItem(\"postDirectory\") === null ? [] : JSON.parse(localStorage.getItem(\"postDirectory\"));\n    this.uniquePosts = [...new Set(this.postDirectory)];\n\n    const _index = this.uniquePosts.indexOf(null);\n\n    if (_index > -1) {\n      this.uniquePosts.splice(_index, 1);\n    }\n\n    localStorage.setItem(\"postDirectory\", JSON.stringify(this.uniquePosts));\n    this.state = {\n      postDirectory: this.uniquePosts\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, \"Count: \", this.state.postDirectory.length);\n  }\n\n}\n\nexport default PostDirectory;\n/* backup pre hooks 1/7/21\nimport React from 'react';\nclass PostDirectory extends React.Component {\n    constructor(props) {\n       super(props);\n       this.postDirectory = (localStorage.getItem(\"postDirectory\") === null) ? [] : JSON.parse(localStorage.getItem(\"postDirectory\"));        \n       this.uniquePosts = [...new Set(this.postDirectory)];\n       const index = this.uniquePosts.indexOf(null);\n       if (index > -1) {\n           this.uniquePosts.splice(index, 1);\n       }\n       localStorage.setItem(\"postDirectory\", JSON.stringify(this.uniquePosts))\n       this.state = {\n           postDirectory: this.uniquePosts,\n       };\n   }\n   \n    getDirectory = () => this.postDirectory;\n    removeLastId = () => this.postDirectory.pop();\n    deleteLast = () => {\n        console.log(`PostDirectory => deleteLast()`)\n        this.postDirectory = this.removeLastId();\n        localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n        this.setState({\n            postDirectory: this.postDirectory\n        }); \n    }\n    add = (id) => {\n        console.log(`PostDirectory => add(${id})`);\n        this.postDirectory.push(id);\n        localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n    }\n    delete = (id) => {\n        console.log(`PostDirectory => delete(${id})`)\n        const index = this.postDirectory.indexOf(String(id));\n        console.log(`${index} of ${this.postDirectory.length}`)\n        this.postDirectory.splice(index, 1);\n        console.log(`${index} of ${this.postDirectory.length}`)\n        localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n        localStorage.removeItem(id);\n        localStorage.setItem(\"lastPostId\", `${this.postDirectory[this.postDirectory.length-1]}`);\n        this.setState({\n            postDirectory: this.postDirectory\n        });\n    }\n    getLastIndex = () => Number(this.state.postDirectory.length-1);\n    getLastId = () => this.state.postDirectory[this.getLastIndex()];\n    get2ndToLastId = () => this.state.postDirectory[this.getLastIndex()-1];\n    getStorageItem = (id) => localStorage.getItem(id)\n    getLastItem = () => (localStorage.getItem(this.getLastId()) === null) ? JSON.parse(this.getStorageItem(this.get2ndToLastId())) : JSON.parse(this.getStorageItem(this.getLastId()));\n    render() {      \n            return <p>Count: {this.state.postDirectory.length}</p> \n    }\n    \n}\nexport default PostDirectory;\n*/","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/PostDirectory.js"],"names":["React","PostDirectory","Component","constructor","props","getDirectory","postDirectory","removeLastId","pop","deleteLast","console","log","localStorage","setItem","JSON","stringify","setState","add","id","push","delete","index","indexOf","String","length","splice","removeItem","getLastIndex","Number","state","getLastId","get2ndToLastId","getStorageItem","getItem","getLastItem","parse","uniquePosts","Set","render"],"mappings":"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","sourcesContent":["import React from 'react';\nclass PostDirectory extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.postDirectory = (localStorage.getItem(\"postDirectory\") === null) ? [] : JSON.parse(localStorage.getItem(\"postDirectory\"));        \n        this.uniquePosts = [...new Set(this.postDirectory)];\n        const index = this.uniquePosts.indexOf(null);\n        if (index > -1) {\n            this.uniquePosts.splice(index, 1);\n        }\n        localStorage.setItem(\"postDirectory\", JSON.stringify(this.uniquePosts))\n        this.state = {\n            postDirectory: this.uniquePosts,\n        };\n    }\n    \n     getDirectory = () => this.postDirectory;\n     removeLastId = () => this.postDirectory.pop();\n     deleteLast = () => {\n         console.log(`PostDirectory => deleteLast()`)\n         this.postDirectory = this.removeLastId();\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n         this.setState({\n             postDirectory: this.postDirectory\n         }); \n     }\n     add = (id) => {\n         console.log(`PostDirectory => add(${id})`);\n         this.postDirectory.push(id);\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n     }\n     delete = (id) => {\n         console.log(`PostDirectory => delete(${id})`)\n         const index = this.postDirectory.indexOf(String(id));\n         console.log(`${index} of ${this.postDirectory.length}`)\n         this.postDirectory.splice(index, 1);\n         console.log(`${index} of ${this.postDirectory.length}`)\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n         localStorage.removeItem(id);\n         localStorage.setItem(\"lastPostId\", `${this.postDirectory[this.postDirectory.length-1]}`);\n         this.setState({\n             postDirectory: this.postDirectory\n         });\n     }\n     getLastIndex = () => Number(this.state.postDirectory.length-1);\n     getLastId = () => this.state.postDirectory[this.getLastIndex()];\n     get2ndToLastId = () => this.state.postDirectory[this.getLastIndex()-1];\n     getStorageItem = (id) => localStorage.getItem(id)\n     getLastItem = () => (localStorage.getItem(this.getLastId()) === null) ? JSON.parse(this.getStorageItem(this.get2ndToLastId())) : JSON.parse(this.getStorageItem(this.getLastId()));\n     render() {      \n             return <p>Count: {this.state.postDirectory.length}</p> \n     }\n     \n }\n export default PostDirectory;\n \n /* backup pre hooks 1/7/21\n import React from 'react';\nclass PostDirectory extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.postDirectory = (localStorage.getItem(\"postDirectory\") === null) ? [] : JSON.parse(localStorage.getItem(\"postDirectory\"));        \n        this.uniquePosts = [...new Set(this.postDirectory)];\n        const index = this.uniquePosts.indexOf(null);\n        if (index > -1) {\n            this.uniquePosts.splice(index, 1);\n        }\n        localStorage.setItem(\"postDirectory\", JSON.stringify(this.uniquePosts))\n        this.state = {\n            postDirectory: this.uniquePosts,\n        };\n    }\n    \n     getDirectory = () => this.postDirectory;\n     removeLastId = () => this.postDirectory.pop();\n     deleteLast = () => {\n         console.log(`PostDirectory => deleteLast()`)\n         this.postDirectory = this.removeLastId();\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n         this.setState({\n             postDirectory: this.postDirectory\n         }); \n     }\n     add = (id) => {\n         console.log(`PostDirectory => add(${id})`);\n         this.postDirectory.push(id);\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n     }\n     delete = (id) => {\n         console.log(`PostDirectory => delete(${id})`)\n         const index = this.postDirectory.indexOf(String(id));\n         console.log(`${index} of ${this.postDirectory.length}`)\n         this.postDirectory.splice(index, 1);\n         console.log(`${index} of ${this.postDirectory.length}`)\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n         localStorage.removeItem(id);\n         localStorage.setItem(\"lastPostId\", `${this.postDirectory[this.postDirectory.length-1]}`);\n         this.setState({\n             postDirectory: this.postDirectory\n         });\n     }\n     getLastIndex = () => Number(this.state.postDirectory.length-1);\n     getLastId = () => this.state.postDirectory[this.getLastIndex()];\n     get2ndToLastId = () => this.state.postDirectory[this.getLastIndex()-1];\n     getStorageItem = (id) => localStorage.getItem(id)\n     getLastItem = () => (localStorage.getItem(this.getLastId()) === null) ? JSON.parse(this.getStorageItem(this.get2ndToLastId())) : JSON.parse(this.getStorageItem(this.getLastId()));\n     render() {      \n             return <p>Count: {this.state.postDirectory.length}</p> \n     }\n     \n }\n export default PostDirectory;\n */"]},"metadata":{},"sourceType":"module"}