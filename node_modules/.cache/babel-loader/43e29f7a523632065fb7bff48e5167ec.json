{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js\";\nimport React, { useState } from 'react';\nimport Loader from '../utils/Loader.js';\n\nconst Geolocate = ({\n  isMotionOn,\n  returnCurrentPosition,\n  currentPositionExists\n}) => {\n  const [status, setStatus] = useState({\n    longitude: null,\n    latitude: null,\n    errorMessage: null,\n    returnCurrentPosition: returnCurrentPosition,\n    currentPositionExists: currentPositionExists\n  });\n\n  const getCurrentPosition = () => {\n    window.navigator.geolocation.getCurrentPosition( //position => console.log(position.coords.longitude),\n    position => {\n      const {\n        longitude,\n        latitude\n      } = position.coords;\n      returnCurrentPosition(longitude, latitude); //console.log(`getCurrentPosition => coords ^^^^^^^^^^^ ${longitude}, ${latitude}`)\n\n      setStatus({\n        longitude: longitude,\n        latitude: latitude,\n        errorMessage: null,\n        returnCurrentPosition: returnCurrentPosition,\n        currentPositionExists: currentPositionExists\n      });\n      /*\n      try {\n          //if (!currentPositionExists()) {\n              returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n          //}\n      }catch(err) {\n      }\n      */\n    }, err => {\n      console.log(err);\n      setStatus({\n        longitude: longitude,\n        latitude: latitude,\n        errorMessage: err.message,\n        returnCurrentPosition: returnCurrentPosition,\n        currentPositionExists: currentPositionExists\n      });\n    });\n  };\n\n  const tick = () => {\n    getCurrentPosition();\n  };\n\n  useEffect(() => {\n    const timerID = setInterval(() => tick(), 5000);\n    return function cleanUp() {\n      clearInterval(timerID);\n    };\n  }, []);\n\n  const getLocation = () => `${status.latitude.toFixed(6)}, ${status.longitude.toFixed(6)} `;\n\n  const percent = window.innerWidth < 700 ? 'twentyfivePercent mt--70 mb--70' : 'fiftyPercent mt--40 mb--40';\n\n  const loading = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: percent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    isMotionOn: isMotionOn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }));\n\n  const latlon = () => status.latitude + \",\" + status.longitude;\n\n  const {\n    latitude,\n    errorMessage\n  } = status;\n  const errorExists = errorMessage ? true : false;\n  const latExists = latitude ? true : false;\n  const errMessage = errorMessage;\n  let geolocationStatus = latExists ? getLocation() : loading();\n  geolocationStatus = errorExists ? `${errMessage}` : geolocationStatus;\n  /*\n  if (latExists) {\n      if (!currentPositionExists()) {\n          returnCurrentPosition(status.longitude, status.latitude);\n      }\n  }\n  */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"color-yellow greet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }\n  }, geolocationStatus);\n};\n\nexport default Geolocate;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js"],"names":["React","useState","Loader","Geolocate","isMotionOn","returnCurrentPosition","currentPositionExists","status","setStatus","longitude","latitude","errorMessage","getCurrentPosition","window","navigator","geolocation","position","coords","err","console","log","message","tick","useEffect","timerID","setInterval","cleanUp","clearInterval","getLocation","toFixed","percent","innerWidth","loading","latlon","errorExists","latExists","errMessage","geolocationStatus"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,qBAAd;AAAqCC,EAAAA;AAArC,CAAD,KAAkE;AAEhF,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC;AAC7BQ,IAAAA,SAAS,EAAE,IADkB;AAE7BC,IAAAA,QAAQ,EAAE,IAFmB;AAG7BC,IAAAA,YAAY,EAAE,IAHe;AAI7BN,IAAAA,qBAAqB,EAAEA,qBAJM;AAK7BC,IAAAA,qBAAqB,EAAEA;AALM,GAAD,CAApC;;AAQA,QAAMM,kBAAkB,GAAG,MAAM;AAC7BC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BH,kBAA7B,EACI;AACDI,IAAAA,QAAQ,IAAI;AACP,YAAM;AAAEP,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAA0BM,QAAQ,CAACC,MAAzC;AACAZ,MAAAA,qBAAqB,CAACI,SAAD,EAAYC,QAAZ,CAArB,CAFO,CAGP;;AACAF,MAAAA,SAAS,CAAC;AACNC,QAAAA,SAAS,EAAEA,SADL;AAENC,QAAAA,QAAQ,EAAEA,QAFJ;AAGNC,QAAAA,YAAY,EAAE,IAHR;AAINN,QAAAA,qBAAqB,EAAEA,qBAJjB;AAKNC,QAAAA,qBAAqB,EAAEA;AALjB,OAAD,CAAT;AAOA;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACa,KArBL,EAsBIY,GAAG,IAAI;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAV,MAAAA,SAAS,CAAC;AACNC,QAAAA,SAAS,EAAEA,SADL;AAENC,QAAAA,QAAQ,EAAEA,QAFJ;AAGNC,QAAAA,YAAY,EAAEO,GAAG,CAACG,OAHZ;AAINhB,QAAAA,qBAAqB,EAAEA,qBAJjB;AAKNC,QAAAA,qBAAqB,EAAEA;AALjB,OAAD,CAAT;AAQH,KAhCL;AAkCH,GAnCD;;AAoCA,QAAMgB,IAAI,GAAG,MAAM;AACfV,IAAAA,kBAAkB;AACrB,GAFD;;AAGAW,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMC,OAAO,GAAGC,WAAW,CACvB,MAAMH,IAAI,EADa,EAEvB,IAFuB,CAA3B;AAIA,WAAO,SAASI,OAAT,GAAoB;AACvBC,MAAAA,aAAa,CAACH,OAAD,CAAb;AACH,KAFD;AAGH,GARQ,EAQP,EARO,CAAT;;AASA,QAAMI,WAAW,GAAG,MAAO,GAAErB,MAAM,CAACG,QAAP,CAAgBmB,OAAhB,CAAwB,CAAxB,CAA2B,KAAItB,MAAM,CAACE,SAAP,CAAiBoB,OAAjB,CAAyB,CAAzB,CAA4B,GAAxF;;AACA,QAAMC,OAAO,GAAIjB,MAAM,CAACkB,UAAP,GAAoB,GAArB,GAA4B,iCAA5B,GAAgE,4BAAhF;;AACA,QAAMC,OAAO,GAAG,mBAAM;AAAK,IAAA,SAAS,EAAEF,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACV,oBAAC,MAAD;AAAQ,IAAA,UAAU,EAAE1B,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,CAAtB;;AAGA,QAAM6B,MAAM,GAAG,MAAM1B,MAAM,CAACG,QAAP,GAAkB,GAAlB,GAAwBH,MAAM,CAACE,SAApD;;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA6BJ,MAAnC;AACA,QAAM2B,WAAW,GAAIvB,YAAD,GAAiB,IAAjB,GAAwB,KAA5C;AACA,QAAMwB,SAAS,GAAIzB,QAAD,GAAa,IAAb,GAAoB,KAAtC;AACA,QAAM0B,UAAU,GAAGzB,YAAnB;AACA,MAAI0B,iBAAiB,GAAIF,SAAD,GAAcP,WAAW,EAAzB,GAA8BI,OAAO,EAA7D;AACAK,EAAAA,iBAAiB,GAAIH,WAAD,GAAiB,GAAEE,UAAW,EAA9B,GAAkCC,iBAAtD;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,sBAAO;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCA,iBAArC,CAAP;AACH,CA9ED;;AAgFA,eAAelC,SAAf","sourcesContent":["import React, {useState} from 'react';\nimport Loader from '../utils/Loader.js';\n\nconst Geolocate = ({ isMotionOn, returnCurrentPosition, currentPositionExists }) => {\n\n    const [status, setStatus] = useState({\n            longitude: null,\n            latitude: null,\n            errorMessage: null,\n            returnCurrentPosition: returnCurrentPosition,\n            currentPositionExists: currentPositionExists\n        })\n\n    const getCurrentPosition = () => {\n        window.navigator.geolocation.getCurrentPosition(\n            //position => console.log(position.coords.longitude),\n           position => {\n                const { longitude, latitude } = position.coords;\n                returnCurrentPosition(longitude, latitude);\n                //console.log(`getCurrentPosition => coords ^^^^^^^^^^^ ${longitude}, ${latitude}`)\n                setStatus({\n                    longitude: longitude,\n                    latitude: latitude,\n                    errorMessage: null,\n                    returnCurrentPosition: returnCurrentPosition,\n                    currentPositionExists: currentPositionExists\n                });\n                /*\n                try {\n                    //if (!currentPositionExists()) {\n                        returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n                    //}\n                }catch(err) {\n                }\n                */\n            },\n            err => {\n                console.log(err)\n                setStatus({\n                    longitude: longitude,\n                    latitude: latitude,\n                    errorMessage: err.message,\n                    returnCurrentPosition: returnCurrentPosition,\n                    currentPositionExists: currentPositionExists\n                });\n\n            }\n        )\n    }\n    const tick = () => {\n        getCurrentPosition();\n    }\n    useEffect(() => {     \t\t\n        const timerID = setInterval(\n            () => tick(),\n            5000\n        );\n        return function cleanUp () {\n            clearInterval(timerID);\n        }\n    },[]);\n    const getLocation = () => `${status.latitude.toFixed(6)}, ${status.longitude.toFixed(6)} `;\n    const percent = (window.innerWidth < 700) ? 'twentyfivePercent mt--70 mb--70' : 'fiftyPercent mt--40 mb--40';\n    const loading = () => <div className={percent}>\n                <Loader isMotionOn={isMotionOn}/>\n            </div>;\n    const latlon = () => status.latitude + \",\" + status.longitude;\n    const { latitude, errorMessage } = status;\n    const errorExists = (errorMessage) ? true : false;\n    const latExists = (latitude) ? true : false;\n    const errMessage = errorMessage;\n    let geolocationStatus = (latExists) ? getLocation() : loading();\n    geolocationStatus = (errorExists) ? `${errMessage}` : geolocationStatus;\n    /*\n    if (latExists) {\n        if (!currentPositionExists()) {\n            returnCurrentPosition(status.longitude, status.latitude);\n        }\n    }\n    */\n    return <div className=\"color-yellow greet\">{geolocationStatus}</div>\n}\n\nexport default Geolocate;"]},"metadata":{},"sourceType":"module"}