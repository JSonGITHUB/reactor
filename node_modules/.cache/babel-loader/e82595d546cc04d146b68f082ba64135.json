{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst is_1 = require(\"@sindresorhus/is\");\n\nconst errors_1 = require(\"./errors\");\n\nconst retryAfterStatusCodes = new Set([413, 429, 503]);\n\nconst isErrorWithResponse = error => error instanceof errors_1.HTTPError || error instanceof errors_1.ParseError || error instanceof errors_1.MaxRedirectsError;\n\nconst calculateRetryDelay = ({\n  attemptCount,\n  retryOptions,\n  error\n}) => {\n  if (attemptCount > retryOptions.limit) {\n    return 0;\n  }\n\n  const hasMethod = retryOptions.methods.includes(error.options.method);\n  const hasErrorCode = Reflect.has(error, 'code') && retryOptions.errorCodes.includes(error.code);\n  const hasStatusCode = isErrorWithResponse(error) && retryOptions.statusCodes.includes(error.response.statusCode);\n\n  if (!hasMethod || !hasErrorCode && !hasStatusCode) {\n    return 0;\n  }\n\n  if (isErrorWithResponse(error)) {\n    const {\n      response\n    } = error;\n\n    if (response && Reflect.has(response.headers, 'retry-after') && retryAfterStatusCodes.has(response.statusCode)) {\n      let after = Number(response.headers['retry-after']);\n\n      if (is_1.default.nan(after)) {\n        after = Date.parse(response.headers['retry-after']) - Date.now();\n      } else {\n        after *= 1000;\n      }\n\n      if (after > retryOptions.maxRetryAfter) {\n        return 0;\n      }\n\n      return after;\n    }\n\n    if (response.statusCode === 413) {\n      return 0;\n    }\n  }\n\n  const noise = Math.random() * 100;\n  return 2 ** (attemptCount - 1) * 1000 + noise;\n};\n\nexports.default = calculateRetryDelay;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/node_modules/got/dist/source/calculate-retry-delay.js"],"names":["Object","defineProperty","exports","value","is_1","require","errors_1","retryAfterStatusCodes","Set","isErrorWithResponse","error","HTTPError","ParseError","MaxRedirectsError","calculateRetryDelay","attemptCount","retryOptions","limit","hasMethod","methods","includes","options","method","hasErrorCode","Reflect","has","errorCodes","code","hasStatusCode","statusCodes","response","statusCode","headers","after","Number","default","nan","Date","parse","now","maxRetryAfter","noise","Math","random"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAME,qBAAqB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAA9B;;AACA,MAAMC,mBAAmB,GAAIC,KAAD,IAAYA,KAAK,YAAYJ,QAAQ,CAACK,SAA1B,IAAuCD,KAAK,YAAYJ,QAAQ,CAACM,UAAjE,IAA+EF,KAAK,YAAYJ,QAAQ,CAACO,iBAAjJ;;AACA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,YAAhB;AAA8BN,EAAAA;AAA9B,CAAD,KAA2C;AACnE,MAAIK,YAAY,GAAGC,YAAY,CAACC,KAAhC,EAAuC;AACnC,WAAO,CAAP;AACH;;AACD,QAAMC,SAAS,GAAGF,YAAY,CAACG,OAAb,CAAqBC,QAArB,CAA8BV,KAAK,CAACW,OAAN,CAAcC,MAA5C,CAAlB;AACA,QAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYf,KAAZ,EAAmB,MAAnB,KAA8BM,YAAY,CAACU,UAAb,CAAwBN,QAAxB,CAAiCV,KAAK,CAACiB,IAAvC,CAAnD;AACA,QAAMC,aAAa,GAAGnB,mBAAmB,CAACC,KAAD,CAAnB,IAA8BM,YAAY,CAACa,WAAb,CAAyBT,QAAzB,CAAkCV,KAAK,CAACoB,QAAN,CAAeC,UAAjD,CAApD;;AACA,MAAI,CAACb,SAAD,IAAe,CAACK,YAAD,IAAiB,CAACK,aAArC,EAAqD;AACjD,WAAO,CAAP;AACH;;AACD,MAAInB,mBAAmB,CAACC,KAAD,CAAvB,EAAgC;AAC5B,UAAM;AAAEoB,MAAAA;AAAF,QAAepB,KAArB;;AACA,QAAIoB,QAAQ,IAAIN,OAAO,CAACC,GAAR,CAAYK,QAAQ,CAACE,OAArB,EAA8B,aAA9B,CAAZ,IAA4DzB,qBAAqB,CAACkB,GAAtB,CAA0BK,QAAQ,CAACC,UAAnC,CAAhE,EAAgH;AAC5G,UAAIE,KAAK,GAAGC,MAAM,CAACJ,QAAQ,CAACE,OAAT,CAAiB,aAAjB,CAAD,CAAlB;;AACA,UAAI5B,IAAI,CAAC+B,OAAL,CAAaC,GAAb,CAAiBH,KAAjB,CAAJ,EAA6B;AACzBA,QAAAA,KAAK,GAAGI,IAAI,CAACC,KAAL,CAAWR,QAAQ,CAACE,OAAT,CAAiB,aAAjB,CAAX,IAA8CK,IAAI,CAACE,GAAL,EAAtD;AACH,OAFD,MAGK;AACDN,QAAAA,KAAK,IAAI,IAAT;AACH;;AACD,UAAIA,KAAK,GAAGjB,YAAY,CAACwB,aAAzB,EAAwC;AACpC,eAAO,CAAP;AACH;;AACD,aAAOP,KAAP;AACH;;AACD,QAAIH,QAAQ,CAACC,UAAT,KAAwB,GAA5B,EAAiC;AAC7B,aAAO,CAAP;AACH;AACJ;;AACD,QAAMU,KAAK,GAAGC,IAAI,CAACC,MAAL,KAAgB,GAA9B;AACA,SAAS,MAAM5B,YAAY,GAAG,CAArB,CAAD,GAA4B,IAA7B,GAAqC0B,KAA5C;AACH,CA/BD;;AAgCAvC,OAAO,CAACiC,OAAR,GAAkBrB,mBAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst is_1 = require(\"@sindresorhus/is\");\nconst errors_1 = require(\"./errors\");\nconst retryAfterStatusCodes = new Set([413, 429, 503]);\nconst isErrorWithResponse = (error) => (error instanceof errors_1.HTTPError || error instanceof errors_1.ParseError || error instanceof errors_1.MaxRedirectsError);\nconst calculateRetryDelay = ({ attemptCount, retryOptions, error }) => {\n    if (attemptCount > retryOptions.limit) {\n        return 0;\n    }\n    const hasMethod = retryOptions.methods.includes(error.options.method);\n    const hasErrorCode = Reflect.has(error, 'code') && retryOptions.errorCodes.includes(error.code);\n    const hasStatusCode = isErrorWithResponse(error) && retryOptions.statusCodes.includes(error.response.statusCode);\n    if (!hasMethod || (!hasErrorCode && !hasStatusCode)) {\n        return 0;\n    }\n    if (isErrorWithResponse(error)) {\n        const { response } = error;\n        if (response && Reflect.has(response.headers, 'retry-after') && retryAfterStatusCodes.has(response.statusCode)) {\n            let after = Number(response.headers['retry-after']);\n            if (is_1.default.nan(after)) {\n                after = Date.parse(response.headers['retry-after']) - Date.now();\n            }\n            else {\n                after *= 1000;\n            }\n            if (after > retryOptions.maxRetryAfter) {\n                return 0;\n            }\n            return after;\n        }\n        if (response.statusCode === 413) {\n            return 0;\n        }\n    }\n    const noise = Math.random() * 100;\n    return ((2 ** (attemptCount - 1)) * 1000) + noise;\n};\nexports.default = calculateRetryDelay;\n"]},"metadata":{},"sourceType":"script"}