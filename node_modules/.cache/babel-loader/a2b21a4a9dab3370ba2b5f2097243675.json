{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/SurfingScores.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport getKey from '../utils/KeyGenerator.js';\nimport jerseyColors from './JerseyColors.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SurfingScores = (player, index) => {\n  _s();\n  const [players, setPlayers] = useState(localStorage.getItem('players'));\n  const [state, setState] = useState({\n    editIndex: null,\n    showButtons: false\n  });\n  const [timer, setTimer] = useState(null);\n  const [showButtons, setShowButtons] = useState(false);\n  const handleTouchStart = () => {\n    console.log(`handleTouchStart`);\n    setTimer(setTimeout(() => setShowButtons(true), 1000));\n  };\n  const handleTouchEnd = () => {\n    clearTimeout(timer);\n    //setShowButtons(false);\n  };\n\n  const rank = ['st', 'nd', 'rd', 'th'];\n  const rankStatus = (player, index, score) => {\n    const scoreDifference = Number(players[index === 0 ? 0 : index - 1].surfScore - players[index === 0 ? 1 : index].surfScore);\n    const difference = scoreDifference < 0 ? -1 * scoreDifference : scoreDifference;\n    const winningScore = Number(players[index === 0 ? 0 : index < 3 ? index - 1 : 1].surfScore);\n    const highestScoresIndices = findTwoHighestIndices(players[index].surfScores);\n    const losersHeighestScore = players[index].surfScores[highestScoresIndices[0]];\n    const need = winningScore - losersHeighestScore + .01;\n    const winsBy = `Wins by ${difference.toFixed(2)}`;\n    const needs = `Needs ${need.toFixed(2)}`;\n    if (index === 0) {\n      return winsBy;\n    }\n    return needs;\n  };\n  const findTwoHighestIndices = scores => {\n    const newScores = scores !== undefined ? scores : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    let highestIndex = -1;\n    let secondHighestIndex = -1;\n    let highestScore = -Infinity;\n    let secondHighestScore = -Infinity;\n    for (let i = 0; i < newScores.length; i++) {\n      if (newScores[i] > highestScore) {\n        secondHighestIndex = highestIndex;\n        secondHighestScore = highestScore;\n        highestIndex = i;\n        highestScore = newScores[i];\n      } else if (newScores[i] > secondHighestScore) {\n        secondHighestIndex = i;\n        secondHighestScore = newScores[i];\n      }\n    }\n    return [highestIndex, secondHighestIndex];\n  };\n  const getTwoHighestScores = () => {\n    const player = players[index];\n    const scores = player.surfScores;\n    const [highestIndex, secondHighestIndex] = findTwoHighestIndices(scores);\n    //console.log(`getTwoHighestScores => playerIndex: ${index} player: ${JSON.stringify(player,null,2)} name: ${(player.player || player.name)}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n    return {\n      highScoreIndex: highestIndex,\n      secondHighScoreIndex: secondHighestIndex\n    };\n  };\n  const getScoreTotal = index => {\n    const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n    const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n    const score = highestScore + secondHighestScore;\n    console.log(`getScore => player: ${index} score: ${score}`);\n    return score;\n  };\n  const setSurfScore = (playerId, index, score) => {\n    const newScore = prompt(`Enter ${players[playerId].player || players[playerId].name}'s score for wave ${index + 1}: `, Number(score || ''));\n    const newPlayers = [...players];\n    const currentScore = newPlayers[playerId].surfScores[index];\n    const edit = currentScore !== '' && currentScore !== 0 ? false : true;\n    newPlayers[playerId].surfScores[index] = Number(newScore);\n    newPlayers[playerId].surfScore = scoreTotal(playerId, newPlayers);\n    if ((newPlayers[playerId].surfPriority === 1 || newPlayers[playerId].surfPriority === 0) && edit) {\n      newPlayers.map((player, index) => {\n        if (index === playerId) {\n          player.surfPriority = players.length;\n        } else if (player.surfPriority != 0) {\n          player.surfPriority = player.surfPriority - 1;\n        }\n      });\n    }\n    const sortedPlayers = [...newPlayers];\n    sortedPlayers.sort((a, b) => b.surfScore - a.surfScore);\n    console.log('setSurfScore => sortedPlayers: ', sortedPlayers);\n    localStorage.setItem('players', JSON.stringify(sortedPlayers, null, 2));\n    setPlayers(sortedPlayers);\n  };\n  const highestScore = playersArray => {\n    console.log(`highestScore = (index: ${index}, playersArray: ${JSON.stringify(playersArray, null, 2)})`);\n    return playersArray[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n  };\n  const secondHighestScore = playersArray => playersArray[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n  const scoreTotal = playersArray => Number(highestScore(playersArray) + secondHighestScore(playersArray)).toFixed(2);\n  const get2ndHighestScore = playerId => {\n    const highestScores = findTwoHighestIndices(players[playerId].surfScores);\n    const secondHighestId = highestScores[1];\n    return players[playerId].surfScores[secondHighestId];\n  };\n  const getSurfScore = index => {\n    const newPlayers = [...players];\n    const surfScore = scoreTotal(index, newPlayers);\n    newPlayers[index].score = surfScore;\n    newPlayers[index].surfScore = surfScore;\n    localStorage.setItem('players', JSON.stringify(newPlayers));\n    return surfScore;\n  };\n  const getWave = (playerId, index, score) => {\n    const player = players[playerId];\n    const theScore = player.surfScores[index];\n    const highestScores = findTwoHighestIndices(players[playerId].surfScores);\n    const highestId = highestScores[0];\n    const secondHighestId = highestScores[1];\n    const firstScore = index === highestId ? true : false;\n    const secondScore = index === secondHighestId ? true : false;\n    const getClasses = firstScore || secondScore ? 'size30 bold color-neogreen p-10' : 'size30 white p-10';\n    const wave = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column r-10\",\n      onClick: () => setSurfScore(playerId, index, score),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"size30 bold color-yellow bg-dkYellow w-100 p-10\",\n        children: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `ht-40 ${getClasses}`,\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, getKey(`wave${playerId}${index}${score}`), true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 26\n    }, this);\n    return wave;\n  };\n  const selectJersey = index => {\n    const newPlayers = [...players];\n    newPlayers[index].surfJerseyColor = Number(newPlayers[index].surfJerseyColor) + 1;\n    newPlayers[index].surfJerseyColor = newPlayers[index].surfJerseyColor > jerseyColors.length - 1 ? 0 : newPlayers[index].surfJerseyColor;\n    localStorage.setItem('players', JSON.stringify(newPlayers));\n    setPlayers(newPlayers);\n  };\n  const isTieScore = (index, score) => {\n    if (index !== 0) {\n      if (score === scoreTotal(index - 1, players)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  const editSurfer = index => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: alert(`Subtract ${index}`),\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: alert(`Add ${index}`),\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 39\n  }, this);\n  const surferScores = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `flexContainer r-10 ml-10 mr-10 mb--10 color-dark text-outline-light bg-${jerseyColors[Number(players[index].surfJerseyColor)] || jerseyColors[0]}`,\n      onTouchStart: () => handleTouchStart(index),\n      onTouchEnd: handleTouchEnd,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex2Column contentLeft r-10-lft m-0 w-75 p-10`,\n        onClick: () => selectJersey(index),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"size25 mt--10\",\n            children: isTieScore(index, score) && index !== 0 ? index : index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"size15 mt--10\",\n            children: rank[isTieScore(index, score) && index !== 0 ? index : index > 2 ? 3 : index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"size30 mt-5 mb-5\",\n          children: (player.player || player.name).split(' ')[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"size20\",\n          children: (player.player || player.name).split(' ')[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `r-10-rt flex2Column contentRight m-0 mr-10 pb-10 pl-10 pr-10 pt-15`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"size40 bold\",\n          children: score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-10 bold\",\n          children: rankStatus(player, index, score)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)]\n    }, getKey(`${index}${player.player || player.name}`), true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: showButtons && editSurfer(index)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-scroll color-white copyright ml-10 mr-10 mt-5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container mt-10\",\n            children: players[index].surfScores.map((score, wave) => getWave(index, wave, players[index].surfScores[wave]))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this)]\n  }, getKey(`${score}${index}${player.player || player.name}`), true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 30\n  }, this);\n  return surferScores;\n};\n_s(SurfingScores, \"wVkKla2Gqh1Hwf+3nk1N8wzPX10=\");\n_c = SurfingScores;\nexport default SurfingScores;\nvar _c;\n$RefreshReg$(_c, \"SurfingScores\");","map":{"version":3,"names":["React","useState","useEffect","getKey","jerseyColors","jsxDEV","_jsxDEV","SurfingScores","player","index","_s","players","setPlayers","localStorage","getItem","state","setState","editIndex","showButtons","timer","setTimer","setShowButtons","handleTouchStart","console","log","setTimeout","handleTouchEnd","clearTimeout","rank","rankStatus","score","scoreDifference","Number","surfScore","difference","winningScore","highestScoresIndices","findTwoHighestIndices","surfScores","losersHeighestScore","need","winsBy","toFixed","needs","scores","newScores","undefined","highestIndex","secondHighestIndex","highestScore","Infinity","secondHighestScore","i","length","getTwoHighestScores","highScoreIndex","secondHighScoreIndex","getScoreTotal","setSurfScore","playerId","newScore","prompt","name","newPlayers","currentScore","edit","scoreTotal","surfPriority","map","sortedPlayers","sort","a","b","setItem","JSON","stringify","playersArray","get2ndHighestScore","highestScores","secondHighestId","getSurfScore","getWave","theScore","highestId","firstScore","secondScore","getClasses","wave","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","selectJersey","surfJerseyColor","isTieScore","editSurfer","alert","surferScores","onTouchStart","onTouchEnd","split","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/SurfingScores.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport getKey from '../utils/KeyGenerator.js';\nimport jerseyColors from './JerseyColors.js';\n\nconst SurfingScores = (player, index) => {\n        const [players, setPlayers] = useState(localStorage.getItem('players'));\n        const [state, setState] = useState({\n            editIndex: null,\n            showButtons: false\n        });\n        const [timer, setTimer] = useState(null);\n        const [showButtons, setShowButtons] = useState(false);\n        const handleTouchStart = () => {\n            console.log(`handleTouchStart`)\n            setTimer(setTimeout(() => setShowButtons(true), 1000));\n        };\n    \n        const handleTouchEnd = () => {\n            clearTimeout(timer);\n            //setShowButtons(false);\n        };\n        const rank = ['st', 'nd', 'rd', 'th'];\n        const rankStatus = (player, index, score) => {\n            const scoreDifference = Number(players[(index === 0) ? 0 : (index - 1)].surfScore - players[(index === 0) ? 1 : (index)].surfScore);\n            const difference = (scoreDifference < 0) ? (-1 * scoreDifference) : scoreDifference;\n            const winningScore = Number(players[(index === 0) ? 0 : ((index < 3) ? (index - 1) : 1)].surfScore);\n            const highestScoresIndices = findTwoHighestIndices(players[index].surfScores);\n            const losersHeighestScore = players[index].surfScores[highestScoresIndices[0]];\n            const need = (winningScore - losersHeighestScore) + .01;\n            const winsBy = `Wins by ${difference.toFixed(2)}`;\n            const needs = `Needs ${need.toFixed(2)}`;\n            if (index === 0) {\n                return winsBy;\n            }\n            return needs;\n        }\n        const findTwoHighestIndices = (scores) => {\n            const newScores = (scores !== undefined) ? scores : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n            let highestIndex = -1;\n            let secondHighestIndex = -1;\n            let highestScore = -Infinity;\n            let secondHighestScore = -Infinity;\n            for (let i = 0; i < newScores.length; i++) {\n                if (newScores[i] > highestScore) {\n                    secondHighestIndex = highestIndex;\n                    secondHighestScore = highestScore;\n                    highestIndex = i;\n                    highestScore = newScores[i];\n                } else if (newScores[i] > secondHighestScore) {\n                    secondHighestIndex = i;\n                    secondHighestScore = newScores[i];\n                }\n            }\n            return [highestIndex, secondHighestIndex];\n        };\n        const getTwoHighestScores = () => {\n            const player = players[index];\n            const scores = player.surfScores;\n            const [highestIndex, secondHighestIndex] = findTwoHighestIndices(scores);\n            //console.log(`getTwoHighestScores => playerIndex: ${index} player: ${JSON.stringify(player,null,2)} name: ${(player.player || player.name)}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n            return {\n                highScoreIndex: highestIndex,\n                secondHighScoreIndex: secondHighestIndex\n            };\n        };\n        const getScoreTotal = (index) => {\n            const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex]\n            const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex]\n            const score = (highestScore + secondHighestScore);\n            console.log(`getScore => player: ${index} score: ${score}`);\n            return score;\n        }\n        const setSurfScore = (playerId, index, score) => {\n\n            const newScore = prompt(`Enter ${players[playerId].player || players[playerId].name}'s score for wave ${index + 1}: `, Number(score || ''));\n            const newPlayers = [...players];\n            const currentScore = newPlayers[playerId].surfScores[index];\n            const edit = (currentScore !== '' && currentScore !== 0) ? false : true;\n            newPlayers[playerId].surfScores[index] = Number(newScore);\n            newPlayers[playerId].surfScore = scoreTotal(playerId, newPlayers);\n            if ((newPlayers[playerId].surfPriority === 1 || newPlayers[playerId].surfPriority === 0) && edit) {\n                newPlayers.map((player, index) => {\n                    if (index === playerId) {\n                        player.surfPriority = players.length;\n                    } else if (player.surfPriority != 0) {\n                        player.surfPriority = player.surfPriority - 1;\n                    }\n                });\n            }\n            const sortedPlayers = [...newPlayers];\n            sortedPlayers.sort((a, b) => b.surfScore - a.surfScore);\n\n            console.log('setSurfScore => sortedPlayers: ', sortedPlayers)\n\n            localStorage.setItem('players', JSON.stringify(sortedPlayers, null, 2));\n            setPlayers(sortedPlayers);\n        }\n        const highestScore = (playersArray) => {\n            console.log(`highestScore = (index: ${index}, playersArray: ${JSON.stringify(playersArray, null, 2)})`)\n            return playersArray[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n        }\n        const secondHighestScore = (playersArray) => playersArray[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n        const scoreTotal = (playersArray) => Number(highestScore(playersArray) + secondHighestScore(playersArray)).toFixed(2);\n        const get2ndHighestScore = (playerId) => {\n            const highestScores = findTwoHighestIndices(players[playerId].surfScores);\n            const secondHighestId = highestScores[1];\n            return players[playerId].surfScores[secondHighestId];\n        }\n        const getSurfScore = (index) => {\n            const newPlayers = [...players];\n            const surfScore = scoreTotal(index, newPlayers);\n    \n            newPlayers[index].score = surfScore;\n            newPlayers[index].surfScore = surfScore;\n            localStorage.setItem('players', JSON.stringify(newPlayers));\n            return surfScore;\n        };\n        const getWave = (playerId, index, score) => {\n            const player = players[playerId];\n            const theScore = player.surfScores[index];\n            const highestScores = findTwoHighestIndices(players[playerId].surfScores);\n            const highestId = highestScores[0];\n            const secondHighestId = highestScores[1];\n            const firstScore = (index === highestId) ? true : false;\n            const secondScore = (index === secondHighestId) ? true : false;\n            const getClasses = (firstScore || secondScore) ? 'size30 bold color-neogreen p-10' : 'size30 white p-10';\n            const wave = <div className=\"column r-10\" onClick={() => setSurfScore(playerId, index, score)} key={getKey(`wave${playerId}${index}${score}`)}>\n                <div className='size30 bold color-yellow bg-dkYellow w-100 p-10'>{index + 1}</div>\n                <div className={`ht-40 ${getClasses}`}>{score}</div>\n            </div>\n            return wave\n        }\n        const selectJersey = (index) => {\n            const newPlayers = [...players];\n            newPlayers[index].surfJerseyColor = Number(newPlayers[index].surfJerseyColor) + 1;\n            newPlayers[index].surfJerseyColor = (newPlayers[index].surfJerseyColor > (jerseyColors.length - 1)) ? 0 : newPlayers[index].surfJerseyColor;\n            localStorage.setItem('players', JSON.stringify(newPlayers));\n            setPlayers(newPlayers);\n        }\n        const isTieScore = (index, score) => {\n            if (index !== 0) {\n                if (score === scoreTotal(index - 1, players)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        const editSurfer = (index) => <div>\n                <button onClick={alert(`Subtract ${index}`)}>-</button>\n                <button onClick={alert(`Add ${index}`)}>+</button>\n            </div>\n            \n        const surferScores = <div key={getKey(`${score}${index}${(player.player || player.name)}`)}>\n            <div className={`flexContainer r-10 ml-10 mr-10 mb--10 color-dark text-outline-light bg-${jerseyColors[Number(players[index].surfJerseyColor)] || jerseyColors[0]}`} key={getKey(`${index}${(player.player || player.name)}`)}  onTouchStart={() => handleTouchStart(index)} onTouchEnd={handleTouchEnd}>\n                <div className={`flex2Column contentLeft r-10-lft m-0 w-75 p-10`} onClick={() => selectJersey(index)}>\n                    <div>\n                        <span className='size25 mt--10'>\n                            {(isTieScore(index, score) && (index !== 0)) ? index : (index + 1)}\n                        </span>\n                        <span className='size15 mt--10'>\n                            {rank[(isTieScore(index, score) && (index !== 0)) ? index : (index > 2) ? 3 : (index)]}\n                        </span>\n                    </div>\n                    <div className='size30 mt-5 mb-5'>\n                        {(player.player || player.name).split(' ')[0]}\n                    </div>\n                    <div className='size20'>\n                        {(player.player || player.name).split(' ')[1]}\n                    </div>\n                </div>\n                <div className={`r-10-rt flex2Column contentRight m-0 mr-10 pb-10 pl-10 pr-10 pt-15`}>\n                    <div className='size40 bold'>{score}</div>\n                    <div className='mt-10 bold'>{rankStatus(player, index, score)}</div>\n                </div>\n            </div>\n            <div>\n            {showButtons && (\n                editSurfer(index)\n            )}\n            </div>\n            <div>\n                <div>\n                    <div className='h-scroll color-white copyright ml-10 mr-10 mt-5'>\n                        <div className=\"container mt-10\">\n                            {players[index].surfScores.map((score, wave) => getWave(index, wave, players[index].surfScores[wave]))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        return surferScores\n}\nexport default SurfingScores;"],"mappings":"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"},"metadata":{},"sourceType":"module"}