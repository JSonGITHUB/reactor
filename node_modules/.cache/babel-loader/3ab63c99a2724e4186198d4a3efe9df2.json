{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n\nfunction useCurrentWidth() {\n  let [width, setWidth] = useState(getWidth());\n  useEffect(() => {\n    let timeoutId = null;\n\n    const resizeListener = () => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => setWidth(getWidth()), 150);\n    };\n\n    window.addEventListener('resize', resizeListener);\n    return () => {\n      window.removeEventListener('resize', resizeListener);\n    };\n  }, []);\n  width = \"nada\";\n  console.log(`width: ${width}`);\n  return width;\n}\n\nfunction useBreakpoints(breakpoints) {\n  if (typeof breakpoints !== 'object' || breakpoints === null) {\n    throw new Error('Invalid configuration object!');\n  }\n\n  let width = useCurrentWidth();\n  let result = {};\n\n  for (const key of Object.keys(breakpoints)) {\n    if (breakpoints[key].min !== parseInt(breakpoints[key].min, 10)) {\n      throw new Error('Min value should be an integer!');\n    }\n\n    if (breakpoints[key].max && breakpoints[key].max !== parseInt(breakpoints[key].max, 10)) {\n      throw new Error('Max value should be an integer!');\n    }\n\n    if (breakpoints[key].max && breakpoints[key].min > breakpoints[key].max) {\n      throw new Error('Min value should be lower or equal with max value!');\n    }\n\n    result[key] = width >= breakpoints[key].min && (!breakpoints[key].max || width <= breakpoints[key].max);\n  }\n\n  return result;\n}\n\nexport default useBreakpoints;\nexport { useCurrentWidth, useBreakpoints };","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/WindowSizeDetection.js"],"names":["useState","useEffect","getWidth","window","innerWidth","document","documentElement","clientWidth","body","useCurrentWidth","width","setWidth","timeoutId","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener","console","log","useBreakpoints","breakpoints","Error","result","key","Object","keys","min","parseInt","max"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAG,MAAMC,MAAM,CAACC,UAAP,IAAqBC,QAAQ,CAACC,eAAT,CAAyBC,WAA9C,IAA6DF,QAAQ,CAACG,IAAT,CAAcD,WAAlG;;AAEA,SAASE,eAAT,GAA2B;AACzB,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACE,QAAQ,EAAT,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,SAAS,GAAG,IAAhB;;AACA,UAAMC,cAAc,GAAG,MAAM;AAC3BC,MAAAA,YAAY,CAACF,SAAD,CAAZ;AACAA,MAAAA,SAAS,GAAGG,UAAU,CAAC,MAAMJ,QAAQ,CAACT,QAAQ,EAAT,CAAf,EAA6B,GAA7B,CAAtB;AACD,KAHD;;AAIAC,IAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCH,cAAlC;AAEA,WAAO,MAAM;AACXV,MAAAA,MAAM,CAACc,mBAAP,CAA2B,QAA3B,EAAqCJ,cAArC;AACD,KAFD;AAGD,GAXQ,EAWN,EAXM,CAAT;AAYAH,EAAAA,KAAK,GAAG,MAAR;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAa,UAAST,KAAM,EAA5B;AACA,SAAOA,KAAP;AACD;;AAED,SAASU,cAAT,CAAwBC,WAAxB,EAAqC;AACnC,MAAI,OAAOA,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3D,UAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,MAAIZ,KAAK,GAAGD,eAAe,EAA3B;AACA,MAAIc,MAAM,GAAG,EAAb;;AAEA,OAAI,MAAMC,GAAV,IAAiBC,MAAM,CAACC,IAAP,CAAYL,WAAZ,CAAjB,EAA2C;AACzC,QAAIA,WAAW,CAACG,GAAD,CAAX,CAAiBG,GAAjB,KAAyBC,QAAQ,CAACP,WAAW,CAACG,GAAD,CAAX,CAAiBG,GAAlB,EAAuB,EAAvB,CAArC,EAAiE;AAC/D,YAAM,IAAIL,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,QAAID,WAAW,CAACG,GAAD,CAAX,CAAiBK,GAAjB,IAAwBR,WAAW,CAACG,GAAD,CAAX,CAAiBK,GAAjB,KAAyBD,QAAQ,CAACP,WAAW,CAACG,GAAD,CAAX,CAAiBK,GAAlB,EAAuB,EAAvB,CAA7D,EAAyF;AACvF,YAAM,IAAIP,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,QAAID,WAAW,CAACG,GAAD,CAAX,CAAiBK,GAAjB,IAAwBR,WAAW,CAACG,GAAD,CAAX,CAAiBG,GAAjB,GAAuBN,WAAW,CAACG,GAAD,CAAX,CAAiBK,GAApE,EAAyE;AACvE,YAAM,IAAIP,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAEDC,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcd,KAAK,IAAIW,WAAW,CAACG,GAAD,CAAX,CAAiBG,GAA1B,KAAkC,CAACN,WAAW,CAACG,GAAD,CAAX,CAAiBK,GAAlB,IAAyBnB,KAAK,IAAIW,WAAW,CAACG,GAAD,CAAX,CAAiBK,GAArF,CAAd;AACD;;AAED,SAAON,MAAP;AACD;;AAED,eAAeH,cAAf;AACA,SAASX,eAAT,EAA0BW,cAA1B","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n\nfunction useCurrentWidth() {\n  let [width, setWidth] = useState(getWidth());\n\n  useEffect(() => {\n    let timeoutId = null;\n    const resizeListener = () => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => setWidth(getWidth()), 150);\n    };\n    window.addEventListener('resize', resizeListener);\n\n    return () => {\n      window.removeEventListener('resize', resizeListener);\n    }\n  }, [])\n  width = \"nada\";\n  console.log(`width: ${width}`)\n  return width;\n}\n\nfunction useBreakpoints(breakpoints) {\n  if (typeof breakpoints !== 'object' || breakpoints === null) {\n    throw new Error('Invalid configuration object!')\n  }\n\n  let width = useCurrentWidth();\n  let result = {}\n\n  for(const key of Object.keys(breakpoints)) {\n    if (breakpoints[key].min !== parseInt(breakpoints[key].min, 10)) {\n      throw new Error('Min value should be an integer!');\n    }\n\n    if (breakpoints[key].max && breakpoints[key].max !== parseInt(breakpoints[key].max, 10)) {\n      throw new Error('Max value should be an integer!');\n    }\n\n    if (breakpoints[key].max && breakpoints[key].min > breakpoints[key].max) {\n      throw new Error('Min value should be lower or equal with max value!');\n    }\n\n    result[key] = width >= breakpoints[key].min && (!breakpoints[key].max || width <= breakpoints[key].max)\n  }\n\n  return result;\n}\n\nexport default useBreakpoints;\nexport { useCurrentWidth, useBreakpoints };"]},"metadata":{},"sourceType":"module"}