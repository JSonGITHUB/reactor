{"ast":null,"code":"import React,{useState,useEffect}from'react';import surfScoring from'./SurfScoring.js';import jerseyColors from'./JerseyColors.js';import{findTwoHighestIndices,getTwoHighestScores}from'./HighScores.js';var SurfScoringLogic=function SurfScoringLogic(index,completed,players/*setPlayers, editPlayer, deleteAthlete*/){var getSurfTotal=function getSurfTotal(player){var total=0;var score=function score(index){return player.surfScores[index];};var addToTotal=function addToTotal(value){return total=total+value;};surfScoring.map(function(target,index){addToTotal(Number(score(index)));});return total;};var getScore=function getScore(){return window.location.pathname='/reactor/ScoreKeeper';};/*\n    const resetSurfersScores = (playerId) => {\n        const newPlayers = [...players];\n        newPlayers[playerId].surfScore = 0;\n        newPlayers[playerId].surfScores = surfScoring;\n        setPlayers(newPlayers);\n        getScore();\n    }\n    */ /*\n    const selectJersey = (playerId, selection) => {\n        const newPlayers = [...players];\n        newPlayers[playerId].surfJerseyColor = (selection);\n        localStorage.setItem('players', JSON.stringify(newPlayers));\n        setPlayers(newPlayers);\n    }\n    */ //const getJerseyColorSelector = (playerId, color, index) => <button className={`bg-${color} ht-45 width50px button r-10`} onClick={() => selectJersey(playerId, index)}></button>;\n/*\n   const editSurfer = (playerId) => <div className='m-10 p-10 r-10 bg-darker'>\n            <div className='size30 p-10'>Name:</div>\n            <button className={`bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10`} onClick={() => editPlayer(playerId)}>{players[playerId].name}</button>\n            <div className='size30 p-10'>Jersey color:</div>\n            <div>\n                {jerseyColors.map((color,index) => \n                    index === Math.ceil(jerseyColors.length / 2) ? (\n                        <React.Fragment key={index}>\n                            <br />\n                            {getJerseyColorSelector(playerId, color, index)}\n                        </React.Fragment>\n                    ) : (\n                        getJerseyColorSelector(playerId, color, index)\n                    )\n                )}\n            </div>\n            <div>\n                <button className='bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5' onClick={() => resetSurfersScores(playerId)}>\n                    Reset Scores\n                </button>\n                <button className='bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5' onClick={() => deleteAthlete(playerId)}>\n                    Delete Athlete\n                </button>\n            </div>\n        </div>\n    */var scoreTotal=function scoreTotal(index,playersArray){return Number(highestScore(index,playersArray)+secondHighestScore(index,playersArray)).toFixed(2);};var isTieScore=function isTieScore(index){var score=scoreTotal(index,players);if(index!==0){if(score===scoreTotal(index-1,players)){return true;}}return false;};var place=function place(index){return isTieScore(index)&&index!==0?index:index+1;};var placeSuffix=function placeSuffix(index){return rank[isTieScore(index)&&index!==0?index-1:index>2?3:index];};var position=function position(index){return\"\".concat(place,\" \").concat(placeSuffix);};var rank=['st','nd','rd','th'];var highestScore=function highestScore(index,playersArray){return playersArray[index].surfScores[getTwoHighestScores(index).highScoreIndex];};var secondHighestScore=function secondHighestScore(index,playersArray){return playersArray[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];};var getScoreTotal=function getScoreTotal(index){var highestScore=players[index].surfScores[getTwoHighestScores(index).highScoreIndex];var secondHighestScore=players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];var score=highestScore+secondHighestScore;return score;};var playerId=index.index;//console.log(`SurfScoringLogic => index: ${index.index}`);\n//console.log(`SurfScoringLogic => players: ${JSON.stringify(index.players,null,2)}`);\n//console.log(`SurfScoringLogic => surfScores: ${index.players[playerId].surfScores}`);\nvar scoreDifference=Number(index.players[playerId===0?0:playerId-1].surfScore-index.players[playerId===0?1:playerId].surfScore);var difference=scoreDifference<0?-1*scoreDifference:scoreDifference;var winningScore=Number(index.players[playerId===0?0:playerId<3?playerId-1:1].surfScore);var highestScoresIndices=findTwoHighestIndices(index.players[playerId].surfScores);//console.log(`SurfScoringLogic => index: ${index}`)\n//console.log(`SurfScoringLogic => players: ${players}`)\nvar losersHeighestScore=index.players[playerId].surfScores[highestScoresIndices[0]];var need=winningScore-losersHeighestScore+.01;var winsBy=\"\".concat(completed?'Won':'Wins',\" by \").concat(difference.toFixed(2));var needs=\"\".concat(completed?'Needed':'Needs',\" \").concat(need.toFixed(2));if(playerId===0){return winsBy;}return needs;};export default SurfScoringLogic;","map":{"version":3,"names":["React","useState","useEffect","surfScoring","jerseyColors","findTwoHighestIndices","getTwoHighestScores","SurfScoringLogic","index","completed","players","getSurfTotal","player","total","score","surfScores","addToTotal","value","map","target","Number","getScore","window","location","pathname","scoreTotal","playersArray","highestScore","secondHighestScore","toFixed","isTieScore","place","placeSuffix","rank","position","concat","highScoreIndex","secondHighScoreIndex","getScoreTotal","playerId","scoreDifference","surfScore","difference","winningScore","highestScoresIndices","losersHeighestScore","need","winsBy","needs"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/SurfScoringLogic.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport surfScoring from './SurfScoring.js'\nimport jerseyColors from './JerseyColors.js';\nimport { findTwoHighestIndices, getTwoHighestScores } from './HighScores.js';\n\nconst SurfScoringLogic = (index, completed, players, /*setPlayers, editPlayer, deleteAthlete*/) => {\n\n    const getSurfTotal = (player) => {\n        let total = 0;\n        const score = (index) => player.surfScores[index];\n        const addToTotal = (value) => total = total + value;\n        surfScoring.map((target, index) => {\n                addToTotal(Number(score(index)))\n            }\n        );\n        return total;\n    }\n    const getScore = () => window.location.pathname = '/reactor/ScoreKeeper';\n    /*\n    const resetSurfersScores = (playerId) => {\n        const newPlayers = [...players];\n        newPlayers[playerId].surfScore = 0;\n        newPlayers[playerId].surfScores = surfScoring;\n        setPlayers(newPlayers);\n        getScore();\n    }\n    */\n   /*\n    const selectJersey = (playerId, selection) => {\n        const newPlayers = [...players];\n        newPlayers[playerId].surfJerseyColor = (selection);\n        localStorage.setItem('players', JSON.stringify(newPlayers));\n        setPlayers(newPlayers);\n    }\n    */\n    //const getJerseyColorSelector = (playerId, color, index) => <button className={`bg-${color} ht-45 width50px button r-10`} onClick={() => selectJersey(playerId, index)}></button>;\n   /*\n   const editSurfer = (playerId) => <div className='m-10 p-10 r-10 bg-darker'>\n            <div className='size30 p-10'>Name:</div>\n            <button className={`bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10`} onClick={() => editPlayer(playerId)}>{players[playerId].name}</button>\n            <div className='size30 p-10'>Jersey color:</div>\n            <div>\n                {jerseyColors.map((color,index) => \n                    index === Math.ceil(jerseyColors.length / 2) ? (\n                        <React.Fragment key={index}>\n                            <br />\n                            {getJerseyColorSelector(playerId, color, index)}\n                        </React.Fragment>\n                    ) : (\n                        getJerseyColorSelector(playerId, color, index)\n                    )\n                )}\n            </div>\n            <div>\n                <button className='bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5' onClick={() => resetSurfersScores(playerId)}>\n                    Reset Scores\n                </button>\n                <button className='bg-lite size30 color-lite width-100-percent pb-10 pt-10 button r-10 m-5' onClick={() => deleteAthlete(playerId)}>\n                    Delete Athlete\n                </button>\n            </div>\n        </div>\n    */\n    const scoreTotal = (index, playersArray) => Number(highestScore(index, playersArray) + secondHighestScore(index, playersArray)).toFixed(2);\n    \n    const isTieScore = (index) => {\n        const score = scoreTotal(index, players);\n        if (index !== 0) {\n            if (score === scoreTotal(index - 1, players)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const place = (index) => (isTieScore(index) && (index !== 0)) ? index : (index + 1);\n    const placeSuffix = (index) => rank[(isTieScore(index) && (index !== 0)) ? (index-1) : (index > 2) ? 3 : (index)];\n    const position = (index) => `${place} ${placeSuffix}`;\n    const rank = ['st', 'nd', 'rd', 'th'];\n    const highestScore = (index, playersArray) => {\n        return playersArray[index].surfScores[getTwoHighestScores(index).highScoreIndex];\n    }\n    const secondHighestScore = (index, playersArray) => playersArray[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex];\n    \n    const getScoreTotal = (index) => {\n        const highestScore = players[index].surfScores[getTwoHighestScores(index).highScoreIndex]\n        const secondHighestScore = players[index].surfScores[getTwoHighestScores(index).secondHighScoreIndex]\n        const score = (highestScore + secondHighestScore);\n        return score;\n    }\n    \n    const playerId = index.index;\n    //console.log(`SurfScoringLogic => index: ${index.index}`);\n    //console.log(`SurfScoringLogic => players: ${JSON.stringify(index.players,null,2)}`);\n    //console.log(`SurfScoringLogic => surfScores: ${index.players[playerId].surfScores}`);\n    const scoreDifference = Number(index.players[(playerId === 0) ? 0 : (playerId - 1)].surfScore - index.players[(playerId === 0) ? 1 : (playerId)].surfScore);\n    const difference = (scoreDifference < 0) ? (-1 * scoreDifference) : scoreDifference;\n    const winningScore = Number(index.players[(playerId === 0) ? 0 : ((playerId < 3) ? (playerId - 1) : 1)].surfScore);\n    const highestScoresIndices = findTwoHighestIndices(index.players[playerId].surfScores);\n    //console.log(`SurfScoringLogic => index: ${index}`)\n    //console.log(`SurfScoringLogic => players: ${players}`)\n    const losersHeighestScore = index.players[playerId].surfScores[highestScoresIndices[0]];\n    const need = (winningScore - losersHeighestScore) + .01;\n    const winsBy = `${(completed)?'Won':'Wins'} by ${difference.toFixed(2)}`;\n    const needs = `${(completed)?'Needed':'Needs'} ${need.toFixed(2)}`;\n    if (playerId === 0) {\n        return winsBy\n    }\n    return needs\n\n}\nexport default SurfScoringLogic;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,WAAW,KAAM,kBAAkB,CAC1C,MAAO,CAAAC,YAAY,KAAM,mBAAmB,CAC5C,OAASC,qBAAqB,CAAEC,mBAAmB,KAAQ,iBAAiB,CAE5E,GAAM,CAAAC,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAIC,KAAK,CAAEC,SAAS,CAAEC,OAAS,0CAA8C,CAE/F,GAAM,CAAAC,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAIC,MAAM,CAAK,CAC7B,GAAI,CAAAC,KAAK,CAAG,CAAC,CACb,GAAM,CAAAC,KAAK,CAAG,QAAR,CAAAA,KAAKA,CAAIN,KAAK,QAAK,CAAAI,MAAM,CAACG,UAAU,CAACP,KAAK,CAAC,GACjD,GAAM,CAAAQ,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAIC,KAAK,QAAK,CAAAJ,KAAK,CAAGA,KAAK,CAAGI,KAAK,GACnDd,WAAW,CAACe,GAAG,CAAC,SAACC,MAAM,CAAEX,KAAK,CAAK,CAC3BQ,UAAU,CAACI,MAAM,CAACN,KAAK,CAACN,KAAK,CAAC,CAAC,CAAC,CACpC,CACJ,CAAC,CACD,MAAO,CAAAK,KAAK,CAChB,CAAC,CACD,GAAM,CAAAQ,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAA,QAAS,CAAAC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAAG,sBAAsB,GACxE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MARI,CASD;AACH;AACA;AACA;AACA;AACA;AACA;AACA,MAPG,CAQC;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MACI,GAAM,CAAAC,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAIjB,KAAK,CAAEkB,YAAY,QAAK,CAAAN,MAAM,CAACO,YAAY,CAACnB,KAAK,CAAEkB,YAAY,CAAC,CAAGE,kBAAkB,CAACpB,KAAK,CAAEkB,YAAY,CAAC,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,GAE1I,GAAM,CAAAC,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAItB,KAAK,CAAK,CAC1B,GAAM,CAAAM,KAAK,CAAGW,UAAU,CAACjB,KAAK,CAAEE,OAAO,CAAC,CACxC,GAAIF,KAAK,GAAK,CAAC,CAAE,CACb,GAAIM,KAAK,GAAKW,UAAU,CAACjB,KAAK,CAAG,CAAC,CAAEE,OAAO,CAAC,CAAE,CAC1C,MAAO,KAAI,CACf,CACJ,CACA,MAAO,MAAK,CAChB,CAAC,CACD,GAAM,CAAAqB,KAAK,CAAG,QAAR,CAAAA,KAAKA,CAAIvB,KAAK,QAAM,CAAAsB,UAAU,CAACtB,KAAK,CAAC,EAAKA,KAAK,GAAK,CAAE,CAAIA,KAAK,CAAIA,KAAK,CAAG,CAAE,GACnF,GAAM,CAAAwB,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIxB,KAAK,QAAK,CAAAyB,IAAI,CAAEH,UAAU,CAACtB,KAAK,CAAC,EAAKA,KAAK,GAAK,CAAE,CAAKA,KAAK,CAAC,CAAC,CAAKA,KAAK,CAAG,CAAC,CAAI,CAAC,CAAIA,KAAM,CAAC,GACjH,GAAM,CAAA0B,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAI1B,KAAK,WAAA2B,MAAA,CAAQJ,KAAK,MAAAI,MAAA,CAAIH,WAAW,GAAE,CACrD,GAAM,CAAAC,IAAI,CAAG,CAAC,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAC,CACrC,GAAM,CAAAN,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAInB,KAAK,CAAEkB,YAAY,CAAK,CAC1C,MAAO,CAAAA,YAAY,CAAClB,KAAK,CAAC,CAACO,UAAU,CAACT,mBAAmB,CAACE,KAAK,CAAC,CAAC4B,cAAc,CAAC,CACpF,CAAC,CACD,GAAM,CAAAR,kBAAkB,CAAG,QAArB,CAAAA,kBAAkBA,CAAIpB,KAAK,CAAEkB,YAAY,QAAK,CAAAA,YAAY,CAAClB,KAAK,CAAC,CAACO,UAAU,CAACT,mBAAmB,CAACE,KAAK,CAAC,CAAC6B,oBAAoB,CAAC,GAEnI,GAAM,CAAAC,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAI9B,KAAK,CAAK,CAC7B,GAAM,CAAAmB,YAAY,CAAGjB,OAAO,CAACF,KAAK,CAAC,CAACO,UAAU,CAACT,mBAAmB,CAACE,KAAK,CAAC,CAAC4B,cAAc,CAAC,CACzF,GAAM,CAAAR,kBAAkB,CAAGlB,OAAO,CAACF,KAAK,CAAC,CAACO,UAAU,CAACT,mBAAmB,CAACE,KAAK,CAAC,CAAC6B,oBAAoB,CAAC,CACrG,GAAM,CAAAvB,KAAK,CAAIa,YAAY,CAAGC,kBAAmB,CACjD,MAAO,CAAAd,KAAK,CAChB,CAAC,CAED,GAAM,CAAAyB,QAAQ,CAAG/B,KAAK,CAACA,KAAK,CAC5B;AACA;AACA;AACA,GAAM,CAAAgC,eAAe,CAAGpB,MAAM,CAACZ,KAAK,CAACE,OAAO,CAAE6B,QAAQ,GAAK,CAAC,CAAI,CAAC,CAAIA,QAAQ,CAAG,CAAE,CAAC,CAACE,SAAS,CAAGjC,KAAK,CAACE,OAAO,CAAE6B,QAAQ,GAAK,CAAC,CAAI,CAAC,CAAIA,QAAS,CAAC,CAACE,SAAS,CAAC,CAC3J,GAAM,CAAAC,UAAU,CAAIF,eAAe,CAAG,CAAC,CAAK,CAAC,CAAC,CAAGA,eAAe,CAAIA,eAAe,CACnF,GAAM,CAAAG,YAAY,CAAGvB,MAAM,CAACZ,KAAK,CAACE,OAAO,CAAE6B,QAAQ,GAAK,CAAC,CAAI,CAAC,CAAKA,QAAQ,CAAG,CAAC,CAAKA,QAAQ,CAAG,CAAC,CAAI,CAAE,CAAC,CAACE,SAAS,CAAC,CAClH,GAAM,CAAAG,oBAAoB,CAAGvC,qBAAqB,CAACG,KAAK,CAACE,OAAO,CAAC6B,QAAQ,CAAC,CAACxB,UAAU,CAAC,CACtF;AACA;AACA,GAAM,CAAA8B,mBAAmB,CAAGrC,KAAK,CAACE,OAAO,CAAC6B,QAAQ,CAAC,CAACxB,UAAU,CAAC6B,oBAAoB,CAAC,CAAC,CAAC,CAAC,CACvF,GAAM,CAAAE,IAAI,CAAIH,YAAY,CAAGE,mBAAmB,CAAI,GAAG,CACvD,GAAM,CAAAE,MAAM,IAAAZ,MAAA,CAAO1B,SAAS,CAAE,KAAK,CAAC,MAAM,SAAA0B,MAAA,CAAOO,UAAU,CAACb,OAAO,CAAC,CAAC,CAAC,CAAE,CACxE,GAAM,CAAAmB,KAAK,IAAAb,MAAA,CAAO1B,SAAS,CAAE,QAAQ,CAAC,OAAO,MAAA0B,MAAA,CAAIW,IAAI,CAACjB,OAAO,CAAC,CAAC,CAAC,CAAE,CAClE,GAAIU,QAAQ,GAAK,CAAC,CAAE,CAChB,MAAO,CAAAQ,MAAM,CACjB,CACA,MAAO,CAAAC,KAAK,CAEhB,CAAC,CACD,cAAe,CAAAzC,gBAAgB"},"metadata":{},"sourceType":"module"}