{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/WindDirection.js\";\nimport React from 'react';\nimport Dialog from '../functional/Dialog.js';\nimport Loader from '../utils/Loader.js';\n\nclass WindDirection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getWindData = () => {\n      let data;\n\n      const returnJSON = response => response.json();\n\n      const returnRejection = response => Promise.reject({\n        status: response.status,\n        data\n      });\n\n      const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n\n      let getCurrentTime = new Date();\n      getCurrentTime = `${getCurrentTime.getFullYear()}${getCurrentTime.getMonth() + 1 < 10 ? `0${getCurrentTime.getMonth() + 1}` : getCurrentTime.getMonth() + 1}${getCurrentTime.getDate() < 10 ? `0${getCurrentTime.getDate()}` : getCurrentTime.getDate()}%20${getCurrentTime.getHours() < 10 ? `0${getCurrentTime.getHours()}` : getCurrentTime.getHours()}:00`;\n      console.log(`Wind   -      getCurrentTime: ${getCurrentTime} ===> 20200520%2018:24`);\n      const uriWind = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=wind&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uriWindTest = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=20200520%2020:00&end_date=20200520%2020:00&station=9410230&product=wind&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n      const uri = uriWind; //const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`;\n\n      fetch(uri).then(response => validate(response)).then(data => {\n        this.setState({\n          station: data.metadata.name,\n          speed: data.data[0].s,\n          angle: data.data[0].d,\n          direction: data.data[0].dr,\n          gusts: data.data[0].g\n        });\n      }).catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n    };\n\n    this.getCurrentWind = () => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 28\n      }\n    }, `${this.state.direction} at ${Number(this.state.speed).toFixed(0)}kts`, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 101\n      }\n    }), `${Number(this.state.angle).toFixed(0)}Â°`, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 72\n      }\n    }), `${Number(this.state.gusts).toFixed(0)}knts`);\n\n    this.percent = 'twentyfivePercent mt--70 mb--70';\n\n    this.loading = () => /*#__PURE__*/React.createElement(\"div\", {\n      className: this.percent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      isMotionOn: this.props.isMotionOn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }));\n\n    this.state = {\n      direction: null\n    };\n  }\n\n  /*\n  {\n      \"metadata\":{\n          \"id\":\"9410230\",\n          \"name\":\"La Jolla\",\n          \"lat\":\"32.8669\",\n          \"lon\":\"-117.2571\"\n      }, \n      \"data\": [\n          {\n              \"t\":\"2020-05-20 20:00\", \n              \"s\":\"5.25\", \n              \"d\":\"313.00\",\n               \"dr\":\"NW\", \n               \"g\":\"7.39\", \n               \"f\":\"0,0\"\n          }\n      ]\n  }\n  */\n  componentDidMount() {\n    this.getWindData();\n    this.timerID = setInterval(() => this.tick(), 3000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    console.log(`getWind ->`);\n    this.getWindData();\n    this.props.setWind(this.state.direction);\n  }\n  /*\n  Water Level: 2.01 ft Above MLLW\n  Next Tide at 3:09 PM: Low 1.70 ft\n  Gusting to: 12.3 kts from WSW\n  */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 16\n      }\n    }, this.getCurrentWind());\n  }\n\n}\n\nexport default WindDirection;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/WindDirection.js"],"names":["React","Dialog","Loader","WindDirection","Component","constructor","props","getWindData","data","returnJSON","response","json","returnRejection","Promise","reject","status","validate","ok","getCurrentTime","Date","getFullYear","getMonth","getDate","getHours","console","log","uriWind","uriWindTest","uri","fetch","then","setState","station","metadata","name","speed","s","angle","d","direction","dr","gusts","g","catch","err","window","location","pathname","getCurrentWind","state","Number","toFixed","percent","loading","isMotionOn","componentDidMount","timerID","setInterval","tick","componentWillUnmount","clearInterval","setWind","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Dialog from '../functional/Dialog.js';\nimport Loader from '../utils/Loader.js';\n\nclass WindDirection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            direction: null\n        }\n    }\n    getWindData = () => {\n        let data;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        let getCurrentTime = new Date();\n        getCurrentTime = `${(getCurrentTime.getFullYear())}${((getCurrentTime.getMonth()+1)<10) ? `0${(getCurrentTime.getMonth()+1)}` : (getCurrentTime.getMonth()+1)}${(getCurrentTime.getDate()<10)? `0${getCurrentTime.getDate()}` : getCurrentTime.getDate()}%20${((getCurrentTime.getHours())<10) ? `0${(getCurrentTime.getHours())}` : (getCurrentTime.getHours())}:00`\n        console.log(`Wind   -      getCurrentTime: ${getCurrentTime} ===> 20200520%2018:24`)\n        const uriWind = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=wind&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uriWindTest = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=20200520%2020:00&end_date=20200520%2020:00&station=9410230&product=wind&datum=mllw&units=english&time_zone=lst_ldt&application=web_services&format=json`;\n        const uri = uriWind;\n        \n        //const waterTempuri = `https://tidesandcurrents.noaa.gov/api/datagetter?begin_date=${getCurrentTime}&end_date=${getCurrentTime}&station=9410230&product=water_temperature&datum=mllw&units=english&time_zone=gmt&application=web_services&format=json`;\n        fetch(uri)\n            .then(response => validate(response))\n            .then(data => {\n                this.setState({\n                    station: data.metadata.name,\n                    speed: data.data[0].s,\n                    angle: data.data[0].d,\n                    direction: data.data[0].dr,\n                    gusts: data.data[0].g\n                })\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n\n    }\n    /*\n    {\n        \"metadata\":{\n            \"id\":\"9410230\",\n            \"name\":\"La Jolla\",\n            \"lat\":\"32.8669\",\n            \"lon\":\"-117.2571\"\n        }, \n        \"data\": [\n            {\n                \"t\":\"2020-05-20 20:00\", \n                \"s\":\"5.25\", \n                \"d\":\"313.00\",\n                 \"dr\":\"NW\", \n                 \"g\":\"7.39\", \n                 \"f\":\"0,0\"\n            }\n        ]\n    }\n    */\n    componentDidMount() {\n        \n        this.getWindData();\n        this.timerID = setInterval(\n            () => this.tick(),\n            3000\n        );\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n    tick() {\n        console.log(`getWind ->`);\n        this.getWindData();\n        this.props.setWind(this.state.direction)\n    }\n    /*\n    Water Level: 2.01 ft Above MLLW\n    Next Tide at 3:09 PM: Low 1.70 ft\n    Gusting to: 12.3 kts from WSW\n    */\n    getCurrentWind = () => <div>\n                            {`${this.state.direction} at ${Number(this.state.speed).toFixed(0)}kts`}<br/>\n                            {`${Number(this.state.angle).toFixed(0)}Â°`}<br/>\n                            {`${Number(this.state.gusts).toFixed(0)}knts`}\n                        </div>\n    percent = 'twentyfivePercent mt--70 mb--70';\n    loading = () => <div className={this.percent}>\n                <Loader isMotionOn={this.props.isMotionOn}/>\n            </div>;\n    render() {\n        return <div>{this.getCurrentWind()}</div>\n    };\n}\n\nexport default WindDirection;"]},"metadata":{},"sourceType":"module"}