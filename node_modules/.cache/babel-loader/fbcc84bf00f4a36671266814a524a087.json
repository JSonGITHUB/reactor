{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/Home.js\";\nimport React, { useState } from 'react';\nimport Timer from './Timer.js';\nimport Geolocator from './utils/Geolocator.js';\n\nconst Home = () => {\n  const [longitude, setLongitude] = useState(null);\n  const [latitude, setLatitude] = useState(null);\n  const [distance, setDistance] = useState(0);\n  const [tracking, setTracking] = useState(false);\n  const [markedLongitude, setMarkedLongitude] = useState(null);\n  const [markedLatitude, setMarkedLatitude] = useState(null);\n\n  const calculateDistance = () => {\n    const lat1 = markedLatitude;\n    const lat2 = latitude;\n    const lon1 = markedLongitude;\n    const lon2 = longitude;\n    let unit = \"feet\";\n    console.log(`lat1: ${lat1} === lat2: ${lat2}) && (lon1: ${lon1} === lon2: ${lon2}`);\n\n    if (lat1 === lat2 && lon1 === lon2 || !lat1 || !lat2 || !lon1 || !lon2) {\n      return 0;\n    } else if (tracking === true) {\n      const radlat1 = Math.PI * lat1 / 180;\n      const radlat2 = Math.PI * lat2 / 180;\n      const theta = lon1 - lon2;\n      const radtheta = Math.PI * theta / 180;\n\n      const feetOrYards = dist => dist * 5280 > 30 ? `${(dist * 1760).toFixed(2)} yards` : `${(dist * 5280).toFixed(2)} feet`;\n\n      let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n      if (dist > 1) {\n        dist = 1;\n      }\n\n      dist = Math.acos(dist);\n      dist = dist * 180 / Math.PI;\n      dist = dist * 60 * 1.1515;\n      dist = dist < .25 ? feetOrYards(dist) : `${dist.toFixed(2)} miles`;\n\n      if (unit === \"Kilometers\") {\n        dist = dist * 1.609344;\n      }\n\n      if (unit === \"Nautical\") {\n        dist = dist * 0.8684;\n      }\n\n      console.log(`DISTANCE => ${dist}`);\n      return dist;\n    }\n\n    return distance;\n  };\n\n  const updateCurrentLocation = (longitude, latitude) => {\n    console.log(`UPDATING CURRENT POSITION ======> longitude: ${longitude} latitude: ${latitude}`);\n    setLongitude(longitude);\n    setLatitude(latitude);\n    setDistance(calculateDistance());\n  };\n\n  const startDistance = () => {\n    setTracking(true);\n    setMarkedLatitude(latitude);\n    setMarkedLongitude(longitude);\n  };\n\n  const stopTracking = () => {\n    setTracking(false);\n  };\n\n  const getDistance = () => distance;\n\n  const getTracker = () => {\n    const tracker = tracking === true ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"color-neogreen p-20 bold bigFont100 bg-dkGreen r-5 m-20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, getDistance()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button p-20 r-5 m-20 bg-red incompletedSelector color-yellow\",\n      onClick: stopTracking,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, \"Stop Tracking\")) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"color-neogreen p-20 bold bigFont100 bg-dkGreen r-5 m-20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, distance), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button p-20 r-5 m-20 bg-neogreen completedSelector color-black\",\n      onClick: startDistance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, \"Start Tracking\"));\n    return tracker;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App fadeIn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"App-link bold greet p-20 r-10 w-200 bg-green brdr-green noUnderline\",\n    href: \"https://jsongithub.github.io/portfolio/\",\n    target: \"_self\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, \"portfolio\"), /*#__PURE__*/React.createElement(Timer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }), \"Current position:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 34\n    }\n  }), /*#__PURE__*/React.createElement(Geolocator, {\n    currentPositionExists: \"false\",\n    returnCurrentPosition: updateCurrentLocation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 106\n    }\n  }), getTracker()));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/Home.js"],"names":["React","useState","Timer","Geolocator","Home","longitude","setLongitude","latitude","setLatitude","distance","setDistance","tracking","setTracking","markedLongitude","setMarkedLongitude","markedLatitude","setMarkedLatitude","calculateDistance","lat1","lat2","lon1","lon2","unit","console","log","radlat1","Math","PI","radlat2","theta","radtheta","feetOrYards","dist","toFixed","sin","cos","acos","updateCurrentLocation","startDistance","stopTracking","getDistance","getTracker","tracker"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Timer from './Timer.js';\nimport Geolocator from './utils/Geolocator.js';\n\nconst Home = () => {\n\n    const [longitude, setLongitude] = useState(null);\n    const [latitude, setLatitude] = useState(null);\n    const [distance, setDistance] = useState(0);\n    const [tracking, setTracking] = useState(false);\n    const [markedLongitude, setMarkedLongitude] = useState(null);\n    const [markedLatitude, setMarkedLatitude] = useState(null);\n    \n    const calculateDistance = () => {\n        const lat1 = markedLatitude;\n        const lat2 = latitude;\n        const lon1 = markedLongitude;\n        const lon2 = longitude;\n        let unit = \"feet\"\n        console.log(`lat1: ${lat1} === lat2: ${lat2}) && (lon1: ${lon1} === lon2: ${lon2}`)\n        if (((lat1 === lat2) && (lon1 === lon2)) || (!lat1 || !lat2 || !lon1 || !lon2)) {\n            return 0;\n        } else if (tracking === true) {\n            const radlat1 = Math.PI * lat1/180;\n            const radlat2 = Math.PI * lat2/180;\n            const theta = lon1-lon2;\n            const radtheta = Math.PI * theta/180;\n            const feetOrYards = (dist) => ((dist*5280)>30) ? `${(dist*1760).toFixed(2)} yards` : `${(dist*5280).toFixed(2)} feet`;\n            let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n            if (dist > 1) { dist = 1 }\n            dist = Math.acos(dist);\n            dist = dist * 180/Math.PI;\n            dist = dist * 60 * 1.1515;\n            dist = (dist<.25) ? feetOrYards(dist) : `${dist.toFixed(2)} miles`;\n            if (unit===\"Kilometers\") { dist = dist * 1.609344 }\n            if (unit===\"Nautical\") { dist = dist * 0.8684 }\n            console.log(`DISTANCE => ${dist}`)\n            return dist;\n        }\n        return distance;\n    }\n    const updateCurrentLocation = (longitude, latitude) => {\n        console.log(`UPDATING CURRENT POSITION ======> longitude: ${longitude} latitude: ${latitude}`)\n        setLongitude(longitude);\n        setLatitude(latitude);\n        setDistance(calculateDistance());\n    }\n    const startDistance = () => {\n        setTracking(true);\n        setMarkedLatitude(latitude);\n        setMarkedLongitude(longitude);\n    }\n    const stopTracking = () => {\n        setTracking(false);\n    }\n    const getDistance = () => distance;\n    const getTracker = () => {\n        const tracker = (tracking === true) \n        ? <div>\n            <div className=\"color-neogreen p-20 bold bigFont100 bg-dkGreen r-5 m-20\">{getDistance()}</div>\n            <div className=\"button p-20 r-5 m-20 bg-red incompletedSelector color-yellow\" onClick={stopTracking}>Stop Tracking</div>\n        </div>\n        : <div>\n            <div className=\"color-neogreen p-20 bold bigFont100 bg-dkGreen r-5 m-20\">{distance}</div>\n            <div className=\"button p-20 r-5 m-20 bg-neogreen completedSelector color-black\" onClick={startDistance}>Start Tracking</div>\n        </div>\n\n        return tracker;\n    }\n                \n    return (\n        <div className=\"App fadeIn\">\n            <header className=\"App-content\">\n                <a className=\"App-link bold greet p-20 r-10 w-200 bg-green brdr-green noUnderline\"\n                href=\"https://jsongithub.github.io/portfolio/\"\n                target=\"_self\"\n                rel=\"noopener noreferrer\"\n                >\n                    portfolio\n                </a>\n                {/*<Lister items={[1,2,3]} />*/}\n                <Timer/>\n                Current position:<br/>\n                <Geolocator currentPositionExists=\"false\" returnCurrentPosition={updateCurrentLocation}/><br/>\n                {getTracker()}\n            </header>\n        </div>\n    );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}