{"ast":null,"code":"const CalculateDistance = (state, item) => {\n  const {\n    latitude,\n    longitude\n  } = state;\n  const lat1 = item.latitude;\n  const lat2 = latitude;\n  const lon1 = item.longitude;\n  const lon2 = longitude;\n  const unit = \"Miles\";\n  //console.log(`POOP latitude: ${latitude}\\nlongitude: ${longitude}\\nSTATE: ${JSON.stringify(state, null,2)}`)\n  if (lat1 === lat2 && lon1 === lon2) {\n    return 0;\n  } else {\n    var radlat1 = Math.PI * lat1 / 180;\n    var radlat2 = Math.PI * lat2 / 180;\n    var theta = lon1 - lon2;\n    var radtheta = Math.PI * theta / 180;\n    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    if (dist > 1) {\n      dist = 1;\n    }\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515;\n    dist = dist.toFixed(1);\n    if (unit === \"Kilometers\") {\n      dist = dist * 1.609344;\n    }\n    if (unit === \"Nautical\") {\n      dist = dist * 0.8684;\n    }\n    //console.log(`DISTANCE => ${dist}`)\n    return dist;\n  }\n};\n_c = CalculateDistance;\nexport default CalculateDistance;\nvar _c;\n$RefreshReg$(_c, \"CalculateDistance\");","map":{"version":3,"names":["CalculateDistance","state","item","latitude","longitude","lat1","lat2","lon1","lon2","unit","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","toFixed","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/CalculateDistance.js"],"sourcesContent":["const CalculateDistance = (state, item) => {\n        \n    const { latitude, longitude } = state;\n    const lat1 = item.latitude;\n    const lat2 = latitude;\n    const lon1 = item.longitude;\n    const lon2 = longitude;\n    const unit = \"Miles\"\n    //console.log(`POOP latitude: ${latitude}\\nlongitude: ${longitude}\\nSTATE: ${JSON.stringify(state, null,2)}`)\n    if ((lat1 === lat2) && (lon1 === lon2)) {\n        return 0;\n    } else {\n        var radlat1 = Math.PI * lat1/180;\n        var radlat2 = Math.PI * lat2/180;\n        var theta = lon1-lon2;\n        var radtheta = Math.PI * theta/180;\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n        if (dist > 1) {\n            dist = 1;\n        }\n        dist = Math.acos(dist);\n        dist = dist * 180/Math.PI;\n        dist = dist * 60 * 1.1515;\n        dist = dist.toFixed(1);\n        if (unit===\"Kilometers\") { dist = dist * 1.609344 }\n        if (unit===\"Nautical\") { dist = dist * 0.8684 }\n        //console.log(`DISTANCE => ${dist}`)\n        return dist;\n    }\n}\nexport default CalculateDistance"],"mappings":"AAAA,MAAMA,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,IAAI,KAAK;EAEvC,MAAM;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAGH,KAAK;EACrC,MAAMI,IAAI,GAAGH,IAAI,CAACC,QAAQ;EAC1B,MAAMG,IAAI,GAAGH,QAAQ;EACrB,MAAMI,IAAI,GAAGL,IAAI,CAACE,SAAS;EAC3B,MAAMI,IAAI,GAAGJ,SAAS;EACtB,MAAMK,IAAI,GAAG,OAAO;EACpB;EACA,IAAKJ,IAAI,KAAKC,IAAI,IAAMC,IAAI,KAAKC,IAAK,EAAE;IACpC,OAAO,CAAC;EACZ,CAAC,MAAM;IACH,IAAIE,OAAO,GAAGC,IAAI,CAACC,EAAE,GAAGP,IAAI,GAAC,GAAG;IAChC,IAAIQ,OAAO,GAAGF,IAAI,CAACC,EAAE,GAAGN,IAAI,GAAC,GAAG;IAChC,IAAIQ,KAAK,GAAGP,IAAI,GAACC,IAAI;IACrB,IAAIO,QAAQ,GAAGJ,IAAI,CAACC,EAAE,GAAGE,KAAK,GAAC,GAAG;IAClC,IAAIE,IAAI,GAAGL,IAAI,CAACM,GAAG,CAACP,OAAO,CAAC,GAAGC,IAAI,CAACM,GAAG,CAACJ,OAAO,CAAC,GAAGF,IAAI,CAACO,GAAG,CAACR,OAAO,CAAC,GAAGC,IAAI,CAACO,GAAG,CAACL,OAAO,CAAC,GAAGF,IAAI,CAACO,GAAG,CAACH,QAAQ,CAAC;IAC7G,IAAIC,IAAI,GAAG,CAAC,EAAE;MACVA,IAAI,GAAG,CAAC;IACZ;IACAA,IAAI,GAAGL,IAAI,CAACQ,IAAI,CAACH,IAAI,CAAC;IACtBA,IAAI,GAAGA,IAAI,GAAG,GAAG,GAACL,IAAI,CAACC,EAAE;IACzBI,IAAI,GAAGA,IAAI,GAAG,EAAE,GAAG,MAAM;IACzBA,IAAI,GAAGA,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC;IACtB,IAAIX,IAAI,KAAG,YAAY,EAAE;MAAEO,IAAI,GAAGA,IAAI,GAAG,QAAQ;IAAC;IAClD,IAAIP,IAAI,KAAG,UAAU,EAAE;MAAEO,IAAI,GAAGA,IAAI,GAAG,MAAM;IAAC;IAC9C;IACA,OAAOA,IAAI;EACf;AACJ,CAAC;AAAAK,EAAA,GA7BKrB,iBAAiB;AA8BvB,eAAeA,iBAAiB;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}