{"ast":null,"code":"var audioContext = new AudioContext(),\n  oscillator;\nconst playSound = score => {\n  // Create an oscillator node\n  oscillator = audioContext.createOscillator();\n\n  // Connect the oscillator to the audio context's destination (your speakers)\n  oscillator.connect(audioContext.destination);\n  const treeScores = [5, 10, 55, 60, 105, 110, 155, 160];\n  const treeTotals = [50, 100, 150, 200];\n  const treeClosed = () => treeTotals.includes(score);\n  const isTree = () => treeScores.includes(score);\n  const isTree1 = () => score > 0 && score < 55;\n  const isTree2 = () => score > 50 && score < 105;\n  const isTree3 = () => score > 100 && score < 155;\n  const isTree4 = () => score > 150;\n  const isTreeComplete = () => score > 150;\n  // Set the oscillator type to 'sine' (you can experiment with other types like 'square', 'sawtooth', 'triangle')\n\n  const getType = () => score === winner || treeClosed() ? 'sawtooth' : 'triagle';\n  oscillator.type = getType();\n\n  //const note = (treeClosed()) ? 1000 : (440 + (score * 2));\n  const note = treeClosed() ? 1000 : 440;\n  // Set the frequency (Hz) - in this case, 440 Hz is an 'A' note\n  oscillator.frequency.setValueAtTime(note, audioContext.currentTime);\n\n  // Start the oscillator\n  oscillator.start();\n  const soundLength = score == winner ? 1 : 0.05;\n  // Stop the oscillator after 0.5 seconds (you can adjust this time)\n  oscillator.stop(audioContext.currentTime + soundLength);\n};\nvar audioContext = new AudioContext(),\n  oscillator1;\nconst playSiren = () => {\n  let highPitch = false;\n  const getHighPitch = () => {\n    highPitch = !highPitch;\n    return highPitch;\n  };\n\n  //const AudioContext = window.AudioContext || window.webkitAudioContext;\n  //const audioContext = new AudioContext();\n\n  oscillator1 = audioContext.createOscillator();\n  oscillator1.type = 'sine'; // First oscillator is a sine wave\n  oscillator1.frequency.setValueAtTime(400, audioContext.currentTime);\n  const oscillator2 = audioContext.createOscillator();\n  oscillator2.type = 'sine'; // Second oscillator is a square wave\n  oscillator2.frequency.setValueAtTime(400, audioContext.currentTime);\n\n  // Gain nodes to control volume\n  const gainNode1 = audioContext.createGain();\n  const gainNode2 = audioContext.createGain();\n  oscillator1.connect(gainNode1);\n  oscillator2.connect(gainNode2);\n  gainNode1.connect(audioContext.destination);\n  gainNode2.connect(audioContext.destination);\n  oscillator1.start();\n  oscillator2.start();\n  const sirenInterval = setInterval(() => {\n    const frequency = getHighPitch() ? 1200 : 400; // Random frequency between 400 and 1200 Hz\n    oscillator1.frequency.setValueAtTime(frequency, audioContext.currentTime);\n    oscillator2.frequency.setValueAtTime(frequency, audioContext.currentTime);\n  }, 100); // Change frequency every 10th of a second\n\n  // Stop the siren after 10 seconds\n  setTimeout(() => {\n    clearInterval(sirenInterval);\n    oscillator1.stop();\n    oscillator2.stop();\n  }, 2000);\n};","map":{"version":3,"names":["audioContext","AudioContext","oscillator","playSound","score","createOscillator","connect","destination","treeScores","treeTotals","treeClosed","includes","isTree","isTree1","isTree2","isTree3","isTree4","isTreeComplete","getType","winner","type","note","frequency","setValueAtTime","currentTime","start","soundLength","stop","oscillator1","playSiren","highPitch","getHighPitch","oscillator2","gainNode1","createGain","gainNode2","sirenInterval","setInterval","setTimeout","clearInterval"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Sounds.js"],"sourcesContent":["var audioContext = new AudioContext(),\noscillator;\n\nconst playSound = (score) => {\n\n    // Create an oscillator node\n    oscillator = audioContext.createOscillator();\n\n    // Connect the oscillator to the audio context's destination (your speakers)\n    oscillator.connect(audioContext.destination);\n\n    const treeScores = [5, 10, 55, 60, 105, 110, 155, 160];\n    const treeTotals = [50, 100, 150, 200];\n    const treeClosed = () => treeTotals.includes(score);\n    const isTree = () => treeScores.includes(score);\n    const isTree1 = () => (score > 0 && score < 55);\n    const isTree2 = () => (score > 50 && score < 105);\n    const isTree3 = () => (score > 100 && score < 155);\n    const isTree4 = () => (score > 150);\n    const isTreeComplete = () => (score > 150);\n    // Set the oscillator type to 'sine' (you can experiment with other types like 'square', 'sawtooth', 'triangle')\n\n    const getType = () => (score === winner || treeClosed()) ? 'sawtooth' : 'triagle';\n    oscillator.type = getType();\n\n    //const note = (treeClosed()) ? 1000 : (440 + (score * 2));\n    const note = (treeClosed()) ? 1000 : 440;\n    // Set the frequency (Hz) - in this case, 440 Hz is an 'A' note\n    oscillator.frequency.setValueAtTime(note, audioContext.currentTime);\n\n    // Start the oscillator\n    oscillator.start();\n\n    const soundLength = (score == winner) ? 1 : 0.05;\n    // Stop the oscillator after 0.5 seconds (you can adjust this time)\n    oscillator.stop(audioContext.currentTime + soundLength);\n}\n\nvar audioContext = new AudioContext(),\n    oscillator1;\n\nconst playSiren = () => {\n\n    let highPitch = false;\n\n    const getHighPitch = () => {\n        highPitch = !highPitch;\n        return highPitch;\n    }\n\n    //const AudioContext = window.AudioContext || window.webkitAudioContext;\n    //const audioContext = new AudioContext();\n\n    oscillator1 = audioContext.createOscillator();\n    oscillator1.type = 'sine'; // First oscillator is a sine wave\n    oscillator1.frequency.setValueAtTime(400, audioContext.currentTime);\n\n    const oscillator2 = audioContext.createOscillator();\n    oscillator2.type = 'sine'; // Second oscillator is a square wave\n    oscillator2.frequency.setValueAtTime(400, audioContext.currentTime);\n\n    // Gain nodes to control volume\n    const gainNode1 = audioContext.createGain();\n    const gainNode2 = audioContext.createGain();\n\n    oscillator1.connect(gainNode1);\n    oscillator2.connect(gainNode2);\n\n    gainNode1.connect(audioContext.destination);\n    gainNode2.connect(audioContext.destination);\n\n    oscillator1.start();\n    oscillator2.start();\n\n    const sirenInterval = setInterval(() => {\n        const frequency = (getHighPitch()) ? 1200 : 400; // Random frequency between 400 and 1200 Hz\n        oscillator1.frequency.setValueAtTime(frequency, audioContext.currentTime);\n        oscillator2.frequency.setValueAtTime(frequency, audioContext.currentTime);\n    }, 100); // Change frequency every 10th of a second\n\n    // Stop the siren after 10 seconds\n    setTimeout(() => {\n        clearInterval(sirenInterval);\n        oscillator1.stop();\n        oscillator2.stop();\n    }, 2000);\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}