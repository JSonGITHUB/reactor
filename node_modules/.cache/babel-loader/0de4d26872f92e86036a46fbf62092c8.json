{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/waves/PostDirectory.js\";\nimport React, { useState } from 'react';\n\nconst PostDirectory = () => {\n  const [postDirectory, setPostDirectory] = useState(localStorage.getItem(\"postDirectory\") === null) ? [] : JSON.parse(localStorage.getItem(\"postDirectory\"));\n  const [uniquePosts, setUniquePosts] = useState([...new Set(postDirectory)]);\n  const [index, setIndex] = useState(uniquePosts.indexOf(null));\n\n  if (index > -1) {\n    setUniquePosts(uniquePosts.splice(index, 1));\n  }\n\n  localStorage.setItem(\"postDirectory\", JSON.stringify(uniquePosts));\n  postDirectory !== [] ? setPostDirectory(uniquePosts) : setPostDirectory([]);\n\n  const getDirectory = () => postDirectory;\n\n  const removeLastId = () => setPostDirectory(postDirectory.pop());\n\n  const deleteLast = () => {\n    console.log(`PostDirectory => deleteLast()`);\n    setPostDirectory(removeLastId());\n    localStorage.setItem(\"postDirectory\", JSON.stringify(postDirectory));\n  };\n\n  const add = id => {\n    console.log(`PostDirectory => add(${id})`);\n    const pDirectory = postDirectory;\n    pDirectory.push(id);\n    setPostDirectory(pDirectory);\n    localStorage.setItem(\"postDirectory\", JSON.stringify(pDirectory));\n  };\n\n  const getLastIndex = () => Number(postDirectory.length - 1);\n\n  const getLastId = () => postDirectory[getLastIndex()];\n\n  const get2ndToLastId = () => postDirectory[getLastIndex() - 1];\n\n  const getStorageItem = id => localStorage.getItem(id);\n\n  const getLastItem = () => localStorage.getItem(getLastId()) === null ? JSON.parse(getStorageItem(get2ndToLastId())) : JSON.parse(getStorageItem(getLastId()));\n\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, \"Count: \", postDirectory.length);\n};\n\nexport default PostDirectory;\n/* backup pre hooks 1/7/21\nimport React from 'react';\nclass PostDirectory extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.postDirectory = (localStorage.getItem(\"postDirectory\") === null) ? [] : JSON.parse(localStorage.getItem(\"postDirectory\"));        \n        this.uniquePosts = [...new Set(this.postDirectory)];\n        const index = this.uniquePosts.indexOf(null);\n        if (index > -1) {\n            this.uniquePosts.splice(index, 1);\n        }\n        localStorage.setItem(\"postDirectory\", JSON.stringify(this.uniquePosts))\n        this.state = {\n            postDirectory: this.uniquePosts,\n        };\n    }\n    \n     getDirectory = () => this.postDirectory;\n     removeLastId = () => this.postDirectory.pop();\n     deleteLast = () => {\n         console.log(`PostDirectory => deleteLast()`)\n         this.postDirectory = this.removeLastId();\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n         this.setState({\n             postDirectory: this.postDirectory\n         }); \n     }\n     add = (id) => {\n         console.log(`PostDirectory => add(${id})`);\n         this.postDirectory.push(id);\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n     }\n     delete = (id) => {\n         console.log(`PostDirectory => delete(${id})`)\n         const index = this.postDirectory.indexOf(String(id));\n         console.log(`${index} of ${this.postDirectory.length}`)\n         this.postDirectory.splice(index, 1);\n         console.log(`${index} of ${this.postDirectory.length}`)\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n         localStorage.removeItem(id);\n         localStorage.setItem(\"lastPostId\", `${this.postDirectory[this.postDirectory.length-1]}`);\n         this.setState({\n             postDirectory: this.postDirectory\n         });\n     }\n     getLastIndex = () => Number(this.state.postDirectory.length-1);\n     getLastId = () => this.state.postDirectory[this.getLastIndex()];\n     get2ndToLastId = () => this.state.postDirectory[this.getLastIndex()-1];\n     getStorageItem = (id) => localStorage.getItem(id)\n     getLastItem = () => (localStorage.getItem(this.getLastId()) === null) ? JSON.parse(this.getStorageItem(this.get2ndToLastId())) : JSON.parse(this.getStorageItem(this.getLastId()));\n     render() {      \n             return <p>Count: {this.state.postDirectory.length}</p> \n     }\n     \n }\n export default PostDirectory;\n*/","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/waves/PostDirectory.js"],"names":["React","useState","PostDirectory","postDirectory","setPostDirectory","localStorage","getItem","JSON","parse","uniquePosts","setUniquePosts","Set","index","setIndex","indexOf","splice","setItem","stringify","getDirectory","removeLastId","pop","deleteLast","console","log","add","id","pDirectory","push","getLastIndex","Number","length","getLastId","get2ndToLastId","getStorageItem","getLastItem"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nconst PostDirectory = () => {\n\n    const [postDirectory, setPostDirectory] = useState(localStorage.getItem(\"postDirectory\") === null) ? [] : JSON.parse(localStorage.getItem(\"postDirectory\"));        \n    const [uniquePosts, setUniquePosts] = useState([...new Set(postDirectory)]);\n    const [index, setIndex] = useState(uniquePosts.indexOf(null));\n    if (index > -1) {\n        setUniquePosts(uniquePosts.splice(index, 1));\n    }\n    localStorage.setItem(\"postDirectory\", JSON.stringify(uniquePosts));\n    (postDirectory !== []) ? setPostDirectory(uniquePosts) : setPostDirectory([]);\n    \n    const getDirectory = () => postDirectory;\n    const removeLastId = () => setPostDirectory(postDirectory.pop());\n\n    const deleteLast = () => {\n         console.log(`PostDirectory => deleteLast()`)\n         setPostDirectory(removeLastId());\n         localStorage.setItem(\"postDirectory\", JSON.stringify(postDirectory))\n     }\n     const add = (id) => {\n         console.log(`PostDirectory => add(${id})`);\n         const pDirectory = postDirectory;\n         pDirectory.push(id)\n         setPostDirectory(pDirectory);\n         localStorage.setItem(\"postDirectory\", JSON.stringify(pDirectory))\n     }\n     \n     const getLastIndex = () => Number(postDirectory.length-1);\n     const getLastId = () => postDirectory[getLastIndex()];\n     const get2ndToLastId = () => postDirectory[getLastIndex()-1];\n     const getStorageItem = (id) => localStorage.getItem(id)\n     const getLastItem = () => (localStorage.getItem(getLastId()) === null) ? JSON.parse(getStorageItem(get2ndToLastId())) : JSON.parse(getStorageItem(getLastId()));\n     \n     return <p>Count: {postDirectory.length}</p> \n     \n }\n export default PostDirectory;\n\n/* backup pre hooks 1/7/21\nimport React from 'react';\nclass PostDirectory extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.postDirectory = (localStorage.getItem(\"postDirectory\") === null) ? [] : JSON.parse(localStorage.getItem(\"postDirectory\"));        \n        this.uniquePosts = [...new Set(this.postDirectory)];\n        const index = this.uniquePosts.indexOf(null);\n        if (index > -1) {\n            this.uniquePosts.splice(index, 1);\n        }\n        localStorage.setItem(\"postDirectory\", JSON.stringify(this.uniquePosts))\n        this.state = {\n            postDirectory: this.uniquePosts,\n        };\n    }\n    \n     getDirectory = () => this.postDirectory;\n     removeLastId = () => this.postDirectory.pop();\n     deleteLast = () => {\n         console.log(`PostDirectory => deleteLast()`)\n         this.postDirectory = this.removeLastId();\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n         this.setState({\n             postDirectory: this.postDirectory\n         }); \n     }\n     add = (id) => {\n         console.log(`PostDirectory => add(${id})`);\n         this.postDirectory.push(id);\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n     }\n     delete = (id) => {\n         console.log(`PostDirectory => delete(${id})`)\n         const index = this.postDirectory.indexOf(String(id));\n         console.log(`${index} of ${this.postDirectory.length}`)\n         this.postDirectory.splice(index, 1);\n         console.log(`${index} of ${this.postDirectory.length}`)\n         localStorage.setItem(\"postDirectory\", JSON.stringify(this.postDirectory))\n         localStorage.removeItem(id);\n         localStorage.setItem(\"lastPostId\", `${this.postDirectory[this.postDirectory.length-1]}`);\n         this.setState({\n             postDirectory: this.postDirectory\n         });\n     }\n     getLastIndex = () => Number(this.state.postDirectory.length-1);\n     getLastId = () => this.state.postDirectory[this.getLastIndex()];\n     get2ndToLastId = () => this.state.postDirectory[this.getLastIndex()-1];\n     getStorageItem = (id) => localStorage.getItem(id)\n     getLastItem = () => (localStorage.getItem(this.getLastId()) === null) ? JSON.parse(this.getStorageItem(this.get2ndToLastId())) : JSON.parse(this.getStorageItem(this.getLastId()));\n     render() {      \n             return <p>Count: {this.state.postDirectory.length}</p> \n     }\n     \n }\n export default PostDirectory;\n*/"]},"metadata":{},"sourceType":"module"}