{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/TextColorizer.js\";\nimport React from 'react';\n\nclass TextColorizer extends React.Component {\n  constructor(text) {\n    super();\n\n    this.colorize = (value, index, array) => {\n      //console.log(\"index: \" + index); \n      //console.log(\"array: \" + array); \n      //console.log(\"value: \" + value);\n      const character = value;\n      const colorizedCharacter = `<span className=\"${this.getNextColor(this.colorIndex)}\">${character}</span>`;\n      return colorizedCharacter;\n    };\n\n    this.text = text.text; //console.log(`text: ${text.text}`);\n  } //    total = (text, character) => text + `<span className=\"${this.getNextColor(this.colorIndex)}\">${character}</span>`;\n\n\n  render() {\n    const colors = [\"color-green\", \"color-yellow\", \"color-red\"];\n    let colorIndex = -1;\n\n    const getNextColor = () => {\n      colorIndex = colorIndex === colors.length - 1 ? 0 : colorIndex + 1;\n      console.log(colorIndex);\n      return colors[colorIndex];\n    };\n\n    const span = `<CharacterElement className=${getNextColor()} text={\"TEST\"} />`;\n    const letters = this.text.split('');\n\n    const spans = (text, character) => text + span;\n\n    console.log(\"total: \" + letters.reduce(spans));\n    letters.reduce(spans);\n    console.log(`letters: ${letters}`); //return <div className=\"bigHeader\">{this.text.split('').reduce(spans)}</div>;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bigHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 16\n      }\n    }, span);\n  }\n\n}\n\nexport default TextColorizer;\n\nfunction CharacterElement(props) {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: props.className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, props.text);\n}","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/TextColorizer.js"],"names":["React","TextColorizer","Component","constructor","text","colorize","value","index","array","character","colorizedCharacter","getNextColor","colorIndex","render","colors","length","console","log","span","letters","split","spans","reduce","CharacterElement","props","className"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,aAAN,SAA4BD,KAAK,CAACE,SAAlC,CAA4C;AAExCC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd;;AADc,SAQlBC,QARkB,GAQP,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,KAAyB;AAChC;AACA;AACA;AACA,YAAMC,SAAS,GAAGH,KAAlB;AACA,YAAMI,kBAAkB,GAAI,oBAAmB,KAAKC,YAAL,CAAkB,KAAKC,UAAvB,CAAmC,KAAIH,SAAU,SAAhG;AACA,aAAOC,kBAAP;AACH,KAfiB;;AAEd,SAAKN,IAAL,GAAYA,IAAI,CAACA,IAAjB,CAFc,CAGd;AACH,GANuC,CAQ5C;;;AAUIS,EAAAA,MAAM,GAAG;AACL,UAAMC,MAAM,GAAG,CAAC,aAAD,EAAgB,cAAhB,EAAgC,WAAhC,CAAf;AACA,QAAIF,UAAU,GAAG,CAAC,CAAlB;;AACA,UAAMD,YAAY,GAAG,MAAM;AACvBC,MAAAA,UAAU,GAAIA,UAAU,KAAME,MAAM,CAACC,MAAP,GAAc,CAA/B,GAAqC,CAArC,GAA0CH,UAAU,GAAG,CAApE;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACA,aAAOE,MAAM,CAACF,UAAD,CAAb;AACH,KAJD;;AAKA,UAAMM,IAAI,GAAI,+BAA8BP,YAAY,EAAG,mBAA3D;AACA,UAAMQ,OAAO,GAAG,KAAKf,IAAL,CAAUgB,KAAV,CAAgB,EAAhB,CAAhB;;AACA,UAAMC,KAAK,GAAG,CAACjB,IAAD,EAAOK,SAAP,KAAqBL,IAAI,GAAGc,IAA1C;;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYE,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAxB;AACAF,IAAAA,OAAO,CAACG,MAAR,CAAeD,KAAf;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAWE,OAAQ,EAAhC,EAbK,CAcL;;AACA,wBAAO;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BD,IAA5B,CAAP;AACH;;AAlCuC;;AAqC5C,eAAejB,aAAf;;AAEA,SAASsB,gBAAT,CAA0BC,KAA1B,EAAiC;AAC7B,sBACI;AAAM,IAAA,SAAS,EAAEA,KAAK,CAACC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,KAAK,CAACpB,IADX,CADJ;AAKH","sourcesContent":["import React from 'react';\nclass TextColorizer extends React.Component {\n    text;\n    constructor(text) {\n        super();\n        this.text = text.text;\n        //console.log(`text: ${text.text}`);\n    }\n    \n//    total = (text, character) => text + `<span className=\"${this.getNextColor(this.colorIndex)}\">${character}</span>`;\n    \n    colorize = (value, index, array) => {\n        //console.log(\"index: \" + index); \n        //console.log(\"array: \" + array); \n        //console.log(\"value: \" + value);\n        const character = value;\n        const colorizedCharacter = `<span className=\"${this.getNextColor(this.colorIndex)}\">${character}</span>`;\n        return colorizedCharacter;\n    }\n    render() {\n        const colors = [\"color-green\", \"color-yellow\", \"color-red\"];\n        let colorIndex = -1;\n        const getNextColor = () => { \n            colorIndex = (colorIndex === (colors.length-1)) ? 0 : (colorIndex + 1);\n            console.log(colorIndex)\n            return colors[colorIndex];\n        };\n        const span = `<CharacterElement className=${getNextColor()} text={\"TEST\"} />`;\n        const letters = this.text.split('');\n        const spans = (text, character) => text + span;\n        console.log(\"total: \" + letters.reduce(spans));\n        letters.reduce(spans);\n        console.log(`letters: ${letters}`);\n        //return <div className=\"bigHeader\">{this.text.split('').reduce(spans)}</div>;\n        return <div className=\"bigHeader\">{span}</div>;\n    }\n}\n\nexport default TextColorizer;\n\nfunction CharacterElement(props) {\n    return (\n        <span className={props.className}>\n            {props.text}\n        </span>\n    );\n}\n  "]},"metadata":{},"sourceType":"module"}