{"ast":null,"code":"import React, { useEffect, useState } from 'react';\n\nconst CalculateDistance = () => {\n  calculateDistance = (state, item) => {\n    const {\n      latitude,\n      longitude\n    } = state;\n    const lat1 = item.latitude;\n    const lat2 = latitude;\n    const lon1 = item.longitude;\n    const lon2 = longitude;\n    const unit = \"Miles\";\n\n    if (lat1 === lat2 && lon1 === lon2) {\n      return 0;\n    } else {\n      var radlat1 = Math.PI * lat1 / 180;\n      var radlat2 = Math.PI * lat2 / 180;\n      var theta = lon1 - lon2;\n      var radtheta = Math.PI * theta / 180;\n      var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n      if (dist > 1) {\n        dist = 1;\n      }\n\n      dist = Math.acos(dist);\n      dist = dist * 180 / Math.PI;\n      dist = dist * 60 * 1.1515;\n      dist = dist.toFixed(1);\n\n      if (unit === \"Kilometers\") {\n        dist = dist * 1.609344;\n      }\n\n      if (unit === \"Nautical\") {\n        dist = dist * 0.8684;\n      } //console.log(`DISTANCE => ${dist}`)\n\n\n      return dist;\n    }\n  };\n};\n\nexport default CalculateDistance;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/CalculateDistance.js"],"names":["React","useEffect","useState","CalculateDistance","calculateDistance","state","item","latitude","longitude","lat1","lat2","lon1","lon2","unit","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","toFixed"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAE5BC,EAAAA,iBAAiB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACjC,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0BH,KAAhC;AACA,UAAMI,IAAI,GAAGH,IAAI,CAACC,QAAlB;AACA,UAAMG,IAAI,GAAGH,QAAb;AACA,UAAMI,IAAI,GAAGL,IAAI,CAACE,SAAlB;AACA,UAAMI,IAAI,GAAGJ,SAAb;AACA,UAAMK,IAAI,GAAG,OAAb;;AACA,QAAKJ,IAAI,KAAKC,IAAV,IAAoBC,IAAI,KAAKC,IAAjC,EAAwC;AACpC,aAAO,CAAP;AACH,KAFD,MAEO;AACH,UAAIE,OAAO,GAAGC,IAAI,CAACC,EAAL,GAAUP,IAAV,GAAe,GAA7B;AACA,UAAIQ,OAAO,GAAGF,IAAI,CAACC,EAAL,GAAUN,IAAV,GAAe,GAA7B;AACA,UAAIQ,KAAK,GAAGP,IAAI,GAACC,IAAjB;AACA,UAAIO,QAAQ,GAAGJ,IAAI,CAACC,EAAL,GAAUE,KAAV,GAAgB,GAA/B;AACA,UAAIE,IAAI,GAAGL,IAAI,CAACM,GAAL,CAASP,OAAT,IAAoBC,IAAI,CAACM,GAAL,CAASJ,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASR,OAAT,IAAoBC,IAAI,CAACO,GAAL,CAASL,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASH,QAAT,CAA3F;;AACA,UAAIC,IAAI,GAAG,CAAX,EAAc;AACVA,QAAAA,IAAI,GAAG,CAAP;AACH;;AACDA,MAAAA,IAAI,GAAGL,IAAI,CAACQ,IAAL,CAAUH,IAAV,CAAP;AACAA,MAAAA,IAAI,GAAGA,IAAI,GAAG,GAAP,GAAWL,IAAI,CAACC,EAAvB;AACAI,MAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAY,MAAnB;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACI,OAAL,CAAa,CAAb,CAAP;;AACA,UAAIX,IAAI,KAAG,YAAX,EAAyB;AAAEO,QAAAA,IAAI,GAAGA,IAAI,GAAG,QAAd;AAAwB;;AACnD,UAAIP,IAAI,KAAG,UAAX,EAAuB;AAAEO,QAAAA,IAAI,GAAGA,IAAI,GAAG,MAAd;AAAsB,OAd5C,CAeH;;;AACA,aAAOA,IAAP;AACH;AACJ,GA3BD;AA4BH,CA9BD;;AA+BA,eAAejB,iBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst CalculateDistance = () => {\n    \n    calculateDistance = (state, item) => {\n        const { latitude, longitude } = state;\n        const lat1 = item.latitude;\n        const lat2 = latitude;\n        const lon1 = item.longitude;\n        const lon2 = longitude;\n        const unit = \"Miles\"\n        if ((lat1 === lat2) && (lon1 === lon2)) {\n            return 0;\n        } else {\n            var radlat1 = Math.PI * lat1/180;\n            var radlat2 = Math.PI * lat2/180;\n            var theta = lon1-lon2;\n            var radtheta = Math.PI * theta/180;\n            var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n            if (dist > 1) {\n                dist = 1;\n            }\n            dist = Math.acos(dist);\n            dist = dist * 180/Math.PI;\n            dist = dist * 60 * 1.1515;\n            dist = dist.toFixed(1);\n            if (unit===\"Kilometers\") { dist = dist * 1.609344 }\n            if (unit===\"Nautical\") { dist = dist * 0.8684 }\n            //console.log(`DISTANCE => ${dist}`)\n            return dist;\n        }\n    }\n}\nexport default CalculateDistance"]},"metadata":{},"sourceType":"module"}