{"ast":null,"code":"import getSurfTotal from './GetSurfTotal.js';\nimport findTwoHighestIndices from './FindTwoHighestIndices.js';\nconst rankStatus = (player, index) => {\n  const score = getSurfTotal(player);\n  const scoreDifference = Number(players[index === 0 ? 0 : index - 1].surfScore - players[index === 0 ? 1 : index].surfScore);\n  const difference = scoreDifference < 0 ? -1 * scoreDifference : scoreDifference;\n  const winningScore = Number(players[index === 0 ? 0 : index < 3 ? index - 1 : 1].surfScore);\n  const highestScoresIndices = findTwoHighestIndices(players[index].surfScores);\n  const losersHeighestScore = players[index].surfScores[highestScoresIndices[0]];\n  const need = winningScore - losersHeighestScore + .01;\n  const winsBy = `Wins by ${difference.toFixed(2)}`;\n  const needs = `Needs ${need.toFixed(2)}`;\n  if (index === 0) {\n    return winsBy;\n  }\n  return needs;\n};\nexport default rankStatus;","map":{"version":3,"names":["getSurfTotal","findTwoHighestIndices","rankStatus","player","index","score","scoreDifference","Number","players","surfScore","difference","winningScore","highestScoresIndices","surfScores","losersHeighestScore","need","winsBy","toFixed","needs"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/RankStatus.js"],"sourcesContent":["import getSurfTotal from './GetSurfTotal.js';\nimport findTwoHighestIndices from './FindTwoHighestIndices.js';\n\nconst rankStatus = (player, index) => {\n    const score = getSurfTotal(player);\n    const scoreDifference = Number(players[(index === 0) ? 0 : (index - 1)].surfScore - players[(index === 0) ? 1 : (index)].surfScore);\n    const difference = (scoreDifference < 0) ? (-1 * scoreDifference) : scoreDifference;\n    const winningScore = Number(players[(index === 0) ? 0 : ((index < 3) ? (index - 1) : 1)].surfScore);\n    const highestScoresIndices = findTwoHighestIndices(players[index].surfScores);\n    const losersHeighestScore = players[index].surfScores[highestScoresIndices[0]];\n    const need = (winningScore - losersHeighestScore) + .01;\n    const winsBy = `Wins by ${difference.toFixed(2)}`;\n    const needs = `Needs ${need.toFixed(2)}`;\n    if (index === 0) {\n        return winsBy;\n    }\n    return needs;\n}\nexport default rankStatus;"],"mappings":"AAAA,OAAOA,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,qBAAqB,MAAM,4BAA4B;AAE9D,MAAMC,UAAU,GAAGA,CAACC,MAAM,EAAEC,KAAK,KAAK;EAClC,MAAMC,KAAK,GAAGL,YAAY,CAACG,MAAM,CAAC;EAClC,MAAMG,eAAe,GAAGC,MAAM,CAACC,OAAO,CAAEJ,KAAK,KAAK,CAAC,GAAI,CAAC,GAAIA,KAAK,GAAG,CAAE,CAAC,CAACK,SAAS,GAAGD,OAAO,CAAEJ,KAAK,KAAK,CAAC,GAAI,CAAC,GAAIA,KAAM,CAAC,CAACK,SAAS,CAAC;EACnI,MAAMC,UAAU,GAAIJ,eAAe,GAAG,CAAC,GAAK,CAAC,CAAC,GAAGA,eAAe,GAAIA,eAAe;EACnF,MAAMK,YAAY,GAAGJ,MAAM,CAACC,OAAO,CAAEJ,KAAK,KAAK,CAAC,GAAI,CAAC,GAAKA,KAAK,GAAG,CAAC,GAAKA,KAAK,GAAG,CAAC,GAAI,CAAE,CAAC,CAACK,SAAS,CAAC;EACnG,MAAMG,oBAAoB,GAAGX,qBAAqB,CAACO,OAAO,CAACJ,KAAK,CAAC,CAACS,UAAU,CAAC;EAC7E,MAAMC,mBAAmB,GAAGN,OAAO,CAACJ,KAAK,CAAC,CAACS,UAAU,CAACD,oBAAoB,CAAC,CAAC,CAAC,CAAC;EAC9E,MAAMG,IAAI,GAAIJ,YAAY,GAAGG,mBAAmB,GAAI,GAAG;EACvD,MAAME,MAAM,GAAI,WAAUN,UAAU,CAACO,OAAO,CAAC,CAAC,CAAE,EAAC;EACjD,MAAMC,KAAK,GAAI,SAAQH,IAAI,CAACE,OAAO,CAAC,CAAC,CAAE,EAAC;EACxC,IAAIb,KAAK,KAAK,CAAC,EAAE;IACb,OAAOY,MAAM;EACjB;EACA,OAAOE,KAAK;AAChB,CAAC;AACD,eAAehB,UAAU"},"metadata":{},"sourceType":"module"}