{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/ScoreKeeper.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ScoreCard from './ScoreCard.js';\nimport CricketScore from './CricketScore.js';\nimport Dominos from './Dominos.js';\nimport SurfScores from './SurfScores.js';\nimport Selector from '../forms/FunctionalSelector.js';\nimport getKey from '../utils/KeyGenerator.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScoreKeeper = () => {\n  _s();\n  const initPlayers = ['You', 'Me'];\n  const initScores = localStorage.getItem('twoPlayerScores') || [0, 0];\n  const games = ['standard', 'ping pong', 'golf', 'cornhole', 'darts', 'dominos', 'horse', 'horseshoes', 'bocci', 'surf'];\n  const winners = [5, 10, 11, 15, 20, 21];\n  const dominoWinners = [50, 100, 150, 200];\n  const heatLengths = [.5, 1, 3, 15, 20, 30, 45, 60];\n  const [players, setPlayers] = useState(JSON.parse(localStorage.getItem('players')) || initPlayers);\n  //const [ editStatus, setEdit ] = useState(false);\n  const [game, setGame] = useState(localStorage.getItem('game') || 'standard');\n  const [winner, setWinner] = useState(Number(localStorage.getItem('winner')) || 21);\n  const [twoPlayerScores, setTwoPlayerScores] = useState(initScores);\n  //const [timerOn, setTimerOn] = useState(false);\n  const [time, setTime] = useState(60 * 60); // Initial time in seconds (e.g., 1 hour)\n  //const [timesUp, setTimesUp] = useState(false);\n  //const [heatLength, setHeatLength] = useState(60 * 60);\n  const [waveCount, setWaveCount] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  const [sortedPlayers, setSortedPlayers] = useState([]);\n  const [sortedScores, setSortedScores] = useState([]);\n  //const [surfersScores, setSurfersScores] = useState(JSON.parse(localStorage.getItem('surfersScores')) || [])\n  //const [ twoPlayerWinner, setTwoPlayerWinner ] = useState(null);\n  const darts = game !== 'darts' ? false : true;\n  const dominos = game !== 'dominos' ? false : true;\n  const surf = game !== 'surf' ? false : true;\n  const golf = game !== 'golf' ? false : true;\n  const cricketKey = (player, index) => `${player}Cricket${index}`;\n  const golfKey = (player, index) => `${player}Golf${index}`;\n  const surfKey = (player, index) => `${player}Surf${index}`;\n  const dominoKey = (player, index) => `${player}Domino${index}`;\n  //const dartsScores = ['-','/', 'X', 'O'];\n  const dartScoring = [20, 19, 18, 17, 16, 15, 'B'];\n  const golfScoring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\n  //const surfScoring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const golfPars = [4, 3, 3, 5, 4, 4, 3, 3, 5, 5, 4, 5, 4, 5, 4, 4, 4, 5];\n  const dominoScoring = [50, 100, 150, 200];\n  const [gameStatus, setGameStatus] = useState(localStorage.getItem('gameStatus') || 'inProgress');\n  /*\n  const playerScores = [\n      { name: 'Player 1', scores: [90, 85, 92, 78, 95, 87, 84, 89, 91, 88] },\n      { name: 'Player 2', scores: [75, 82, 80, 79, 88, 84, 76, 85, 90, 81] },\n      { name: 'Player 3', scores: [86, 82, 90, 88, 91, 79, 85, 87, 83, 89] },\n  ];\n  */\n  const formatTime = timeInSeconds => {\n    const hours = Math.floor(timeInSeconds / 3600);\n    const minutes = Math.floor(timeInSeconds % 3600 / 60);\n    const seconds = timeInSeconds % 60;\n    const formattedHours = hours.toString().padStart(2, '0');\n    const formattedMinutes = minutes.toString().padStart(2, '0');\n    const formattedSeconds = seconds.toString().padStart(2, '0');\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n  };\n  /*\n  useEffect(() => {\n      let intervalId;\n      if (timerOn) {\n          intervalId = setInterval(() => {\n              setTime((prevTime) => {\n                  const newTime = prevTime - 1;\n                  if (newTime <= 0) {\n                      clearInterval(intervalId);\n                      setTimesUp(true);\n                      return 0;\n                  }\n                  return newTime;\n              });\n          }, 1000);\n      }\n       return () => clearInterval(intervalId);\n  }, [timerOn]);\n  */\n  /*\n  useEffect(() => {\n      if (timesUp) {\n          setTimerOn(false);\n          setTime(heatLength);\n          console.log(`heatLength: ${heatLength}`)\n          setTimesUp(false);\n      }\n  }, [timesUp]);\n  */\n  /*\n  useEffect(() => {\n       const playerData = players.map((player, index) => ({ player, score: surfersScores[index] }));\n      playerData.sort((a, b) => b.score - a.score);\n       const sortedPlayers = playerData.map((data) => data.player);\n      const sortedScores = playerData.map((data) => data.score);\n       setSortedPlayers(sortedPlayers);\n      setSortedScores(sortedScores);\n       localStorage.setItem('players', JSON.stringify(sortedPlayers));\n      localStorage.setItem('surfersScores', JSON.stringify(sortedScores));\n   }, [players, surfersScores]);\n  */\n  /*\n  const toggleTimer = () => {\n      if (timerOn) {\n          setTimerOn(false)\n      } else {\n          setTimerOn(true)\n      }\n  }\n  */\n  if (darts && winner !== 21) {\n    localStorage.setItem('winner', 21);\n    setWinner(Number(localStorage.getItem('winner')));\n  }\n  /*\n  if (dominos && winner !== 200) {\n      localStorage.setItem('winner', 200);\n      setWinner(Number(localStorage.getItem('winner')));\n  }\n  */\n  const getDartTotal = player => {\n    let total = 0;\n    const score = index => localStorage.getItem(cricketKey(player, index)) || 0;\n    const addToTotal = value => total = total + value;\n    dartScoring.map((target, index) => addToTotal(Number(score(index))));\n    console.log(`getDartTotalplayer=> ${player}: ${total}`);\n    if (total === winner) localStorage.setItem('gameStatus', 'gameOver');\n    return total;\n  };\n  const getGolfTotal = player => {\n    if (!golf) return;\n    let total = 0;\n    const score = index => localStorage.getItem(golfKey(player, index)) || 0;\n    const addToTotal = value => total = total + value;\n    golfScoring.map((target, index) => {\n      console.log(`getGolfTotal=> ${golfKey(player, index)} ${index}: ${total}`);\n      addToTotal(Number(score(index)));\n    });\n    //console.log(`getGolfTotalplayer=> ${player}: ${total}`)\n    return total;\n  };\n  /*\n  const getSurfTotal = (player) => {\n      if (!surf) return;\n      let total = 0;\n      const score = (index) => localStorage.getItem(surfKey(player, index)) || 0;\n      const addToTotal = (value) => total = total + value;\n      surfScoring.map((target, index) => {\n          console.log(`getSurfTotal=> ${surfKey(player, index)} ${index}: ${total}`)\n          addToTotal(Number(score(index)))\n      }\n      );\n      //console.log(`getsurfTotalplayer=> ${player}: ${total}`)\n      return total;\n  }\n  */\n  const getDominoTotal = player => {\n    let total = 0;\n    const score = index => localStorage.getItem(dominoKey(player, index)) || 0;\n    const addToTotal = value => total = total + value;\n    dominoScoring.map((target, index) => addToTotal(Number(score(index))));\n    //console.log(`getDominoTotalplayer=> ${player}: ${total}`)\n    if (total === winner) localStorage.setItem('gameStatus', 'gameOver');\n    return total;\n  };\n  const updateTwoPlayerScores = (player, index, score) => {\n    const newScores = [];\n    players.map((player, index) => newScores.push(getDartTotal(player)));\n    //console.log(`updateTwoPlayerScores=>\\nplayer: ${player}\\nindex: ${index}\\nscore: ${score}\\nnewScore: ${JSON.stringify(newScores)}`)\n    //console.log(`${players[0]}: ${twoPlayerScores[0]}\\n${players[1]}: ${twoPlayerScores[1]}`)\n    //const isWinner = (score) => (score >= winner) ? true : false;\n    //players.map((player, index) => (isWinner(newScores[index])) ? setTwoPlayerWinner(index) : setTwoPlayerWinner(3));\n    localStorage.setItem('winner', twoPlayerScores);\n    localStorage.setItem('twoPlayerScores', twoPlayerScores);\n    setTwoPlayerScores(newScores);\n  };\n  //console.log(`players: ${players}`)\n  const set21 = () => {\n    if (darts) {\n      localStorage.setItem('winner', 21);\n      setWinner(Number(localStorage.getItem('winner')));\n    }\n  };\n  const selectGame = (groupTitle, label, selected) => {\n    localStorage.setItem('game', selected);\n    localStorage.setItem('gameStatus', 'inProgress');\n    setGame(localStorage.getItem('game'));\n    set21();\n  };\n  const selectWinner = (groupTitle, label, selected) => {\n    localStorage.setItem('winner', selected);\n    localStorage.setItem('gameStatus', 'gameOver');\n    setWinner(Number(localStorage.getItem('winner')));\n  };\n  const setTimer = (groupTitle, label, selected) => {\n    localStorage.setItem('timer', selected);\n    setTime(selected * 60);\n    setHeatLength(selected * 60);\n  };\n  const clear = event => {\n    alert('Note was cleared: ' + event.value);\n    localStorage.setItem('players', JSON.stringify(initPlayers));\n    localStorage.setItem('gameStatus', 'inProgress');\n    setPlayers(JSON.parse(localStorage.getItem('players')));\n  };\n  const reset = event => {\n    //alert('Note was cleared: ');\n    //const cricketKey = (player,index) => `${player}Cricket${index}`;\n    //const golfKey = (player,index) => `${player}Golf${index}`;\n    //const dominoKey = (player,index) => `${player}Domino${index}`;\n    let id = (player, index) => darts ? cricketKey(player, index) : player;\n    id = (player, index) => dominos ? dominoKey(player, index) : player;\n    id = (player, index) => golf ? golfKey(player, index) : player;\n    id = (player, index) => surf ? surfKey(player, index) : player;\n    const initValue = 0;\n    if (darts) {\n      players.map(player => dartScoring.map((target, index) => localStorage.setItem(id(player, index), initValue)));\n    } else if (dominos) {\n      //players.map((player) => dominoScoring.map((target,index) => localStorage.setItem(id(player, index), initValue)));\n      players.map(player => dominoScoring.map((target, index) => localStorage.setItem(dominoKey(player, index), initValue)));\n    } else {\n      players.map((player, index) => localStorage.setItem(id(player, index), initValue));\n    }\n    localStorage.setItem('gameStatus', 'inProgress');\n    getScore();\n  };\n  const addPlayer = event => {\n    //alert('Note was cleared: ' + value);\n    const newPlayer = prompt('Enter new name', '');\n    let newPlayers = players;\n    if (newPlayer !== null) {\n      newPlayers.push(newPlayer);\n      localStorage.setItem('players', JSON.stringify(newPlayers));\n      setPlayers(JSON.parse(localStorage.getItem('players')));\n    }\n    //getScore();\n  };\n  /*\n  const edit = (event) => {\n      setEdit(!editStatus);\n  }\n  */\n  const editPlayer = index => {\n    //console.log(`edit: ${index}`);\n    const newPlayer = prompt('Enter new name', players[index]);\n    if (newPlayer !== null) {\n      let newPlayers = players;\n      newPlayers[index] = newPlayer;\n      localStorage.setItem('players', JSON.stringify(newPlayers));\n      setPlayers(JSON.parse(localStorage.getItem('players')));\n      getScore();\n    }\n  };\n  const getScore = () => window.location.pathname = '/reactor/ScoreKeeper';\n  /*\n  const deletePlayer = (index) => {\n      //console.log(`state: ${JSON.stringify(state,null,2)}`)\n      //console.log(`delete at: ${index}`)\n      let newPlayers = players;\n      newPlayers.splice(index, 1);\n      localStorage.setItem('players', JSON.stringify(newPlayers));\n      setPlayers(JSON.parse(localStorage.getItem('players')));\n      //getScore();\n  }\n  */\n  const deletePlayer = index => {\n    console.log(`deletePlayer => ${index}`);\n    const newPlayers = players.slice();\n    newPlayers.splice(index, 1);\n    //playerScores.splice(index, 1);\n    //surfersScores.splice(index, 1);\n    localStorage.setItem('players', JSON.stringify(newPlayers));\n    setPlayers(JSON.parse(localStorage.getItem('players')));\n  };\n  const scorecards = () => {\n    //console.log(`build Scorecards`)\n    const scorecard = (player, index, score) => {\n      if (darts) {\n        console.log(`${game} - scorecard => player:${player} index: ${index} score: ${score}`);\n        return /*#__PURE__*/_jsxDEV(CricketScore, {\n          game: game,\n          player: player,\n          index: index,\n          editPlayer: editPlayer,\n          deletePlayer: deletePlayer,\n          updateTwoPlayerScores: updateTwoPlayerScores,\n          winner: winner\n        }, getKey(player), false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 24\n        }, this);\n      }\n      if (dominos) {\n        console.log(`${game} - scorecard => player:${player} index: ${index} score: ${score}`);\n        return /*#__PURE__*/_jsxDEV(Dominos, {\n          game: game,\n          player: player,\n          index: index,\n          scoreTotal: score,\n          editPlayer: editPlayer,\n          deletePlayer: deletePlayer,\n          getDominoTotal: getDominoTotal,\n          updateTwoPlayerScores: updateTwoPlayerScores,\n          winner: winner\n        }, getKey(player), false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 24\n        }, this);\n      }\n      if (golf) {\n        console.log(`${game} - scorecard => player:${player} index: ${index} score: ${score}`);\n        return /*#__PURE__*/_jsxDEV(ScoreCard, {\n          game: game,\n          player: golfPars[index],\n          index: index,\n          editPlayer: editPlayer,\n          deletePlayer: deletePlayer,\n          updateTwoPlayerScores: updateTwoPlayerScores,\n          winner: winner\n        }, getKey(player), false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 24\n        }, this);\n      }\n      console.log(`${game} - scorecard => player:${player} index: ${index} score: ${score}`);\n      return /*#__PURE__*/_jsxDEV(ScoreCard, {\n        game: game,\n        player: player,\n        index: index,\n        editPlayer: editPlayer,\n        deletePlayer: deletePlayer,\n        updateTwoPlayerScores: updateTwoPlayerScores,\n        winner: winner\n      }, getKey(player), false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 20\n      }, this);\n    };\n    /*\n    const rankStatus = (player, index, score) => {\n        console.log(`ranksStatus => surfersScores player: ${player} index: ${index} score: ${score}`)\n        const winsBy = 'Wins by 7.17';\n        const needs = 'Needs 0.01';\n        if (index === 0) {\n            return winsBy\n        }\n        return needs\n    }\n    */\n    /*\n    const findTwoHighestIndices = (scores) => {\n        let highestIndex = 0;\n        let secondHighestIndex = -1;\n         scores.forEach((score, index) => {\n            if (score > scores[highestIndex]) {\n                secondHighestIndex = highestIndex;\n                highestIndex = index;\n            } else if (secondHighestIndex === -1 || score > scores[secondHighestIndex]) {\n                secondHighestIndex = index;\n            }\n        });\n         return [highestIndex, secondHighestIndex];\n    };\n    */\n    /*\n    const getWave = (playerId, index, score) => {\n        console.log(`getWave => playerId: ${playerId} index: ${index} score: ${score}`);\n        const highestScores = findTwoHighestIndices(playerScores[playerId].scores);\n        const highestId = highestScores[0];\n        const secondHighestId = highestScores[1];\n        const firstScore = (index === highestId) ? true : false;\n        const secondScore = (index === secondHighestId) ? true : false;\n        const getClasses = (firstScore || secondScore) ? 'greet bold color-neogreen p-5' : 'greet color-light p-5';\n        const wave = <div class=\"column\">\n            <div className='greet bold color-yellow bg-dkYellow w-100 p-5'>{index + 1}</div>\n            <div className={getClasses}>{score}</div>\n        </div>\n        return wave\n    }\n    */\n    /*\n    const addScoreForPlayer = (players, playerIndex, score) => {\n        if (playerIndex >= 0 && playerIndex < players.length) {\n            players[playerIndex].scores.push(score);\n        }\n    };\n    */\n    // Add a new score for Player 1\n    //addScoreForPlayer(players, 0, 94);\n\n    // Find the indices of the two highest scores for each player\n    /*\n    const getTwoHighestScores = (playerIndex) => {\n        const player = playerScores[playerIndex];\n        const [highestIndex, secondHighestIndex] = findTwoHighestIndices(playerScores[playerIndex].scores);\n        console.log(`${player.name}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n        return {\n            'highScoreIndex': highestIndex,\n            'secondHighScoreIndex': secondHighestIndex\n        }\n    }\n    */\n    /*\n    const surfingScores = (player, index, score) => {\n        if (surf) {\n            console.log(`surfingScores => player: ${player} index: ${index} score:${playerScores[index].scores[0]}`);\n            const surferScores = <div>\n                <div className='flexContainer width-100-percent mt--10 mb--10' key={getKey(player)}>\n                    <div className='ml-10 p-5 w-100 size40 mt-10'>{index + 1}</div>\n                    <div className='flex3ColumnLeft m-1 p-5 size40 mt-10'>{player}</div>\n                    <div className='flex3ColumnRight mr-10 p-5'>\n                        <div className='size25 bold'>{score}</div>\n                        <div>{rankStatus(player, index, score)}</div>\n                    </div>\n                </div>\n                <div>\n                    <div>\n                        <div className='h-scroll color-white copyright m-10'>\n                            <div class=\"container mt-10\">\n                                {playerScores[index].scores.map((score, wave) => getWave(index, wave, floatDecimalOneDigit(score)))}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            return surferScores\n        }\n        return\n    }\n    */\n    const renderedItems = players.map((player, index) => scorecard(player, index));\n    const dartScores = dartScoring.map((score, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flexContainer width-100-percent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex3Column p-5\",\n        children: scorecard(players[0], index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-20 r-5 font50 color-yellow m-auto\",\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex3Column p-5\",\n        children: scorecard(players[1], index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 13\n      }, this)]\n    }, getKey(score), true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 62\n    }, this));\n    const golfScores = golfScoring.map((hole, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flexContainer width-100-percent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex3Column p-5\",\n        children: scorecard(golfPars[index], index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-20 r-5 font50 color-yellow m-auto\",\n        children: hole\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex3Column p-5\",\n        children: scorecard(golfPars[index], index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 13\n      }, this)]\n    }, getKey(hole), true, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 61\n    }, this));\n    /*\n    const surfScores = surfScoring.map((wave, index) => <div className='flexContainer width-100-percent' key={getKey(wave)}>\n        <div className='flex3Column p-5'>\n            {scorecard(index, index)}\n        </div>\n        <div className='p-20 r-5 font50 color-yellow m-auto'>\n            {wave}\n        </div>\n        <div className='flex3Column p-5'>\n            {scorecard(index, index)}\n        </div>\n    </div>);\n    */\n    /*\n    const getSurfScore = (index) => {\n        const scoreTotal = (floatDecimalOneDigit(Number(playerScores[index].scores[getTwoHighestScores(index).highScoreIndex])) + floatDecimalOneDigit(Number(playerScores[index].scores[getTwoHighestScores(index).secondHighScoreIndex])));\n        console.log(`getSurfScore => score: ${scoreTotal}`);\n        //surfersScores.map((score, index) => console.log(`getSurfScore1 => surfer${index} score:${score}`))\n        surfersScores[index] = scoreTotal;\n        //surfersScores.map((score, index) => console.log(`getSurfScore2 => surfer${index} score:${score}`))\n        const playerData = players.map((player, index) => ({ player, score: surfersScores[index] }));\n        playerData.sort((a, b) => b.score - a.score);\n        const sortedPlayers = playerData.map((data, index) => data.player);\n        const sortedScores = playerData.map((data, index) => surfersScores[index] = data.score);\n        localStorage.setItem('players', JSON.stringify(sortedPlayers));\n        setPlayers(JSON.parse(localStorage.getItem('players')));\n        //setPlayers(sortedPlayers)\n        return scoreTotal;\n    }\n    */\n    /*\n    const getSurfScore = (index) => {\n        if (surf) {\n            const newPlayer = {\n                'name': players[index],\n                'scores': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n            }\n            if (playerScores.length < players.length) {\n                playerScores.push(newPlayer)\n            }\n            const scoreTotal = floatDecimalOneDigit(Number(playerScores[index].scores[getTwoHighestScores(index).highScoreIndex])) + floatDecimalOneDigit(Number(playerScores[index].scores[getTwoHighestScores(index).secondHighScoreIndex]));\n            return scoreTotal;\n        }\n        return\n    };\n    */\n    //const surfingRankboard = players.map((player, index) => surfingRanks(player, index))};\n    /*\n    const surfingScoreboard = sortedPlayers.map((player, index) => surfingScores(player, index, getSurfScore(index)));\n    */\n\n    const dominoScores = dominoScoring.map((score, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flexContainer width-100-percent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex2Column10Percent p-5\",\n        children: scorecard(players[0], index, score)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-20 r-5 font50 color-yellow m-auto\",\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex2Column10Percent p-5\",\n        children: scorecard(players[1], index, score)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 13\n      }, this)]\n    }, getKey(score), true, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 66\n    }, this));\n    const setGameOver = playerIndex => {\n      localStorage.setItem('gameStatus', 'gameOver');\n      localStorage.setItem(`player${playerIndex}`, 'winner');\n      //setGameStatus('gameOver');\n      return true;\n    };\n    const setGameInProgress = playerIndex => {\n      if (playerIndex > 0) {\n        if (localStorage.getItem(`player${playerIndex - 1}`) !== 'winner') {\n          localStorage.setItem('gameStatus', 'inProgress');\n        }\n      }\n      localStorage.setItem(`player${playerIndex}`, 'loser');\n      //setGameStatus('inProgress');\n      return false;\n    };\n    const isWinner = playerIndex => getDartTotal(players[playerIndex]) >= winner ? setGameOver(playerIndex) : setGameInProgress(playerIndex);\n    const isDominoWinner = playerIndex => getDominoTotal(players[playerIndex]) >= winner ? setGameOver(playerIndex) : setGameInProgress(playerIndex);\n    const dartClass = playerIndex => 'flex3Column p-20 size25 bold' + (isWinner(playerIndex) ? ' color-neogreen shakingShaka mt-20' : '');\n    const dominoClass = playerIndex => 'flex3Column p-20 size25 bold' + (isDominoWinner(playerIndex) ? ' color-neogreen shakingShaka mt-20' : '');\n    const dartScoreboard = /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexContainer glassy width-100-percent mb-20 bg-green r-10\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: dartClass(0),\n          children: [players[0], \":\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-yellow mt-10\",\n            children: getDartTotal(players[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 60\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-20 bg-yellow navBranding w-200\",\n          children: \"vs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: dartClass(1),\n          children: [players[1], \":\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-yellow mt-10\",\n            children: getDartTotal(players[1])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 60\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 13\n      }, this), dartScores]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 32\n    }, this);\n    const golfScoreboard = /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexContainer glassy width-100-percent mb-20 bg-green r-10\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: dartClass(0),\n          children: [players[0], \":\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-yellow mt-10\",\n            children: getGolfTotal(players[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 60\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-20 bg-yellow navBranding w-200\",\n          children: \"vs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: dartClass(1),\n          children: [players[1], \":\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-yellow mt-10\",\n            children: getGolfTotal(players[1])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 60\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 13\n      }, this), golfScores]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 32\n    }, this);\n    /*\n    const surfScoreboard = <React.Fragment>\n            <div className='flexContainer glassy width-100-percent mb-20 bg-green r-10'>\n                <div className={dartClass(0)}>{players[0]}:<div className='color-yellow mt-10'>{getSurfTotal(players[0])}</div></div>\n                <div className='p-20 bg-yellow navBranding w-200'>vs</div>\n                <div className={dartClass(1)}>{players[1]}:<div className='color-yellow mt-10'>{getSurfTotal(players[1])}</div></div>\n            </div>\n            {surfScores}\n        </React.Fragment>\n    */\n    players.map((player, index) => scorecard(player, index));\n    const dominoScoreboard = /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexContainer glassy width-100-percent mb-20 bg-green r-10\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: dominoClass(0),\n          children: [players[0], \":\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-yellow mt-10\",\n            children: getDominoTotal(players[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 62\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-20 bg-yellow navBranding w-200\",\n          children: \"vs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: dominoClass(1),\n          children: [players[1], \":\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-yellow mt-10\",\n            children: getDominoTotal(players[1])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 62\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 13\n      }, this), dominoScores]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 34\n    }, this);\n    if (darts) return dartScoreboard;\n    if (dominos) return dominoScoreboard;\n    if (golf) return golfScoreboard;\n    //if (surf) return surfScoreboard\n    if (surf) return surfingScoreboard;else return renderedItems;\n  };\n  //console.log(`localStorage => game: ${localStorage.getItem('game')}`)\n  //console.log(`localStorage => gameStatus: ${localStorage.getItem('gameStatus')}`)\n  //console.log(`localStorage => players: ${localStorage.getItem('players')}`)\n  //console.log(`localStorage => winner: ${localStorage.getItem('winner')}`)\n  //console.log(`localStorage => twoPlayerScores: ${localStorage.getItem('twoPlayerScores')}`)\n  //console.log(`localStorage => players: ${localStorage.getItem('players')}`)\n  //console.log(`localStorage => player1: ${localStorage.getItem('players1')}`)\n  //console.log(`localStorage => player2: ${localStorage.getItem('players2')}`)\n  console.log(`time: ${time}`);\n\n  /*\n  const getTimerButtonClasses = () => {\n      const timerButtonClasses = timerOn ? 'bg-red m-10 r-10 bold size20 p-20 color-light' : 'bg-green m-10 r-10 bold size20 p-20 color-light';\n      return timerButtonClasses;\n  }\n  const getTimerClasses = () => {\n      const timerClasses = (time < 120) ? 'blinking-fade' : '';\n      return timerClasses;\n  }\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fadeIn mt--30\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-20\",\n      children: [/*#__PURE__*/_jsxDEV(Selector, {\n        groupTitle: \"game\",\n        label: \"item.description\",\n        items: games,\n        selected: game,\n        onChange: selectGame,\n        fontSize: \"25\",\n        padding: \"10px\",\n        width: darts || dominos ? '98%' : '65%'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 17\n      }, this), darts || golf ? /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(Selector, {\n        groupTitle: \"winner\",\n        label: \"i.description\",\n        items: dominos ? dominoWinners : surf ? heatLengths : winners,\n        selected: surf ? time / 60 : winner,\n        onChange: surf ? setTimer : selectWinner,\n        fontSize: \"25\",\n        padding: \"10px\",\n        width: \"30%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 27\n      }, this), surf ?\n      /*#__PURE__*/\n      /*\n      <React.Fragment>\n          <div className={getTimerButtonClasses()} onClick={() => toggleTimer()}>\n              {(timerOn) ? 'STOP' : 'START'}\n          </div>\n          <div className='bg-dkBlue m-10 r-10 bold size20 p-20 color-light0'><span className={getTimerClasses()}>{formatTime(time)}</span></div>\n          <div>\n              <div className='flexContainer color-yellow bold greet ml-10 mr-10'>\n                  <div className='ml-10 p-10 w-100 bg-dkGreen m-1 r-5-lft'>Rank</div>\n                  <div className='flex3ColumnLeft m-1 p-10 bg-dkGreen m-1'>Athlete</div>\n                  <div className='flex3ColumnRight mr-10 p-10 bg-dkGreen m-1 r-5-rt'>Total</div>\n              </div>\n          </div>\n       </React.Fragment>\n      */\n      _jsxDEV(SurfScores, {\n        player: player,\n        index: index,\n        scoreTotal: score,\n        editPlayer: editPlayer,\n        deletePlayer: deletePlayer,\n        winner: winner,\n        updateTwoPlayerScores: updateTwoPlayerScores,\n        game: game,\n        surfKey: surfKey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 13\n    }, this), scorecards(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flexContainer width-100-percent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex3Column m-1\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"Submit\",\n          className: \"glassy button greet p-20 r-10 mt-20 width-100-percent bg-green brdr-green color-yellow\",\n          onClick: () => addPlayer(),\n          children: \"add player\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex3Column m-1\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"Submit\",\n          className: \"glassy button greet p-20 r-10 mt-20 mb-20 width-100-percent bg-yellow brdr-yellow color-black\",\n          onClick: () => reset(),\n          children: \"reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex3Column m-1\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"Submit\",\n          className: \"glassy button greet p-20 r-10 mt-20 mb-20 width-100-percent bg-red brdr-red color-yellow\",\n          onClick: () => clear(),\n          children: \"clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 613,\n    columnNumber: 9\n  }, this);\n};\n_s(ScoreKeeper, \"xb1EoqSwe5X3Gz2yRcooHFnckMA=\");\n_c = ScoreKeeper;\nexport default ScoreKeeper;\nvar _c;\n$RefreshReg$(_c, \"ScoreKeeper\");","map":{"version":3,"names":["React","useState","useEffect","ScoreCard","CricketScore","Dominos","SurfScores","Selector","getKey","jsxDEV","_jsxDEV","ScoreKeeper","_s","initPlayers","initScores","localStorage","getItem","games","winners","dominoWinners","heatLengths","players","setPlayers","JSON","parse","game","setGame","winner","setWinner","Number","twoPlayerScores","setTwoPlayerScores","time","setTime","waveCount","setWaveCount","sortedPlayers","setSortedPlayers","sortedScores","setSortedScores","darts","dominos","surf","golf","cricketKey","player","index","golfKey","surfKey","dominoKey","dartScoring","golfScoring","golfPars","dominoScoring","gameStatus","setGameStatus","formatTime","timeInSeconds","hours","Math","floor","minutes","seconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds","setItem","getDartTotal","total","score","addToTotal","value","map","target","console","log","getGolfTotal","getDominoTotal","updateTwoPlayerScores","newScores","push","set21","selectGame","groupTitle","label","selected","selectWinner","setTimer","setHeatLength","clear","event","alert","stringify","reset","id","initValue","getScore","addPlayer","newPlayer","prompt","newPlayers","editPlayer","window","location","pathname","deletePlayer","slice","splice","scorecards","scorecard","fileName","_jsxFileName","lineNumber","columnNumber","scoreTotal","renderedItems","dartScores","className","children","golfScores","hole","dominoScores","setGameOver","playerIndex","setGameInProgress","isWinner","isDominoWinner","dartClass","dominoClass","dartScoreboard","Fragment","golfScoreboard","dominoScoreboard","surfingScoreboard","items","onChange","fontSize","padding","width","onClick","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/ScoreKeeper.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ScoreCard from './ScoreCard.js';\nimport CricketScore from './CricketScore.js';\nimport Dominos from './Dominos.js';\nimport SurfScores from './SurfScores.js';\nimport Selector from '../forms/FunctionalSelector.js';\nimport getKey from '../utils/KeyGenerator.js';\n\nconst ScoreKeeper = () => {\n\n    const initPlayers = ['You', 'Me'];\n    const initScores = localStorage.getItem('twoPlayerScores') || [0, 0];\n    const games = ['standard', 'ping pong', 'golf', 'cornhole', 'darts', 'dominos', 'horse', 'horseshoes', 'bocci', 'surf'];\n    const winners = [5, 10, 11, 15, 20, 21];\n    const dominoWinners = [50, 100, 150, 200];\n    const heatLengths = [.5, 1, 3, 15, 20, 30, 45, 60];\n    const [players, setPlayers] = useState(JSON.parse(localStorage.getItem('players')) || initPlayers);\n    //const [ editStatus, setEdit ] = useState(false);\n    const [game, setGame] = useState(localStorage.getItem('game') || 'standard');\n    const [winner, setWinner] = useState(Number(localStorage.getItem('winner')) || 21);\n    const [twoPlayerScores, setTwoPlayerScores] = useState(initScores);\n    //const [timerOn, setTimerOn] = useState(false);\n    const [time, setTime] = useState(60 * 60); // Initial time in seconds (e.g., 1 hour)\n    //const [timesUp, setTimesUp] = useState(false);\n    //const [heatLength, setHeatLength] = useState(60 * 60);\n    const [waveCount, setWaveCount] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    const [sortedPlayers, setSortedPlayers] = useState([]);\n    const [sortedScores, setSortedScores] = useState([]);\n    //const [surfersScores, setSurfersScores] = useState(JSON.parse(localStorage.getItem('surfersScores')) || [])\n    //const [ twoPlayerWinner, setTwoPlayerWinner ] = useState(null);\n    const darts = (game !== 'darts') ? false : true;\n    const dominos = (game !== 'dominos') ? false : true;\n    const surf = (game !== 'surf') ? false : true;\n    const golf = (game !== 'golf') ? false : true;\n    const cricketKey = (player, index) => `${player}Cricket${index}`;\n    const golfKey = (player, index) => `${player}Golf${index}`;\n    const surfKey = (player, index) => `${player}Surf${index}`;\n    const dominoKey = (player, index) => `${player}Domino${index}`;\n    //const dartsScores = ['-','/', 'X', 'O'];\n    const dartScoring = [20, 19, 18, 17, 16, 15, 'B'];\n    const golfScoring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\n    //const surfScoring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const golfPars = [4, 3, 3, 5, 4, 4, 3, 3, 5, 5, 4, 5, 4, 5, 4, 4, 4, 5];\n    const dominoScoring = [50, 100, 150, 200];\n    const [gameStatus, setGameStatus] = useState(localStorage.getItem('gameStatus') || 'inProgress');\n    /*\n    const playerScores = [\n        { name: 'Player 1', scores: [90, 85, 92, 78, 95, 87, 84, 89, 91, 88] },\n        { name: 'Player 2', scores: [75, 82, 80, 79, 88, 84, 76, 85, 90, 81] },\n        { name: 'Player 3', scores: [86, 82, 90, 88, 91, 79, 85, 87, 83, 89] },\n    ];\n    */\n    const formatTime = (timeInSeconds) => {\n        const hours = Math.floor(timeInSeconds / 3600);\n        const minutes = Math.floor((timeInSeconds % 3600) / 60);\n        const seconds = timeInSeconds % 60;\n\n        const formattedHours = hours.toString().padStart(2, '0');\n        const formattedMinutes = minutes.toString().padStart(2, '0');\n        const formattedSeconds = seconds.toString().padStart(2, '0');\n\n        return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n    };\n    /*\n    useEffect(() => {\n        let intervalId;\n        if (timerOn) {\n            intervalId = setInterval(() => {\n                setTime((prevTime) => {\n                    const newTime = prevTime - 1;\n                    if (newTime <= 0) {\n                        clearInterval(intervalId);\n                        setTimesUp(true);\n                        return 0;\n                    }\n                    return newTime;\n                });\n            }, 1000);\n        }\n\n        return () => clearInterval(intervalId);\n    }, [timerOn]);\n    */\n    /*\n    useEffect(() => {\n        if (timesUp) {\n            setTimerOn(false);\n            setTime(heatLength);\n            console.log(`heatLength: ${heatLength}`)\n            setTimesUp(false);\n        }\n    }, [timesUp]);\n    */\n    /*\n    useEffect(() => {\n\n        const playerData = players.map((player, index) => ({ player, score: surfersScores[index] }));\n        playerData.sort((a, b) => b.score - a.score);\n\n        const sortedPlayers = playerData.map((data) => data.player);\n        const sortedScores = playerData.map((data) => data.score);\n\n        setSortedPlayers(sortedPlayers);\n        setSortedScores(sortedScores);\n\n        localStorage.setItem('players', JSON.stringify(sortedPlayers));\n        localStorage.setItem('surfersScores', JSON.stringify(sortedScores));\n\n    }, [players, surfersScores]);\n    */\n    /*\n    const toggleTimer = () => {\n        if (timerOn) {\n            setTimerOn(false)\n        } else {\n            setTimerOn(true)\n        }\n    }\n    */\n    if (darts && winner !== 21) {\n        localStorage.setItem('winner', 21);\n        setWinner(Number(localStorage.getItem('winner')));\n    }\n    /*\n    if (dominos && winner !== 200) {\n        localStorage.setItem('winner', 200);\n        setWinner(Number(localStorage.getItem('winner')));\n    }\n    */\n    const getDartTotal = (player) => {\n        let total = 0;\n        const score = (index) => localStorage.getItem(cricketKey(player, index)) || 0;\n        const addToTotal = (value) => total = total + value;\n        dartScoring.map((target, index) => addToTotal(Number(score(index))));\n        console.log(`getDartTotalplayer=> ${player}: ${total}`)\n        if (total === winner) localStorage.setItem('gameStatus', 'gameOver');\n        return total;\n    }\n    const getGolfTotal = (player) => {\n        if (!golf) return;\n        let total = 0;\n        const score = (index) => localStorage.getItem(golfKey(player, index)) || 0;\n        const addToTotal = (value) => total = total + value;\n        golfScoring.map((target, index) => {\n            console.log(`getGolfTotal=> ${golfKey(player, index)} ${index}: ${total}`)\n            addToTotal(Number(score(index)))\n        }\n        );\n        //console.log(`getGolfTotalplayer=> ${player}: ${total}`)\n        return total;\n    }\n    /*\n    const getSurfTotal = (player) => {\n        if (!surf) return;\n        let total = 0;\n        const score = (index) => localStorage.getItem(surfKey(player, index)) || 0;\n        const addToTotal = (value) => total = total + value;\n        surfScoring.map((target, index) => {\n            console.log(`getSurfTotal=> ${surfKey(player, index)} ${index}: ${total}`)\n            addToTotal(Number(score(index)))\n        }\n        );\n        //console.log(`getsurfTotalplayer=> ${player}: ${total}`)\n        return total;\n    }\n    */\n    const getDominoTotal = (player) => {\n        let total = 0;\n        const score = (index) => localStorage.getItem(dominoKey(player, index)) || 0;\n        const addToTotal = (value) => total = total + value;\n        dominoScoring.map((target, index) => addToTotal(Number(score(index))));\n        //console.log(`getDominoTotalplayer=> ${player}: ${total}`)\n        if (total === winner) localStorage.setItem('gameStatus', 'gameOver');\n        return total;\n    }\n    const updateTwoPlayerScores = (player, index, score) => {\n        const newScores = [];\n        players.map((player, index) => newScores.push(getDartTotal(player)));\n        //console.log(`updateTwoPlayerScores=>\\nplayer: ${player}\\nindex: ${index}\\nscore: ${score}\\nnewScore: ${JSON.stringify(newScores)}`)\n        //console.log(`${players[0]}: ${twoPlayerScores[0]}\\n${players[1]}: ${twoPlayerScores[1]}`)\n        //const isWinner = (score) => (score >= winner) ? true : false;\n        //players.map((player, index) => (isWinner(newScores[index])) ? setTwoPlayerWinner(index) : setTwoPlayerWinner(3));\n        localStorage.setItem('winner', twoPlayerScores);\n        localStorage.setItem('twoPlayerScores', twoPlayerScores);\n        setTwoPlayerScores(newScores);\n    }\n    //console.log(`players: ${players}`)\n    const set21 = () => {\n        if (darts) {\n            localStorage.setItem('winner', 21);\n            setWinner(Number(localStorage.getItem('winner')));\n        }\n    }\n    const selectGame = (groupTitle, label, selected) => {\n        localStorage.setItem('game', selected)\n        localStorage.setItem('gameStatus', 'inProgress');\n        setGame(localStorage.getItem('game'));\n        set21();\n    }\n    const selectWinner = (groupTitle, label, selected) => {\n        localStorage.setItem('winner', selected)\n        localStorage.setItem('gameStatus', 'gameOver');\n        setWinner(Number(localStorage.getItem('winner')));\n    }\n    const setTimer = (groupTitle, label, selected) => {\n        localStorage.setItem('timer', selected);\n        setTime(selected * 60);\n        setHeatLength(selected * 60);\n    }\n    const clear = (event) => {\n        alert('Note was cleared: ' + event.value);\n        localStorage.setItem('players', JSON.stringify(initPlayers));\n        localStorage.setItem('gameStatus', 'inProgress');\n        setPlayers(JSON.parse(localStorage.getItem('players')));\n    }\n    const reset = (event) => {\n        //alert('Note was cleared: ');\n        //const cricketKey = (player,index) => `${player}Cricket${index}`;\n        //const golfKey = (player,index) => `${player}Golf${index}`;\n        //const dominoKey = (player,index) => `${player}Domino${index}`;\n        let id = (player, index) => (darts) ? cricketKey(player, index) : player;\n        id = (player, index) => (dominos) ? dominoKey(player, index) : player;\n        id = (player, index) => (golf) ? golfKey(player, index) : player;\n        id = (player, index) => (surf) ? surfKey(player, index) : player;\n        const initValue = 0;\n        if (darts) {\n            players.map((player) => dartScoring.map((target, index) => localStorage.setItem(id(player, index), initValue)));\n        } else if (dominos) {\n            //players.map((player) => dominoScoring.map((target,index) => localStorage.setItem(id(player, index), initValue)));\n            players.map((player) => dominoScoring.map((target, index) => localStorage.setItem(dominoKey(player, index), initValue)));\n        } else {\n            players.map((player, index) => localStorage.setItem(id(player, index), initValue));\n        }\n        localStorage.setItem('gameStatus', 'inProgress');\n        getScore();\n    }\n    const addPlayer = (event) => {\n        //alert('Note was cleared: ' + value);\n        const newPlayer = prompt('Enter new name', '');\n        let newPlayers = players;\n        if (newPlayer !== null) {\n            newPlayers.push(newPlayer);\n            localStorage.setItem('players', JSON.stringify(newPlayers));\n            setPlayers(JSON.parse(localStorage.getItem('players')));\n        }\n        //getScore();\n    }\n    /*\n    const edit = (event) => {\n        setEdit(!editStatus);\n    }\n    */\n    const editPlayer = (index) => {\n        //console.log(`edit: ${index}`);\n        const newPlayer = prompt('Enter new name', players[index]);\n        if (newPlayer !== null) {\n            let newPlayers = players;\n            newPlayers[index] = newPlayer;\n            localStorage.setItem('players', JSON.stringify(newPlayers));\n            setPlayers(JSON.parse(localStorage.getItem('players')));\n            getScore();\n        }\n    }\n    const getScore = () => window.location.pathname = '/reactor/ScoreKeeper';\n    /*\n    const deletePlayer = (index) => {\n        //console.log(`state: ${JSON.stringify(state,null,2)}`)\n        //console.log(`delete at: ${index}`)\n        let newPlayers = players;\n        newPlayers.splice(index, 1);\n        localStorage.setItem('players', JSON.stringify(newPlayers));\n        setPlayers(JSON.parse(localStorage.getItem('players')));\n        //getScore();\n    }\n    */\n    const deletePlayer = (index) => {\n        console.log(`deletePlayer => ${index}`)\n        const newPlayers = players.slice();\n        newPlayers.splice(index, 1);\n        //playerScores.splice(index, 1);\n        //surfersScores.splice(index, 1);\n        localStorage.setItem('players', JSON.stringify(newPlayers));\n        setPlayers(JSON.parse(localStorage.getItem('players')));\n    };\n    \n    const scorecards = () => {\n        //console.log(`build Scorecards`)\n        const scorecard = (player, index, score) => {\n            if (darts) {\n                console.log(`${game} - scorecard => player:${player} index: ${index} score: ${score}`)\n                return <CricketScore\n                    game={game}\n                    player={player}\n                    index={index}\n                    editPlayer={editPlayer}\n                    deletePlayer={deletePlayer}\n                    updateTwoPlayerScores={updateTwoPlayerScores}\n                    winner={winner}\n                    key={getKey(player)}\n                />\n            }\n            if (dominos) {\n                console.log(`${game} - scorecard => player:${player} index: ${index} score: ${score}`)\n                return <Dominos\n                    game={game}\n                    player={player}\n                    index={index}\n                    scoreTotal={score}\n                    editPlayer={editPlayer}\n                    deletePlayer={deletePlayer}\n                    getDominoTotal={getDominoTotal}\n                    updateTwoPlayerScores={updateTwoPlayerScores}\n                    winner={winner}\n                    key={getKey(player)}\n                />\n            }\n            if (golf) {\n                console.log(`${game} - scorecard => player:${player} index: ${index} score: ${score}`)\n                return <ScoreCard\n                    game={game}\n                    player={golfPars[index]}\n                    index={index}\n                    editPlayer={editPlayer}\n                    deletePlayer={deletePlayer}\n                    updateTwoPlayerScores={updateTwoPlayerScores}\n                    winner={winner}\n                    key={getKey(player)}\n                />\n            }\n            console.log(`${game} - scorecard => player:${player} index: ${index} score: ${score}`)\n            return <ScoreCard\n                game={game}\n                player={player}\n                index={index}\n                editPlayer={editPlayer}\n                deletePlayer={deletePlayer}\n                updateTwoPlayerScores={updateTwoPlayerScores}\n                winner={winner}\n                key={getKey(player)}\n            />\n        }\n        /*\n        const rankStatus = (player, index, score) => {\n            console.log(`ranksStatus => surfersScores player: ${player} index: ${index} score: ${score}`)\n            const winsBy = 'Wins by 7.17';\n            const needs = 'Needs 0.01';\n            if (index === 0) {\n                return winsBy\n            }\n            return needs\n        }\n        */\n        /*\n        const findTwoHighestIndices = (scores) => {\n            let highestIndex = 0;\n            let secondHighestIndex = -1;\n\n            scores.forEach((score, index) => {\n                if (score > scores[highestIndex]) {\n                    secondHighestIndex = highestIndex;\n                    highestIndex = index;\n                } else if (secondHighestIndex === -1 || score > scores[secondHighestIndex]) {\n                    secondHighestIndex = index;\n                }\n            });\n\n            return [highestIndex, secondHighestIndex];\n        };\n        */\n        /*\n        const getWave = (playerId, index, score) => {\n            console.log(`getWave => playerId: ${playerId} index: ${index} score: ${score}`);\n            const highestScores = findTwoHighestIndices(playerScores[playerId].scores);\n            const highestId = highestScores[0];\n            const secondHighestId = highestScores[1];\n            const firstScore = (index === highestId) ? true : false;\n            const secondScore = (index === secondHighestId) ? true : false;\n            const getClasses = (firstScore || secondScore) ? 'greet bold color-neogreen p-5' : 'greet color-light p-5';\n            const wave = <div class=\"column\">\n                <div className='greet bold color-yellow bg-dkYellow w-100 p-5'>{index + 1}</div>\n                <div className={getClasses}>{score}</div>\n            </div>\n            return wave\n        }\n        */\n        /*\n        const addScoreForPlayer = (players, playerIndex, score) => {\n            if (playerIndex >= 0 && playerIndex < players.length) {\n                players[playerIndex].scores.push(score);\n            }\n        };\n        */\n        // Add a new score for Player 1\n        //addScoreForPlayer(players, 0, 94);\n\n        // Find the indices of the two highest scores for each player\n        /*\n        const getTwoHighestScores = (playerIndex) => {\n            const player = playerScores[playerIndex];\n            const [highestIndex, secondHighestIndex] = findTwoHighestIndices(playerScores[playerIndex].scores);\n            console.log(`${player.name}: Highest score at index ${highestIndex}, Second highest score at index ${secondHighestIndex}`);\n            return {\n                'highScoreIndex': highestIndex,\n                'secondHighScoreIndex': secondHighestIndex\n            }\n        }\n        */\n        /*\n        const surfingScores = (player, index, score) => {\n            if (surf) {\n                console.log(`surfingScores => player: ${player} index: ${index} score:${playerScores[index].scores[0]}`);\n                const surferScores = <div>\n                    <div className='flexContainer width-100-percent mt--10 mb--10' key={getKey(player)}>\n                        <div className='ml-10 p-5 w-100 size40 mt-10'>{index + 1}</div>\n                        <div className='flex3ColumnLeft m-1 p-5 size40 mt-10'>{player}</div>\n                        <div className='flex3ColumnRight mr-10 p-5'>\n                            <div className='size25 bold'>{score}</div>\n                            <div>{rankStatus(player, index, score)}</div>\n                        </div>\n                    </div>\n                    <div>\n                        <div>\n                            <div className='h-scroll color-white copyright m-10'>\n                                <div class=\"container mt-10\">\n                                    {playerScores[index].scores.map((score, wave) => getWave(index, wave, floatDecimalOneDigit(score)))}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                return surferScores\n            }\n            return\n        }\n        */\n        const renderedItems = players.map((player, index) => scorecard(player, index));\n\n        const dartScores = dartScoring.map((score, index) => <div className='flexContainer width-100-percent' key={getKey(score)}>\n            <div className='flex3Column p-5'>\n                {scorecard(players[0], index)}\n            </div>\n            <div className='p-20 r-5 font50 color-yellow m-auto'>\n                {score}\n            </div>\n            <div className='flex3Column p-5'>\n                {scorecard(players[1], index)}\n            </div>\n        </div>);\n\n        const golfScores = golfScoring.map((hole, index) => <div className='flexContainer width-100-percent' key={getKey(hole)}>\n            <div className='flex3Column p-5'>\n                {scorecard(golfPars[index], index)}\n            </div>\n            <div className='p-20 r-5 font50 color-yellow m-auto'>\n                {hole}\n            </div>\n            <div className='flex3Column p-5'>\n                {scorecard(golfPars[index], index)}\n            </div>\n        </div>);\n        /*\n        const surfScores = surfScoring.map((wave, index) => <div className='flexContainer width-100-percent' key={getKey(wave)}>\n            <div className='flex3Column p-5'>\n                {scorecard(index, index)}\n            </div>\n            <div className='p-20 r-5 font50 color-yellow m-auto'>\n                {wave}\n            </div>\n            <div className='flex3Column p-5'>\n                {scorecard(index, index)}\n            </div>\n        </div>);\n        */\n        /*\n        const getSurfScore = (index) => {\n            const scoreTotal = (floatDecimalOneDigit(Number(playerScores[index].scores[getTwoHighestScores(index).highScoreIndex])) + floatDecimalOneDigit(Number(playerScores[index].scores[getTwoHighestScores(index).secondHighScoreIndex])));\n            console.log(`getSurfScore => score: ${scoreTotal}`);\n            //surfersScores.map((score, index) => console.log(`getSurfScore1 => surfer${index} score:${score}`))\n            surfersScores[index] = scoreTotal;\n            //surfersScores.map((score, index) => console.log(`getSurfScore2 => surfer${index} score:${score}`))\n            const playerData = players.map((player, index) => ({ player, score: surfersScores[index] }));\n            playerData.sort((a, b) => b.score - a.score);\n            const sortedPlayers = playerData.map((data, index) => data.player);\n            const sortedScores = playerData.map((data, index) => surfersScores[index] = data.score);\n            localStorage.setItem('players', JSON.stringify(sortedPlayers));\n            setPlayers(JSON.parse(localStorage.getItem('players')));\n            //setPlayers(sortedPlayers)\n            return scoreTotal;\n        }\n        */\n        /*\n        const getSurfScore = (index) => {\n            if (surf) {\n                const newPlayer = {\n                    'name': players[index],\n                    'scores': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n                }\n                if (playerScores.length < players.length) {\n                    playerScores.push(newPlayer)\n                }\n                const scoreTotal = floatDecimalOneDigit(Number(playerScores[index].scores[getTwoHighestScores(index).highScoreIndex])) + floatDecimalOneDigit(Number(playerScores[index].scores[getTwoHighestScores(index).secondHighScoreIndex]));\n                return scoreTotal;\n            }\n            return\n        };\n        */\n        //const surfingRankboard = players.map((player, index) => surfingRanks(player, index))};\n        /*\n        const surfingScoreboard = sortedPlayers.map((player, index) => surfingScores(player, index, getSurfScore(index)));\n        */\n\n        const dominoScores = dominoScoring.map((score, index) => <div className='flexContainer width-100-percent' key={getKey(score)}>\n            <div className='flex2Column10Percent p-5'>\n                {scorecard(players[0], index, score)}\n            </div>\n            <div className='p-20 r-5 font50 color-yellow m-auto'>\n                {score}\n            </div>\n            <div className='flex2Column10Percent p-5'>\n                {scorecard(players[1], index, score)}\n            </div>\n        </div>);\n\n        const setGameOver = (playerIndex) => {\n            localStorage.setItem('gameStatus', 'gameOver');\n            localStorage.setItem(`player${playerIndex}`, 'winner');\n            //setGameStatus('gameOver');\n            return true;\n        }\n        const setGameInProgress = (playerIndex) => {\n            if (playerIndex > 0) {\n                if (localStorage.getItem(`player${playerIndex - 1}`) !== 'winner') {\n                    localStorage.setItem('gameStatus', 'inProgress')\n                }\n            }\n            localStorage.setItem(`player${playerIndex}`, 'loser');\n            //setGameStatus('inProgress');\n            return false;\n        }\n        const isWinner = (playerIndex) => (getDartTotal(players[playerIndex]) >= winner) ? setGameOver(playerIndex) : setGameInProgress(playerIndex);\n        const isDominoWinner = (playerIndex) => (getDominoTotal(players[playerIndex]) >= winner) ? setGameOver(playerIndex) : setGameInProgress(playerIndex);\n\n        const dartClass = (playerIndex) => 'flex3Column p-20 size25 bold' + ((isWinner(playerIndex)) ? ' color-neogreen shakingShaka mt-20' : '');\n        const dominoClass = (playerIndex) => 'flex3Column p-20 size25 bold' + ((isDominoWinner(playerIndex)) ? ' color-neogreen shakingShaka mt-20' : '');\n\n        const dartScoreboard = <React.Fragment>\n            <div className='flexContainer glassy width-100-percent mb-20 bg-green r-10'>\n                <div className={dartClass(0)}>{players[0]}:<div className='color-yellow mt-10'>{getDartTotal(players[0])}</div></div>\n                <div className='p-20 bg-yellow navBranding w-200'>vs</div>\n                <div className={dartClass(1)}>{players[1]}:<div className='color-yellow mt-10'>{getDartTotal(players[1])}</div></div>\n            </div>\n            {dartScores}\n        </React.Fragment>\n\n        const golfScoreboard = <React.Fragment>\n            <div className='flexContainer glassy width-100-percent mb-20 bg-green r-10'>\n                <div className={dartClass(0)}>{players[0]}:<div className='color-yellow mt-10'>{getGolfTotal(players[0])}</div></div>\n                <div className='p-20 bg-yellow navBranding w-200'>vs</div>\n                <div className={dartClass(1)}>{players[1]}:<div className='color-yellow mt-10'>{getGolfTotal(players[1])}</div></div>\n            </div>\n            {golfScores}\n        </React.Fragment>\n        /*\n        const surfScoreboard = <React.Fragment>\n                <div className='flexContainer glassy width-100-percent mb-20 bg-green r-10'>\n                    <div className={dartClass(0)}>{players[0]}:<div className='color-yellow mt-10'>{getSurfTotal(players[0])}</div></div>\n                    <div className='p-20 bg-yellow navBranding w-200'>vs</div>\n                    <div className={dartClass(1)}>{players[1]}:<div className='color-yellow mt-10'>{getSurfTotal(players[1])}</div></div>\n                </div>\n                {surfScores}\n            </React.Fragment>\n        */\n        players.map((player, index) => scorecard(player, index));\n\n        const dominoScoreboard = <React.Fragment>\n            <div className='flexContainer glassy width-100-percent mb-20 bg-green r-10'>\n                <div className={dominoClass(0)}>{players[0]}:<div className='color-yellow mt-10'>{getDominoTotal(players[0])}</div></div>\n                <div className='p-20 bg-yellow navBranding w-200'>vs</div>\n                <div className={dominoClass(1)}>{players[1]}:<div className='color-yellow mt-10'>{getDominoTotal(players[1])}</div></div>\n            </div>\n            {dominoScores}\n        </React.Fragment>\n\n        if (darts) return dartScoreboard\n        if (dominos) return dominoScoreboard\n        if (golf) return golfScoreboard\n        //if (surf) return surfScoreboard\n        if (surf) return surfingScoreboard\n        else return renderedItems;\n    }\n    //console.log(`localStorage => game: ${localStorage.getItem('game')}`)\n    //console.log(`localStorage => gameStatus: ${localStorage.getItem('gameStatus')}`)\n    //console.log(`localStorage => players: ${localStorage.getItem('players')}`)\n    //console.log(`localStorage => winner: ${localStorage.getItem('winner')}`)\n    //console.log(`localStorage => twoPlayerScores: ${localStorage.getItem('twoPlayerScores')}`)\n    //console.log(`localStorage => players: ${localStorage.getItem('players')}`)\n    //console.log(`localStorage => player1: ${localStorage.getItem('players1')}`)\n    //console.log(`localStorage => player2: ${localStorage.getItem('players2')}`)\n    console.log(`time: ${time}`)\n\n    /*\n    const getTimerButtonClasses = () => {\n        const timerButtonClasses = timerOn ? 'bg-red m-10 r-10 bold size20 p-20 color-light' : 'bg-green m-10 r-10 bold size20 p-20 color-light';\n        return timerButtonClasses;\n    }\n    const getTimerClasses = () => {\n        const timerClasses = (time < 120) ? 'blinking-fade' : '';\n        return timerClasses;\n    }\n    */\n\n    return (\n        <div className='fadeIn mt--30'>\n            <div className='mb-20'>\n                <Selector\n                    groupTitle='game'\n                    label='item.description'\n                    items={games}\n                    selected={game}\n                    onChange={selectGame}\n                    fontSize='25'\n                    padding='10px'\n                    width={(darts || dominos) ? '98%' : '65%'}\n                />\n                {\n                    (darts || golf)\n                        ? <React.Fragment></React.Fragment>\n                        : <Selector\n                            groupTitle='winner'\n                            label='i.description'\n                            items={(dominos) ? dominoWinners : ((surf) ? heatLengths : winners)}\n                            selected={(surf) ? (time / 60) : winner}\n                            onChange={(surf) ? setTimer : selectWinner}\n                            fontSize='25'\n                            padding='10px'\n                            width='30%'\n                        />\n                }\n                {(surf) ?\n                    /*\n                    <React.Fragment>\n                        <div className={getTimerButtonClasses()} onClick={() => toggleTimer()}>\n                            {(timerOn) ? 'STOP' : 'START'}\n                        </div>\n                        <div className='bg-dkBlue m-10 r-10 bold size20 p-20 color-light0'><span className={getTimerClasses()}>{formatTime(time)}</span></div>\n                        <div>\n                            <div className='flexContainer color-yellow bold greet ml-10 mr-10'>\n                                <div className='ml-10 p-10 w-100 bg-dkGreen m-1 r-5-lft'>Rank</div>\n                                <div className='flex3ColumnLeft m-1 p-10 bg-dkGreen m-1'>Athlete</div>\n                                <div className='flex3ColumnRight mr-10 p-10 bg-dkGreen m-1 r-5-rt'>Total</div>\n                            </div>\n                        </div>\n\n                    </React.Fragment>\n                    */\n                    <SurfScores\n                        player={player}\n                        index={index}\n                        scoreTotal={score}\n                        editPlayer={editPlayer}\n                        deletePlayer={deletePlayer}\n                        winner={winner}\n                        updateTwoPlayerScores={updateTwoPlayerScores}\n                        game={game}\n                        surfKey={surfKey}\n                    ></SurfScores>\n                    :\n                    <React.Fragment></React.Fragment>\n                    \n                }\n            </div>\n            {scorecards()}\n            {/*surfingRankboard*/}\n            <div className='flexContainer width-100-percent'>\n                <div className='flex3Column m-1'>\n                    <div value='Submit' className='glassy button greet p-20 r-10 mt-20 width-100-percent bg-green brdr-green color-yellow' onClick={() => addPlayer()}>add player</div>\n                </div>\n                <div className='flex3Column m-1'>\n                    <div value='Submit' className='glassy button greet p-20 r-10 mt-20 mb-20 width-100-percent bg-yellow brdr-yellow color-black' onClick={() => reset()}>reset</div>\n                </div>\n                <div className='flex3Column m-1'>\n                    <div value='Submit' className='glassy button greet p-20 r-10 mt-20 mb-20 width-100-percent bg-red brdr-red color-yellow' onClick={() => clear()}>clear</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ScoreKeeper;"],"mappings":"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"},"metadata":{},"sourceType":"module"}