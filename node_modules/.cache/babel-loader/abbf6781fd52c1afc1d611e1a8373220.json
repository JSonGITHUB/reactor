{"ast":null,"code":"import React from'react';var CalculateDistance=function CalculateDistance(state,item){var latitude=state.latitude,longitude=state.longitude;var lat1=item.latitude;var lat2=latitude;var lon1=item.longitude;var lon2=longitude;var unit=\"Miles\";//console.log(`POOP latitude: ${latitude}\\nlongitude: ${longitude}\\nSTATE: ${JSON.stringify(state, null,2)}`)\nif(lat1===lat2&&lon1===lon2){return 0;}else{var radlat1=Math.PI*lat1/180;var radlat2=Math.PI*lat2/180;var theta=lon1-lon2;var radtheta=Math.PI*theta/180;var dist=Math.sin(radlat1)*Math.sin(radlat2)+Math.cos(radlat1)*Math.cos(radlat2)*Math.cos(radtheta);if(dist>1){dist=1;}dist=Math.acos(dist);dist=dist*180/Math.PI;dist=dist*60*1.1515;dist=dist.toFixed(1);if(unit===\"Kilometers\"){dist=dist*1.609344;}if(unit===\"Nautical\"){dist=dist*0.8684;}//console.log(`DISTANCE => ${dist}`)\nreturn dist;}};export default CalculateDistance;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/CalculateDistance.js"],"names":["React","CalculateDistance","state","item","latitude","longitude","lat1","lat2","lon1","lon2","unit","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","toFixed"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAQC,IAAR,CAAiB,IAE/BC,CAAAA,QAF+B,CAEPF,KAFO,CAE/BE,QAF+B,CAErBC,SAFqB,CAEPH,KAFO,CAErBG,SAFqB,CAGvC,GAAMC,CAAAA,IAAI,CAAGH,IAAI,CAACC,QAAlB,CACA,GAAMG,CAAAA,IAAI,CAAGH,QAAb,CACA,GAAMI,CAAAA,IAAI,CAAGL,IAAI,CAACE,SAAlB,CACA,GAAMI,CAAAA,IAAI,CAAGJ,SAAb,CACA,GAAMK,CAAAA,IAAI,CAAG,OAAb,CACA;AACA,GAAKJ,IAAI,GAAKC,IAAV,EAAoBC,IAAI,GAAKC,IAAjC,CAAwC,CACpC,MAAO,EAAP,CACH,CAFD,IAEO,CACH,GAAIE,CAAAA,OAAO,CAAGC,IAAI,CAACC,EAAL,CAAUP,IAAV,CAAe,GAA7B,CACA,GAAIQ,CAAAA,OAAO,CAAGF,IAAI,CAACC,EAAL,CAAUN,IAAV,CAAe,GAA7B,CACA,GAAIQ,CAAAA,KAAK,CAAGP,IAAI,CAACC,IAAjB,CACA,GAAIO,CAAAA,QAAQ,CAAGJ,IAAI,CAACC,EAAL,CAAUE,KAAV,CAAgB,GAA/B,CACA,GAAIE,CAAAA,IAAI,CAAGL,IAAI,CAACM,GAAL,CAASP,OAAT,EAAoBC,IAAI,CAACM,GAAL,CAASJ,OAAT,CAApB,CAAwCF,IAAI,CAACO,GAAL,CAASR,OAAT,EAAoBC,IAAI,CAACO,GAAL,CAASL,OAAT,CAApB,CAAwCF,IAAI,CAACO,GAAL,CAASH,QAAT,CAA3F,CACA,GAAIC,IAAI,CAAG,CAAX,CAAc,CACVA,IAAI,CAAG,CAAP,CACH,CACDA,IAAI,CAAGL,IAAI,CAACQ,IAAL,CAAUH,IAAV,CAAP,CACAA,IAAI,CAAGA,IAAI,CAAG,GAAP,CAAWL,IAAI,CAACC,EAAvB,CACAI,IAAI,CAAGA,IAAI,CAAG,EAAP,CAAY,MAAnB,CACAA,IAAI,CAAGA,IAAI,CAACI,OAAL,CAAa,CAAb,CAAP,CACA,GAAIX,IAAI,GAAG,YAAX,CAAyB,CAAEO,IAAI,CAAGA,IAAI,CAAG,QAAd,CAAwB,CACnD,GAAIP,IAAI,GAAG,UAAX,CAAuB,CAAEO,IAAI,CAAGA,IAAI,CAAG,MAAd,CAAsB,CAC/C;AACA,MAAOA,CAAAA,IAAP,CACH,CACJ,CA7BD,CA8BA,cAAehB,CAAAA,iBAAf","sourcesContent":["import React from 'react';\n\nconst CalculateDistance = (state, item) => {\n        \n    const { latitude, longitude } = state;\n    const lat1 = item.latitude;\n    const lat2 = latitude;\n    const lon1 = item.longitude;\n    const lon2 = longitude;\n    const unit = \"Miles\"\n    //console.log(`POOP latitude: ${latitude}\\nlongitude: ${longitude}\\nSTATE: ${JSON.stringify(state, null,2)}`)\n    if ((lat1 === lat2) && (lon1 === lon2)) {\n        return 0;\n    } else {\n        var radlat1 = Math.PI * lat1/180;\n        var radlat2 = Math.PI * lat2/180;\n        var theta = lon1-lon2;\n        var radtheta = Math.PI * theta/180;\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n        if (dist > 1) {\n            dist = 1;\n        }\n        dist = Math.acos(dist);\n        dist = dist * 180/Math.PI;\n        dist = dist * 60 * 1.1515;\n        dist = dist.toFixed(1);\n        if (unit===\"Kilometers\") { dist = dist * 1.609344 }\n        if (unit===\"Nautical\") { dist = dist * 0.8684 }\n        //console.log(`DISTANCE => ${dist}`)\n        return dist;\n    }\n}\nexport default CalculateDistance"]},"metadata":{},"sourceType":"module"}