{"ast":null,"code":"import React from 'react';\n\nclass CalculateDistance extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.calculateDistance = (state, item) => {\n      const {\n        latitude,\n        longitude\n      } = state;\n      const lat1 = item.latitude;\n      const lat2 = latitude;\n      const lon1 = item.longitude;\n      const lon2 = longitude;\n      const unit = \"Miles\";\n\n      if (lat1 === lat2 && lon1 === lon2) {\n        return 0;\n      } else {\n        var radlat1 = Math.PI * lat1 / 180;\n        var radlat2 = Math.PI * lat2 / 180;\n        var theta = lon1 - lon2;\n        var radtheta = Math.PI * theta / 180;\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n        if (dist > 1) {\n          dist = 1;\n        }\n\n        dist = Math.acos(dist);\n        dist = dist * 180 / Math.PI;\n        dist = dist * 60 * 1.1515;\n        dist = dist.toFixed(1);\n\n        if (unit === \"Kilometers\") {\n          dist = dist * 1.609344;\n        }\n\n        if (unit === \"Nautical\") {\n          dist = dist * 0.8684;\n        }\n\n        console.log(`DISTANCE => ${dist}\\nlatitude: ${latitude}\\nlongitude: ${longitude}\\nstate: ${JSON.stringify(state, null, 2)}\\nitem: ${JSON.stringify(item, null, 2)}}`);\n        return dist;\n      }\n    };\n  }\n\n}\n\nexport default CalculateDistance;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/CalculateDistance.js"],"names":["React","CalculateDistance","Component","calculateDistance","state","item","latitude","longitude","lat1","lat2","lon1","lon2","unit","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","toFixed","console","log","JSON","stringify"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAAgD;AAAA;AAAA;;AAAA,SAE5CC,iBAF4C,GAExB,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACjC,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAA0BH,KAAhC;AACA,YAAMI,IAAI,GAAGH,IAAI,CAACC,QAAlB;AACA,YAAMG,IAAI,GAAGH,QAAb;AACA,YAAMI,IAAI,GAAGL,IAAI,CAACE,SAAlB;AACA,YAAMI,IAAI,GAAGJ,SAAb;AACA,YAAMK,IAAI,GAAG,OAAb;;AACA,UAAKJ,IAAI,KAAKC,IAAV,IAAoBC,IAAI,KAAKC,IAAjC,EAAwC;AACpC,eAAO,CAAP;AACH,OAFD,MAEO;AACH,YAAIE,OAAO,GAAGC,IAAI,CAACC,EAAL,GAAUP,IAAV,GAAe,GAA7B;AACA,YAAIQ,OAAO,GAAGF,IAAI,CAACC,EAAL,GAAUN,IAAV,GAAe,GAA7B;AACA,YAAIQ,KAAK,GAAGP,IAAI,GAACC,IAAjB;AACA,YAAIO,QAAQ,GAAGJ,IAAI,CAACC,EAAL,GAAUE,KAAV,GAAgB,GAA/B;AACA,YAAIE,IAAI,GAAGL,IAAI,CAACM,GAAL,CAASP,OAAT,IAAoBC,IAAI,CAACM,GAAL,CAASJ,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASR,OAAT,IAAoBC,IAAI,CAACO,GAAL,CAASL,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASH,QAAT,CAA3F;;AACA,YAAIC,IAAI,GAAG,CAAX,EAAc;AACVA,UAAAA,IAAI,GAAG,CAAP;AACH;;AACDA,QAAAA,IAAI,GAAGL,IAAI,CAACQ,IAAL,CAAUH,IAAV,CAAP;AACAA,QAAAA,IAAI,GAAGA,IAAI,GAAG,GAAP,GAAWL,IAAI,CAACC,EAAvB;AACAI,QAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAY,MAAnB;AACAA,QAAAA,IAAI,GAAGA,IAAI,CAACI,OAAL,CAAa,CAAb,CAAP;;AACA,YAAIX,IAAI,KAAG,YAAX,EAAyB;AAAEO,UAAAA,IAAI,GAAGA,IAAI,GAAG,QAAd;AAAwB;;AACnD,YAAIP,IAAI,KAAG,UAAX,EAAuB;AAAEO,UAAAA,IAAI,GAAGA,IAAI,GAAG,MAAd;AAAsB;;AAC/CK,QAAAA,OAAO,CAACC,GAAR,CAAa,eAAcN,IAAK,eAAcb,QAAS,gBAAeC,SAAU,YAAWmB,IAAI,CAACC,SAAL,CAAevB,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAA+B,WAAUsB,IAAI,CAACC,SAAL,CAAetB,IAAf,EAAoB,IAApB,EAAyB,CAAzB,CAA4B,GAAhK;AACA,eAAOc,IAAP;AACH;AACJ,KA7B2C;AAAA;;AAAA;;AA+BhD,eAAelB,iBAAf","sourcesContent":["import React from 'react';\n\nclass CalculateDistance extends React.Component {\n    \n    calculateDistance = (state, item) => {\n        const { latitude, longitude } = state;\n        const lat1 = item.latitude;\n        const lat2 = latitude;\n        const lon1 = item.longitude;\n        const lon2 = longitude;\n        const unit = \"Miles\"\n        if ((lat1 === lat2) && (lon1 === lon2)) {\n            return 0;\n        } else {\n            var radlat1 = Math.PI * lat1/180;\n            var radlat2 = Math.PI * lat2/180;\n            var theta = lon1-lon2;\n            var radtheta = Math.PI * theta/180;\n            var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n            if (dist > 1) {\n                dist = 1;\n            }\n            dist = Math.acos(dist);\n            dist = dist * 180/Math.PI;\n            dist = dist * 60 * 1.1515;\n            dist = dist.toFixed(1);\n            if (unit===\"Kilometers\") { dist = dist * 1.609344 }\n            if (unit===\"Nautical\") { dist = dist * 0.8684 }\n            console.log(`DISTANCE => ${dist}\\nlatitude: ${latitude}\\nlongitude: ${longitude}\\nstate: ${JSON.stringify(state, null, 2)}\\nitem: ${JSON.stringify(item,null,2)}}`)\n            return dist;\n        }\n    }\n}\nexport default CalculateDistance"]},"metadata":{},"sourceType":"module"}