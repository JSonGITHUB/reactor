{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/TextColorizer.js\";\nimport React from 'react';\nimport getKey from '../utils/KeyGenerator.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextColorizer = props => {\n  let colorClass = \"\";\n  const colors = [\"color-green\", \"color-yellow\", \"color-red\"];\n  let colorIndex = 0;\n  const resetColorIndex = () => {\n    colorIndex = 0;\n    return colorIndex;\n  };\n  const nextIndex = () => {\n    colorIndex++;\n    return colorIndex;\n  };\n  const getNextColor = () => colorIndex >= colors.length - 1 ? resetColorIndex() : nextIndex();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.class,\n    children: props.text.split('').map(function (listValue, index) {\n      colorClass = colors[getNextColor()];\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: colorClass,\n        children: listValue\n      }, getKey(listValue), false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_c = TextColorizer;\nexport default TextColorizer;\nvar _c;\n$RefreshReg$(_c, \"TextColorizer\");","map":{"version":3,"names":["React","getKey","jsxDEV","_jsxDEV","TextColorizer","props","colorClass","colors","colorIndex","resetColorIndex","nextIndex","getNextColor","length","className","class","children","text","split","map","listValue","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/TextColorizer.js"],"sourcesContent":["import React from 'react';\nimport getKey from '../utils/KeyGenerator.js';\n\nconst TextColorizer = props => {\n    let colorClass = \"\";\n    const colors = [\"color-green\", \"color-yellow\", \"color-red\"];\n    let colorIndex = 0;\n    const resetColorIndex = () => {\n        colorIndex = 0\n        return colorIndex;\n    }\n    const nextIndex = () => {\n        colorIndex++\n        return colorIndex;\n    }\n    const getNextColor = () => (colorIndex >= colors.length-1) ? resetColorIndex() : nextIndex();\n    return (\n        <div className={props.class}>\n            {props.text.split('').map(function(listValue, index){\n                colorClass = colors[getNextColor()];\n                return <span key={getKey(listValue)} className={colorClass}>{listValue}</span>;\n            })}\n        </div>\n    );\n}\nexport default TextColorizer;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,aAAa,GAAGC,KAAK,IAAI;EAC3B,IAAIC,UAAU,GAAG,EAAE;EACnB,MAAMC,MAAM,GAAG,CAAC,aAAa,EAAE,cAAc,EAAE,WAAW,CAAC;EAC3D,IAAIC,UAAU,GAAG,CAAC;EAClB,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1BD,UAAU,GAAG,CAAC;IACd,OAAOA,UAAU;EACrB,CAAC;EACD,MAAME,SAAS,GAAGA,CAAA,KAAM;IACpBF,UAAU,EAAE;IACZ,OAAOA,UAAU;EACrB,CAAC;EACD,MAAMG,YAAY,GAAGA,CAAA,KAAOH,UAAU,IAAID,MAAM,CAACK,MAAM,GAAC,CAAC,GAAIH,eAAe,CAAC,CAAC,GAAGC,SAAS,CAAC,CAAC;EAC5F,oBACIP,OAAA;IAAKU,SAAS,EAAER,KAAK,CAACS,KAAM;IAAAC,QAAA,EACvBV,KAAK,CAACW,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,UAASC,SAAS,EAAEC,KAAK,EAAC;MAChDd,UAAU,GAAGC,MAAM,CAACI,YAAY,CAAC,CAAC,CAAC;MACnC,oBAAOR,OAAA;QAA8BU,SAAS,EAAEP,UAAW;QAAAS,QAAA,EAAEI;MAAS,GAApDlB,MAAM,CAACkB,SAAS,CAAC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA0C,CAAC;IAClF,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAAC,EAAA,GArBKrB,aAAa;AAsBnB,eAAeA,aAAa;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}