{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/Photos.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport SearchBar from './SearchBar';\nimport UnSplash from './UnSplash';\nimport config from '../apis/config';\nimport GridImage from './GridImage';\nimport getKey from './KeyGenerator.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Photos = () => {\n  _s();\n  const [keyword, setTerm] = useState('');\n  const [photos, setPhotos] = useState([]);\n  const KEY = 'Client-ID ' + config.unsplashAPI_KEY;\n  const api = config.unsplashAPI_BASE_URL;\n  //console.log(`KEY: ${KEY}\\napi: ${api}`)\n\n  const onChange = value => setTerm(value);\n  const getImageSize = item => {\n    if (window.innerWidth >= 1080) {\n      return item.urls.regular;\n    } else {\n      return item.urls.small;\n    }\n  };\n  const onSubmit = async (term, callback) => {\n    // eslint-disable-next-line\n    const response = await UnSplash.get(api, {\n      params: {\n        query: term\n      },\n      headers: {\n        Authorization: KEY //need to get key\n      }\n    }).then(response => {\n      const images = [];\n      //console.log(`response.data.results: ${response.data.results}`)\n      response.data.results.forEach(item => {\n        images.push({\n          'image': getImageSize(item),\n          'description': item.alt_description,\n          'location': item.user.location\n        });\n      });\n      setPhotos(images);\n      return callback(images);\n    });\n  };\n  const [menuArray, setMenuArray] = useState([]);\n  const updateArray = array => {\n    //console.log(`menuArray: ${JSON.stringify(array, null, 2)}`)\n    setMenuArray(array);\n  };\n  const onFormSubmit = event => {\n    event.preventDefault();\n    console.log(`Search Term: ${keyword}`);\n    onSubmit(keyword, updateArray);\n  };\n  // eslint-disable-next-line\n  const clearMenu = () => menuArray.length > 0 ? setMenuArray([]) : null;\n  const getImage = item => /*#__PURE__*/_jsxDEV(GridImage, {\n    item: item\n  }, getKey(\"thumb\"), false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 32\n  }, this);\n  /*\n  componentDidMount() {\n      if(window.location.pathname.indexOf(\"Photos\") > -1) {\n          this.clearMenu();\n          this.props.onSubmit('surfing pipeline', this.updateArray);\n      }\n      \n  }\n  */\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      children: /*#__PURE__*/_jsxDEV(SearchBar, {\n        onSubmit: onFormSubmit,\n        onChange: onChange,\n        label: \"search for photos\",\n        api: api,\n        KEY: KEY,\n        term: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-88 white p-10\",\n      children: [photos.length, \" photos.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), menuArray.map(item => getImage(item))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_s(Photos, \"vWGRxqUbtQ8YRokaDIzlOCTXl3Y=\");\n_c = Photos;\nexport default Photos;\nvar _c;\n$RefreshReg$(_c, \"Photos\");","map":{"version":3,"names":["React","useState","SearchBar","UnSplash","config","GridImage","getKey","jsxDEV","_jsxDEV","Photos","_s","keyword","setTerm","photos","setPhotos","KEY","unsplashAPI_KEY","api","unsplashAPI_BASE_URL","onChange","value","getImageSize","item","window","innerWidth","urls","regular","small","onSubmit","term","callback","response","get","params","query","headers","Authorization","then","images","data","results","forEach","push","alt_description","user","location","menuArray","setMenuArray","updateArray","array","onFormSubmit","event","preventDefault","console","log","clearMenu","length","getImage","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","children","className","label","map","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Photos.js"],"sourcesContent":["import React, {useState} from 'react';\nimport SearchBar from './SearchBar';\nimport UnSplash from './UnSplash';\nimport config from '../apis/config';\nimport GridImage from './GridImage'\nimport getKey from './KeyGenerator.js';\n\nconst Photos = () => {\n\n    const [keyword, setTerm] = useState('');\n    const [photos, setPhotos] = useState([]);\n    const KEY = 'Client-ID '+config.unsplashAPI_KEY;\n    const api = config.unsplashAPI_BASE_URL;\n    //console.log(`KEY: ${KEY}\\napi: ${api}`)\n    \n    const onChange = (value) => setTerm(value);\n    const getImageSize = (item) => {\n        if (window.innerWidth >= 1080) {\n            return item.urls.regular;\n        } else {\n            return item.urls.small;\n        }\n    }\n    const onSubmit = async (term, callback) => {\n        // eslint-disable-next-line\n        const response = await UnSplash.get(api, {\n                params: {query: term},\n                headers: {\n                    Authorization: KEY//need to get key\n                }\n            })\n            .then (response => {\n                const images = [];\n                //console.log(`response.data.results: ${response.data.results}`)\n                response.data.results.forEach(item => {\n                    images.push({\n                        'image': getImageSize(item),\n                        'description': item.alt_description,\n                        'location': item.user.location\n                    });\n                });\n                setPhotos(images);\n                return callback(images)\n            });\n    }\n    const [menuArray, setMenuArray] = useState([]);\n    const updateArray = (array) => {\n        //console.log(`menuArray: ${JSON.stringify(array, null, 2)}`)\n        setMenuArray(array);\n    }\n    const onFormSubmit = event =>  {\n        event.preventDefault();\n        console.log(`Search Term: ${keyword}`);\n        onSubmit(keyword, updateArray);\n    }\n    // eslint-disable-next-line\n    const clearMenu = () => (menuArray.length>0) ? setMenuArray([]) : null;\n    \n    const getImage = (item) => <GridImage key={getKey(\"thumb\")} item={item}></GridImage>\n    /*\n    componentDidMount() {\n        if(window.location.pathname.indexOf(\"Photos\") > -1) {\n            this.clearMenu();\n            this.props.onSubmit('surfing pipeline', this.updateArray);\n        }\n        \n    }\n    */\n    return (\n        <React.Fragment>\n            <div className='input'>\n                <SearchBar onSubmit={onFormSubmit} onChange={onChange} label='search for photos' api={api} KEY={KEY} term=''/>\n            </div>\n            <div className='mt-88 white p-10'>\n                {photos.length} photos.\n            </div>\n            {menuArray.map((item) => getImage(item))} \n        </React.Fragment>\n    )\n}\nexport default Photos;"],"mappings":"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"},"metadata":{},"sourceType":"module"}