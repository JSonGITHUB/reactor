{"ast":null,"code":"import _classCallCheck from\"/Users/js/Dev/my-first-reactor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/js/Dev/my-first-reactor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/js/Dev/my-first-reactor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/js/Dev/my-first-reactor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import Loader from'../utils/Loader.js';var Geolocate=/*#__PURE__*/function(_React$Component){_inherits(Geolocate,_React$Component);var _super=_createSuper(Geolocate);function Geolocate(props){var _this;_classCallCheck(this,Geolocate);_this=_super.call(this,props);_this.getCurrentPosition=function(){window.navigator.geolocation.getCurrentPosition(//position => console.log(position.coords.longitude),\nfunction(position){var _position$coords=position.coords,longitude=_position$coords.longitude,latitude=_position$coords.latitude;_this.props.returnCurrentPosition(longitude,latitude);//console.log(`getCurrentPosition => coords ^^^^^^^^^^^ ${longitude}, ${latitude}`)\n_this.setState({longitude:longitude,latitude:latitude});/*\n                try {\n                    //if (!this.props.currentPositionExists()) {\n                        this.props.returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n                    //}\n                }catch(err) {\n                }\n                */},function(err){console.log(err);_this.setState({errorMessage:err.message});});};_this.getLocation=function(){return\"\".concat(_this.state.latitude.toFixed(6),\", \").concat(_this.state.longitude.toFixed(6),\" \");};_this.percent=window.innerWidth<700?'twentyfivePercent mt--70 mb--70':'fiftyPercent mt--40 mb--40';_this.loading=function(){return/*#__PURE__*/React.createElement(\"div\",{className:_this.percent},/*#__PURE__*/React.createElement(Loader,{isMotionOn:_this.props.isMotionOn}));};_this.latlon=function(){return _this.state.latitude+\",\"+_this.state.longitude;};var returnCurrentPosition=props.returnCurrentPosition,currentPositionExists=props.currentPositionExists;_this.state={longitude:null,latitude:null,errorMessage:null,returnCurrentPosition:returnCurrentPosition,currentPositionExists:currentPositionExists};return _this;}_createClass(Geolocate,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.timerID=setInterval(function(){return _this2.tick();},5000);}},{key:\"tick\",value:function tick(){this.getCurrentPosition();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){clearInterval(this.timerID);}},{key:\"render\",value:function render(){var _this$state=this.state,latitude=_this$state.latitude,errorMessage=_this$state.errorMessage;var errorExists=errorMessage?true:false;var latExists=latitude?true:false;var errMessage=errorMessage;var gelocationStatus=latExists?this.getLocation():this.loading();gelocationStatus=errorExists?\"\".concat(errMessage):gelocationStatus;/*\n        if (latExists) {\n            if (!this.props.currentPositionExists()) {\n                this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n            }\n        }\n        */return/*#__PURE__*/React.createElement(\"div\",{className:\"color-yellow greet\"},gelocationStatus);}}]);return Geolocate;}(React.Component);export default Geolocate;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js"],"names":["React","Loader","Geolocate","props","getCurrentPosition","window","navigator","geolocation","position","coords","longitude","latitude","returnCurrentPosition","setState","err","console","log","errorMessage","message","getLocation","state","toFixed","percent","innerWidth","loading","isMotionOn","latlon","currentPositionExists","timerID","setInterval","tick","clearInterval","errorExists","latExists","errMessage","gelocationStatus","Component"],"mappings":"okBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,C,GAEMC,CAAAA,S,kHACF,mBAAYC,KAAZ,CAAmB,2CACf,uBAAMA,KAAN,EADe,MAWnBC,kBAXmB,CAWE,UAAM,CACvBC,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BH,kBAA7B,CACI;AACD,SAAAI,QAAQ,CAAI,sBACyBA,QAAQ,CAACC,MADlC,CACCC,SADD,kBACCA,SADD,CACYC,QADZ,kBACYA,QADZ,CAEP,MAAKR,KAAL,CAAWS,qBAAX,CAAiCF,SAAjC,CAA4CC,QAA5C,EACA;AACA,MAAKE,QAAL,CAAc,CACVH,SAAS,CAAEA,SADD,CAEVC,QAAQ,CAAEA,QAFA,CAAd,EAIA;;;;;;;kBAQH,CAlBL,CAmBI,SAAAG,GAAG,CAAI,CACHC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACA,MAAKD,QAAL,CAAc,CACVI,YAAY,CAAEH,GAAG,CAACI,OADR,CAAd,EAIH,CAzBL,EA2BH,CAvCkB,OAoDnBC,WApDmB,CAoDL,2BAAS,MAAKC,KAAL,CAAWT,QAAX,CAAoBU,OAApB,CAA4B,CAA5B,CAAT,cAA4C,MAAKD,KAAL,CAAWV,SAAX,CAAqBW,OAArB,CAA6B,CAA7B,CAA5C,OApDK,OAqDnBC,OArDmB,CAqDRjB,MAAM,CAACkB,UAAP,CAAoB,GAArB,CAA4B,iCAA5B,CAAgE,4BArDvD,OAsDnBC,OAtDmB,CAsDT,8BAAM,2BAAK,SAAS,CAAE,MAAKF,OAArB,eACJ,oBAAC,MAAD,EAAQ,UAAU,CAAE,MAAKnB,KAAL,CAAWsB,UAA/B,EADI,CAAN,EAtDS,OAyDnBC,MAzDmB,CAyDV,iBAAM,OAAKN,KAAL,CAAWT,QAAX,CAAsB,GAAtB,CAA4B,MAAKS,KAAL,CAAWV,SAA7C,EAzDU,IAEPE,CAAAA,qBAFO,CAE0CT,KAF1C,CAEPS,qBAFO,CAEgBe,qBAFhB,CAE0CxB,KAF1C,CAEgBwB,qBAFhB,CAGf,MAAKP,KAAL,CAAa,CACTV,SAAS,CAAE,IADF,CAETC,QAAQ,CAAE,IAFD,CAGTM,YAAY,CAAE,IAHL,CAITL,qBAAqB,CAAEA,qBAJd,CAKTe,qBAAqB,CAAEA,qBALd,CAAb,CAHe,aAUlB,C,mFA8BmB,iBAChB,KAAKC,OAAL,CAAeC,WAAW,CACtB,iBAAM,CAAA,MAAI,CAACC,IAAL,EAAN,EADsB,CAEtB,IAFsB,CAA1B,CAIH,C,mCACM,CACH,KAAK1B,kBAAL,GACH,C,mEACsB,CACnB2B,aAAa,CAAC,KAAKH,OAAN,CAAb,CACH,C,uCAOQ,iBAC8B,KAAKR,KADnC,CACGT,QADH,aACGA,QADH,CACaM,YADb,aACaA,YADb,CAEL,GAAMe,CAAAA,WAAW,CAAIf,YAAD,CAAiB,IAAjB,CAAwB,KAA5C,CACA,GAAMgB,CAAAA,SAAS,CAAItB,QAAD,CAAa,IAAb,CAAoB,KAAtC,CACA,GAAMuB,CAAAA,UAAU,CAAGjB,YAAnB,CACA,GAAIkB,CAAAA,gBAAgB,CAAIF,SAAD,CAAc,KAAKd,WAAL,EAAd,CAAmC,KAAKK,OAAL,EAA1D,CACAW,gBAAgB,CAAIH,WAAD,WAAmBE,UAAnB,EAAkCC,gBAArD,CACA;;;;;;UAOA,mBAAO,2BAAK,SAAS,CAAC,oBAAf,EAAqCA,gBAArC,CAAP,CACH,C,uBA1EmBnC,KAAK,CAACoC,S,EA6E9B,cAAelC,CAAAA,SAAf","sourcesContent":["import React from 'react';\nimport Loader from '../utils/Loader.js';\n\nclass Geolocate extends React.Component {\n    constructor(props) {\n        super(props);\n        const { returnCurrentPosition, currentPositionExists } = props;\n        this.state = {\n            longitude: null,\n            latitude: null,\n            errorMessage: null,\n            returnCurrentPosition: returnCurrentPosition,\n            currentPositionExists: currentPositionExists\n        }\n    }\n    getCurrentPosition = () => {\n        window.navigator.geolocation.getCurrentPosition(\n            //position => console.log(position.coords.longitude),\n           position => {\n                const { longitude, latitude } = position.coords;\n                this.props.returnCurrentPosition(longitude, latitude);\n                //console.log(`getCurrentPosition => coords ^^^^^^^^^^^ ${longitude}, ${latitude}`)\n                this.setState({\n                    longitude: longitude,\n                    latitude: latitude,\n                });\n                /*\n                try {\n                    //if (!this.props.currentPositionExists()) {\n                        this.props.returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n                    //}\n                }catch(err) {\n                }\n                */\n            },\n            err => {\n                console.log(err)\n                this.setState({\n                    errorMessage: err.message\n                });\n\n            }\n        )\n    }\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            5000\n        );\n    }\n    tick() {\n        this.getCurrentPosition();\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n    getLocation = () => `${this.state.latitude.toFixed(6)}, ${this.state.longitude.toFixed(6)} `;\n    percent = (window.innerWidth < 700) ? 'twentyfivePercent mt--70 mb--70' : 'fiftyPercent mt--40 mb--40';\n    loading = () => <div className={this.percent}>\n                <Loader isMotionOn={this.props.isMotionOn}/>\n            </div>;\n    latlon = () => this.state.latitude + \",\" + this.state.longitude;\n    render() {\n        const { latitude, errorMessage } = this.state;\n        const errorExists = (errorMessage) ? true : false;\n        const latExists = (latitude) ? true : false;\n        const errMessage = errorMessage;\n        let gelocationStatus = (latExists) ? this.getLocation() : this.loading();\n        gelocationStatus = (errorExists) ? `${errMessage}` : gelocationStatus;\n        /*\n        if (latExists) {\n            if (!this.props.currentPositionExists()) {\n                this.props.returnCurrentPosition(this.state.longitude, this.state.latitude);\n            }\n        }\n        */\n        return <div className=\"color-yellow greet\">{gelocationStatus}</div>\n    };\n}\n\nexport default Geolocate;"]},"metadata":{},"sourceType":"module"}