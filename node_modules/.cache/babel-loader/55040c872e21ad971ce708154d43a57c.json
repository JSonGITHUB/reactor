{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Loader from \"../utils/Loader.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Geolocate = _ref => {\n  _s();\n  let {\n    isMotionOn,\n    returnCurrentPosition,\n    currentPositionExists\n  } = _ref;\n  const [status, setStatus] = useState({\n    longitude: null,\n    latitude: null,\n    errorMessage: null,\n    returnCurrentPosition: returnCurrentPosition,\n    currentPositionExists: currentPositionExists\n  });\n  useEffect(() => {\n    const getCurrentPosition = () => {\n      window.navigator.geolocation.getCurrentPosition(\n      //position => console.log(position.coords.longitude),\n      position => {\n        const {\n          longitude,\n          latitude\n        } = position.coords;\n        returnCurrentPosition(longitude, latitude);\n        //console.log(`getCurrentPosition => coords ^^^^^^^^^^^ ${longitude}, ${latitude}`)\n        setStatus({\n          longitude: longitude,\n          latitude: latitude,\n          errorMessage: null,\n          returnCurrentPosition: returnCurrentPosition,\n          currentPositionExists: currentPositionExists\n        });\n        /*\n                  try {\n                      //if (!currentPositionExists()) {\n                          returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n                      //}\n                  }catch(err) {\n                  }\n                  */\n      }, err => {\n        console.log(err);\n        setStatus({\n          longitude: status.longitude,\n          latitude: status.latitude,\n          errorMessage: err.message,\n          returnCurrentPosition: returnCurrentPosition,\n          currentPositionExists: currentPositionExists\n        });\n      });\n    };\n    const tick = () => {\n      getCurrentPosition();\n    };\n    const timerID = setInterval(() => tick(), 5000);\n    return function cleanUp() {\n      clearInterval(timerID);\n    };\n  }, [currentPositionExists, returnCurrentPosition, status]);\n  const getLocation = () => `${status.latitude.toFixed(6)}, ${status.longitude.toFixed(6)} `;\n  const percent = window.innerWidth < 700 ? \"twentyfivePercent mt--70 mb--70\" : \"fiftyPercent mt--40 mb--40\";\n  const loading = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: percent,\n    children: /*#__PURE__*/_jsxDEV(Loader, {\n      isMotionOn: isMotionOn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n  // eslint-disable-next-line\n  const latlon = () => status.latitude + \",\" + status.longitude;\n  const {\n    latitude,\n    errorMessage\n  } = status;\n  const errorExists = errorMessage ? true : false;\n  const latExists = latitude ? true : false;\n  const errMessage = errorMessage;\n  let geolocationStatus = latExists ? getLocation() : loading();\n  geolocationStatus = errorExists ? `${errMessage}` : geolocationStatus;\n  /*\n    if (latExists) {\n        if (!currentPositionExists()) {\n            returnCurrentPosition(status.longitude, status.latitude);\n        }\n    }\n    */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"color-yellow greet\",\n    children: geolocationStatus\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n_s(Geolocate, \"GeoWH17Sb7tQ0nN/ukiLt/6spNU=\");\n_c = Geolocate;\nexport default Geolocate;\nvar _c;\n$RefreshReg$(_c, \"Geolocate\");","map":{"version":3,"names":["React","useState","useEffect","Loader","jsxDEV","_jsxDEV","Geolocate","_ref","_s","isMotionOn","returnCurrentPosition","currentPositionExists","status","setStatus","longitude","latitude","errorMessage","getCurrentPosition","window","navigator","geolocation","position","coords","err","console","log","message","tick","timerID","setInterval","cleanUp","clearInterval","getLocation","toFixed","percent","innerWidth","loading","className","children","fileName","_jsxFileName","lineNumber","columnNumber","latlon","errorExists","latExists","errMessage","geolocationStatus","_c","$RefreshReg$"],"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/Geolocator.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Loader from \"../utils/Loader.js\";\n\nconst Geolocate = ({\n  isMotionOn,\n  returnCurrentPosition,\n  currentPositionExists,\n}) => {\n  const [status, setStatus] = useState({\n    longitude: null,\n    latitude: null,\n    errorMessage: null,\n    returnCurrentPosition: returnCurrentPosition,\n    currentPositionExists: currentPositionExists,\n  });\n\n  useEffect(() => {\n    const getCurrentPosition = () => {\n      window.navigator.geolocation.getCurrentPosition(\n        //position => console.log(position.coords.longitude),\n        (position) => {\n          const { longitude, latitude } = position.coords;\n          returnCurrentPosition(longitude, latitude);\n          //console.log(`getCurrentPosition => coords ^^^^^^^^^^^ ${longitude}, ${latitude}`)\n          setStatus({\n            longitude: longitude,\n            latitude: latitude,\n            errorMessage: null,\n            returnCurrentPosition: returnCurrentPosition,\n            currentPositionExists: currentPositionExists,\n          });\n          /*\n                    try {\n                        //if (!currentPositionExists()) {\n                            returnCurrentPosition(position.coords.longitude, position.coords.latitude);\n                        //}\n                    }catch(err) {\n                    }\n                    */\n        },\n        (err) => {\n          console.log(err);\n          setStatus({\n            longitude: status.longitude,\n            latitude: status.latitude,\n            errorMessage: err.message,\n            returnCurrentPosition: returnCurrentPosition,\n            currentPositionExists: currentPositionExists,\n          });\n        }\n      );\n    };\n    const tick = () => {\n      getCurrentPosition();\n    };\n    const timerID = setInterval(() => tick(), 5000);\n    return function cleanUp() {\n      clearInterval(timerID);\n    };\n  }, [currentPositionExists, returnCurrentPosition, status]);\n  const getLocation = () =>\n    `${status.latitude.toFixed(6)}, ${status.longitude.toFixed(6)} `;\n  const percent =\n    window.innerWidth < 700\n      ? \"twentyfivePercent mt--70 mb--70\"\n      : \"fiftyPercent mt--40 mb--40\";\n  const loading = () => (\n    <div className={percent}>\n      <Loader isMotionOn={isMotionOn} />\n    </div>\n  );\n  // eslint-disable-next-line\n  const latlon = () => status.latitude + \",\" + status.longitude;\n  const { latitude, errorMessage } = status;\n  const errorExists = errorMessage ? true : false;\n  const latExists = latitude ? true : false;\n  const errMessage = errorMessage;\n  let geolocationStatus = latExists ? getLocation() : loading();\n  geolocationStatus = errorExists ? `${errMessage}` : geolocationStatus;\n  /*\n    if (latExists) {\n        if (!currentPositionExists()) {\n            returnCurrentPosition(status.longitude, status.latitude);\n        }\n    }\n    */\n  return <div className=\"color-yellow greet\">{geolocationStatus}</div>;\n};\n\nexport default Geolocate;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAGC,IAAA,IAIZ;EAAAC,EAAA;EAAA,IAJa;IACjBC,UAAU;IACVC,qBAAqB;IACrBC;EACF,CAAC,GAAAJ,IAAA;EACC,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC;IACnCa,SAAS,EAAE,IAAI;IACfC,QAAQ,EAAE,IAAI;IACdC,YAAY,EAAE,IAAI;IAClBN,qBAAqB,EAAEA,qBAAqB;IAC5CC,qBAAqB,EAAEA;EACzB,CAAC,CAAC;EAEFT,SAAS,CAAC,MAAM;IACd,MAAMe,kBAAkB,GAAGA,CAAA,KAAM;MAC/BC,MAAM,CAACC,SAAS,CAACC,WAAW,CAACH,kBAAkB;MAC7C;MACCI,QAAQ,IAAK;QACZ,MAAM;UAAEP,SAAS;UAAEC;QAAS,CAAC,GAAGM,QAAQ,CAACC,MAAM;QAC/CZ,qBAAqB,CAACI,SAAS,EAAEC,QAAQ,CAAC;QAC1C;QACAF,SAAS,CAAC;UACRC,SAAS,EAAEA,SAAS;UACpBC,QAAQ,EAAEA,QAAQ;UAClBC,YAAY,EAAE,IAAI;UAClBN,qBAAqB,EAAEA,qBAAqB;UAC5CC,qBAAqB,EAAEA;QACzB,CAAC,CAAC;QACF;AACV;AACA;AACA;AACA;AACA;AACA;AACA;MACQ,CAAC,EACAY,GAAG,IAAK;QACPC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChBV,SAAS,CAAC;UACRC,SAAS,EAAEF,MAAM,CAACE,SAAS;UAC3BC,QAAQ,EAAEH,MAAM,CAACG,QAAQ;UACzBC,YAAY,EAAEO,GAAG,CAACG,OAAO;UACzBhB,qBAAqB,EAAEA,qBAAqB;UAC5CC,qBAAqB,EAAEA;QACzB,CAAC,CAAC;MACJ,CACF,CAAC;IACH,CAAC;IACD,MAAMgB,IAAI,GAAGA,CAAA,KAAM;MACjBV,kBAAkB,CAAC,CAAC;IACtB,CAAC;IACD,MAAMW,OAAO,GAAGC,WAAW,CAAC,MAAMF,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC;IAC/C,OAAO,SAASG,OAAOA,CAAA,EAAG;MACxBC,aAAa,CAACH,OAAO,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,CAACjB,qBAAqB,EAAED,qBAAqB,EAAEE,MAAM,CAAC,CAAC;EAC1D,MAAMoB,WAAW,GAAGA,CAAA,KACjB,GAAEpB,MAAM,CAACG,QAAQ,CAACkB,OAAO,CAAC,CAAC,CAAE,KAAIrB,MAAM,CAACE,SAAS,CAACmB,OAAO,CAAC,CAAC,CAAE,GAAE;EAClE,MAAMC,OAAO,GACXhB,MAAM,CAACiB,UAAU,GAAG,GAAG,GACnB,iCAAiC,GACjC,4BAA4B;EAClC,MAAMC,OAAO,GAAGA,CAAA,kBACd/B,OAAA;IAAKgC,SAAS,EAAEH,OAAQ;IAAAI,QAAA,eACtBjC,OAAA,CAACF,MAAM;MAACM,UAAU,EAAEA;IAAW;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CACN;EACD;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM/B,MAAM,CAACG,QAAQ,GAAG,GAAG,GAAGH,MAAM,CAACE,SAAS;EAC7D,MAAM;IAAEC,QAAQ;IAAEC;EAAa,CAAC,GAAGJ,MAAM;EACzC,MAAMgC,WAAW,GAAG5B,YAAY,GAAG,IAAI,GAAG,KAAK;EAC/C,MAAM6B,SAAS,GAAG9B,QAAQ,GAAG,IAAI,GAAG,KAAK;EACzC,MAAM+B,UAAU,GAAG9B,YAAY;EAC/B,IAAI+B,iBAAiB,GAAGF,SAAS,GAAGb,WAAW,CAAC,CAAC,GAAGI,OAAO,CAAC,CAAC;EAC7DW,iBAAiB,GAAGH,WAAW,GAAI,GAAEE,UAAW,EAAC,GAAGC,iBAAiB;EACrE;AACF;AACA;AACA;AACA;AACA;AACA;EACE,oBAAO1C,OAAA;IAAKgC,SAAS,EAAC,oBAAoB;IAAAC,QAAA,EAAES;EAAiB;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACtE,CAAC;AAAClC,EAAA,CApFIF,SAAS;AAAA0C,EAAA,GAAT1C,SAAS;AAsFf,eAAeA,SAAS;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}