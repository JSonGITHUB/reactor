{"ast":null,"code":"import React from 'react';\n\nclass KeyGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.generateKey = () => {\n      let generate = () => `${this.props.label}${Math.round(Math.random() * 100)}`;\n\n      let key = generate();\n      key = this.state.keyArray.includes(key) ? generate() : key;\n      this.keyArray.push(key);\n      this.setState({\n        key: key,\n        keyArray: this.keyArray\n      });\n    };\n\n    this.keyArray = [];\n    this.state = {\n      key: \"\",\n      keyArray: []\n    };\n  }\n\n  render() {\n    console.log(`key: ${this.state.key} keyArray: ${this.state.keyArray}`);\n    return this.state.key;\n  }\n\n}\n\nexport default KeyGenerator;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/utils/KeyGenerator.js"],"names":["React","KeyGenerator","Component","constructor","props","generateKey","generate","label","Math","round","random","key","state","keyArray","includes","push","setState","render","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAQnBC,WARmB,GAQL,MAAM;AAChB,UAAIC,QAAQ,GAAG,MAAO,GAAE,KAAKF,KAAL,CAAWG,KAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAA+B,EAA3E;;AACA,UAAIC,GAAG,GAAGL,QAAQ,EAAlB;AACAK,MAAAA,GAAG,GAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,QAApB,CAA6BH,GAA7B,CAAD,GAAsCL,QAAQ,EAA9C,GAAmDK,GAAzD;AACA,WAAKE,QAAL,CAAcE,IAAd,CAAmBJ,GAAnB;AACA,WAAKK,QAAL,CAAc;AACVL,QAAAA,GAAG,EAAEA,GADK;AAEVE,QAAAA,QAAQ,EAAE,KAAKA;AAFL,OAAd;AAIH,KAjBkB;;AAEf,SAAKA,QAAL,GAAgB,EAAhB;AACA,SAAKD,KAAL,GAAa;AACTD,MAAAA,GAAG,EAAE,EADI;AAETE,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAIH;;AAWDI,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAa,QAAO,KAAKP,KAAL,CAAWD,GAAI,cAAa,KAAKC,KAAL,CAAWC,QAAS,EAApE;AACA,WACI,KAAKD,KAAL,CAAWD,GADf;AAGH;;AAxBsC;;AA2B3C,eAAeV,YAAf","sourcesContent":["import React from 'react';\n\nclass KeyGenerator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.keyArray = [];\n        this.state = {\n            key: \"\", \n            keyArray: []\n        };\n    }\n    generateKey = () => {\n        let generate = () => `${this.props.label}${(Math.round(Math.random()*100))}`;\n        let key = generate();\n        key = (this.state.keyArray.includes(key)) ? generate() : key;\n        this.keyArray.push(key);\n        this.setState({\n            key: key,\n            keyArray: this.keyArray\n        })\n    }\n    render() {\n        console.log(`key: ${this.state.key} keyArray: ${this.state.keyArray}`)\n        return (\n            this.state.key\n        );\n    }\n}\n\nexport default KeyGenerator;  "]},"metadata":{},"sourceType":"module"}