{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/BoilingVerdict.js\";\nimport React from 'react';\n\nconst BoilingVerdict = props => {\n  const tryConvert = (temperature, convert) => {\n    const input = parseFloat(temperature);\n\n    if (Number.isNaN(input)) {\n      return '';\n    }\n\n    const output = convert(input);\n    const rounded = Math.round(output * 1000) / 1000;\n    return rounded.toString();\n  };\n\n  const toCelsius = fahrenheit => (fahrenheit - 32) * 5 / 9;\n\n  const toFahrenheit = celsius => celsius * 9 / 5 + 32;\n\n  if (props.celsius >= 100) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 40\n      }\n    }, \"water is boiling...\");\n  }\n\n  if (props.celsius <= 0) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 38\n      }\n    }, \"water is freezing...\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }\n  }, \"water is not boiling or freezing...\");\n};\n\nexport default BoilingVerdict;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/BoilingVerdict.js"],"names":["React","BoilingVerdict","props","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","rounded","Math","round","toString","toCelsius","fahrenheit","toFahrenheit","celsius"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC5B,QAAMC,UAAU,GAAG,CAACC,WAAD,EAAcC,OAAd,KAA0B;AACzC,UAAMC,KAAK,GAAGC,UAAU,CAACH,WAAD,CAAxB;;AACA,QAAII,MAAM,CAACC,KAAP,CAAaH,KAAb,CAAJ,EAAyB;AACrB,aAAO,EAAP;AACH;;AACD,UAAMI,MAAM,GAAGL,OAAO,CAACC,KAAD,CAAtB;AACA,UAAMK,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,IAApB,IAA4B,IAA5C;AACA,WAAOC,OAAO,CAACG,QAAR,EAAP;AACH,GARD;;AASA,QAAMC,SAAS,GAAIC,UAAD,IAAgB,CAACA,UAAU,GAAG,EAAd,IAAoB,CAApB,GAAwB,CAA1D;;AACA,QAAMC,YAAY,GAAIC,OAAD,IAAcA,OAAO,GAAG,CAAV,GAAc,CAAf,GAAoB,EAAtD;;AAEA,MAAIhB,KAAK,CAACgB,OAAN,IAAiB,GAArB,EAA0B;AAAE,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AAAmC;;AAC/D,MAAIhB,KAAK,CAACgB,OAAN,IAAiB,CAArB,EAAwB;AAAE,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;AAAoC;;AAC9D,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAP;AACH,CAhBD;;AAkBA,eAAejB,cAAf","sourcesContent":["import React from 'react';\n\nconst BoilingVerdict = props => {\n    const tryConvert = (temperature, convert) => {\n        const input = parseFloat(temperature);\n        if (Number.isNaN(input)) {\n            return '';\n        }\n        const output = convert(input);\n        const rounded = Math.round(output * 1000) / 1000;\n        return rounded.toString();\n    }\n    const toCelsius = (fahrenheit) => (fahrenheit - 32) * 5 / 9;\n    const toFahrenheit = (celsius) => (celsius * 9 / 5) + 32;\n\n    if (props.celsius >= 100) { return <p>water is boiling...</p> }\n    if (props.celsius <= 0) { return <p>water is freezing...</p> }\n    return <p>water is not boiling or freezing...</p>;\n}\n\nexport default BoilingVerdict;"]},"metadata":{},"sourceType":"module"}