{"ast":null,"code":"var _jsxFileName = \"/Users/js/Dev/my-first-reactor/src/components/Logger.js\";\nimport React from 'react';\nimport LogEntry from './LogEntry.js';\nimport Loader from './utils/Loader.js';\n\nclass Logger extends React.Component {\n  constructor(props) {\n    super(props);\n    this.templateData = {\n      Day: {\n        Date: \"2020-01-17T08:00:00.000Z\",\n        Day: 17,\n        Month: 1,\n        Year: 2020\n      },\n      Location: {\n        Break: \"Notch\"\n      },\n      Swell: {\n        Direction: \"NW\",\n        Height: \"head high\",\n        Report: \"4ft\"\n      },\n      Tide: {\n        Phase: \"High => Low\",\n        Height: \"2ft\"\n      },\n      Wind: {\n        Direction: \"NW\",\n        Orientation: \"Offshore\",\n        MPH: \"5mph\",\n        Surface: \"Glassy\"\n      },\n      Conditions: {\n        Conditions: \"Firing\"\n      },\n      Comments: {\n        \"notes\": \"Biggest crowd but plenty of sick ones...\"\n      }\n    };\n\n    this.generateNewLogId = () => {\n      const date = new Date();\n      const st = date.toDateString().replace(/ /g, \"\");\n      const nd = date.toLocaleTimeString().replace(/ /g, \"\"); //localStorage.setItem(\"lastPostId\", `${st}${nd}`);\n\n      const newId = `${st}${nd}`;\n      console.log(`LogId: generateNewLogId => this.state.logId: ${newId}`);\n      /*\n      this.setState({\n          logId: newId\n      });\n      */\n\n      return newId;\n    };\n\n    this.getLocalLastRecordId = () => localStorage.getItem(\"lastPostId\");\n\n    this.lastRecordIdExists = () => this.getLocalLastRecordId() === null ? false : true;\n\n    this.lastRecordExists = () => this.lastRecordIdExists() === true && localStorage.getItem(this.getLocalLastRecordId()) !== null ? true : false;\n\n    this.getLastRecordId = () => localStorage.getItem(\"lastPostId\") === null ? this.generateNewLogId() : localStorage.getItem(\"lastPostId\");\n\n    this.getLogId = () => this.props.location.state === undefined || this.props.location.state === \"\" ? this.getLastRecordId() : this.props.location.state.logId.item;\n\n    this.getStateLog = () => this.state.log;\n\n    console.log(`Logger => constructor -> props.logId: ${this.getLogId()}`);\n    console.log(`Logger => constructor -> localStorage.getItem: ${this.getLogId()} ====> ${localStorage.getItem(this.getLogId())}`);\n\n    if (localStorage.getItem(this.getLogId()) === null) {\n      this.log = this.templateData;\n      this.lodId = this.generateNewLogId();\n    } else {\n      this.log = JSON.parse(localStorage.getItem(this.getLogId()));\n      this.logId = this.getLogId();\n    }\n\n    console.log(`Logger => constructor -> log: ${JSON.stringify(this.log, null, 2)}`);\n    this.state = {\n      date: new Date(),\n      log: this.log,\n      items: [],\n      isLoaded: false,\n      logId: this.logId\n    };\n    this.updateLog = this.updateLog.bind(this);\n    this.getStateLog = this.getStateLog.bind(this);\n  }\n\n  componentDidMount() {\n    //const getLastId = () => (localStorage.getItem(localStorage.getItem(\"lastPostId\")) === null) ? this.postDirectory[this.postDirectory.length-1] : localStorage.getItem(\"lastPostId\");\n    //const logId = (this.props.location.state === undefined) ? getLastId() : this.props.location.state.logId.item;\n    //console.log(`Logger => componentDidMount -> logId: ${logId}`)\n    let data;\n\n    const returnJSON = response => response.json();\n\n    const returnRejection = response => Promise.reject({\n      status: response.status,\n      data\n    });\n\n    const validate = response => response.ok ? returnJSON(response) : returnRejection(response);\n\n    const requestInit = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      mode: 'cors',\n      cache: 'default'\n    }; //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n    //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n\n    const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json'; //const uri = 'localhost:8080/writeSurfLog.json';\n\n    fetch(uri).then(response => validate(response)).then(data => {\n      this.setState({\n        isLoaded: true,\n        items: data,\n        logId: this.getLogId()\n      });\n    }).catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n  }\n\n  updateLog(groupTitle, label, selected, set) {\n    this.log[groupTitle][label] = selected;\n\n    if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n      this.setState({\n        log: this.log\n      });\n    }\n  }\n\n  render() {\n    let {\n      isLoaded,\n      items\n    } = this.state; //console.log(`Logger => ${JSON.stringify(this.state, null, 2)}`);\n\n    let appInterface = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-content fadeIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex3Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 33\n      }\n    }));\n\n    if (isLoaded) {\n      appInterface = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App-content fadeIn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex3Column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex3Column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(LogEntry, {\n        logId: this.getLogId(),\n        onChange: this.updateLog,\n        getStateLog: this.getStateLog,\n        title: \"Session Log\",\n        message: \"Add your session data\",\n        buttonLabel: \"submit\",\n        items: items,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex3Column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return appInterface;\n  }\n\n}\n\nexport default Logger;","map":{"version":3,"sources":["/Users/js/Dev/my-first-reactor/src/components/Logger.js"],"names":["React","LogEntry","Loader","Logger","Component","constructor","props","templateData","Day","Date","Month","Year","Location","Break","Swell","Direction","Height","Report","Tide","Phase","Wind","Orientation","MPH","Surface","Conditions","Comments","generateNewLogId","date","st","toDateString","replace","nd","toLocaleTimeString","newId","console","log","getLocalLastRecordId","localStorage","getItem","lastRecordIdExists","lastRecordExists","getLastRecordId","getLogId","location","state","undefined","logId","item","getStateLog","lodId","JSON","parse","stringify","items","isLoaded","updateLog","bind","componentDidMount","data","returnJSON","response","json","returnRejection","Promise","reject","status","validate","ok","requestInit","method","headers","mode","cache","uri","fetch","then","setState","catch","err","window","pathname","groupTitle","label","selected","set","render","appInterface"],"mappings":"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","sourcesContent":["import React from 'react';\nimport LogEntry from './LogEntry.js';\nimport Loader from './utils/Loader.js';\nclass Logger extends React.Component {\n\n    templateData = {\n        Day: {\n            Date: \"2020-01-17T08:00:00.000Z\",\n            Day: 17,\n            Month: 1,\n            Year: 2020\n        },\n        Location: {\n            Break: \"Notch\"\n        },\n        Swell: {\n            Direction: \"NW\",\n            Height: \"head high\",\n            Report: \"4ft\"\n        },\n        Tide: {\n            Phase: \"High => Low\",\n            Height: \"2ft\"\n        },\n        Wind: {\n            Direction: \"NW\",\n            Orientation: \"Offshore\",\n            MPH: \"5mph\",\n            Surface: \"Glassy\"\n        },\n        Conditions: {\n            Conditions: \"Firing\"\n        },\n        Comments: {\n            \"notes\": \"Biggest crowd but plenty of sick ones...\"\n        }\n    };\n    generateNewLogId = () => {\n        const date = new Date()\n        const st = date.toDateString().replace(/ /g,\"\");\n        const nd = date.toLocaleTimeString().replace(/ /g,\"\");\n        //localStorage.setItem(\"lastPostId\", `${st}${nd}`);\n        const newId = `${st}${nd}`;\n        console.log(`LogId: generateNewLogId => this.state.logId: ${newId}`);\n        /*\n        this.setState({\n            logId: newId\n        });\n        */\n        return newId;\n    }\n    getLocalLastRecordId = () => localStorage.getItem(\"lastPostId\");\n    lastRecordIdExists = () => (this.getLocalLastRecordId() === null) ? false : true; \n    lastRecordExists = () => (this.lastRecordIdExists() === true && localStorage.getItem(this.getLocalLastRecordId()) !== null) ? true : false\n    getLastRecordId = () => (localStorage.getItem(\"lastPostId\") === null) ? this.generateNewLogId() : localStorage.getItem(\"lastPostId\");\n    getLogId = () => (this.props.location.state === undefined || this.props.location.state === \"\") ? this.getLastRecordId() : this.props.location.state.logId.item;\n\n    constructor(props) {\n        super(props);\n        console.log(`Logger => constructor -> props.logId: ${this.getLogId()}`)\n        console.log(`Logger => constructor -> localStorage.getItem: ${this.getLogId()} ====> ${localStorage.getItem(this.getLogId())}`)\n        if (localStorage.getItem(this.getLogId()) === null) {\n            this.log = this.templateData;\n            this.lodId = this.generateNewLogId();\n        } else {\n            this.log = JSON.parse(localStorage.getItem(this.getLogId()));\n            this.logId = this.getLogId()\n        }\n        console.log(`Logger => constructor -> log: ${JSON.stringify(this.log,null,2)}`)\n        this.state = {\n            date: new Date(),\n            log: this.log,\n            items: [],\n            isLoaded: false,\n            logId: this.logId\n        };\n        this.updateLog = this.updateLog.bind(this);\n        this.getStateLog = this.getStateLog.bind(this);\n    }\n    componentDidMount() {\n        //const getLastId = () => (localStorage.getItem(localStorage.getItem(\"lastPostId\")) === null) ? this.postDirectory[this.postDirectory.length-1] : localStorage.getItem(\"lastPostId\");\n        //const logId = (this.props.location.state === undefined) ? getLastId() : this.props.location.state.logId.item;\n        //console.log(`Logger => componentDidMount -> logId: ${logId}`)\n        let data;\n        const returnJSON = (response) => response.json();\n        const returnRejection = (response) => Promise.reject({status: response.status, data});\n        const validate = (response) => (response.ok) ? returnJSON(response) : returnRejection(response);\n        const requestInit = {\n            method:'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            cache: 'default'\n        };\n        //const uri = new Request('https://jsongithub.github.io/portfolio/assets/data/appData.json', requestInit);\n        //GOOD const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        const uri = 'https://jsongithub.github.io/portfolio/assets/data/appData.json';\n        //const uri = 'localhost:8080/writeSurfLog.json';\n        fetch(uri)\n            .then(response => validate(response))\n            .then(data => {\n                this.setState({\n                    isLoaded: true,\n                    items: data,\n                    logId: this.getLogId()\n                })\n            })\n            .catch(err => console.log(`Something went wrong!\\nuri: ${uri} \\npath: ${window.location.pathname}\\n`, err));\n       \n    }\n\n    updateLog(groupTitle, label, selected, set) {\n        this.log[groupTitle][label] = selected;\n        if (groupTitle !== undefined && groupTitle !== 1 && selected !== undefined && set) {\n            this.setState({log: this.log});\n        }\n    }\n    getStateLog = () => this.state.log;\n    \n    render() {      \n        let {isLoaded, items} = this.state;           \n        //console.log(`Logger => ${JSON.stringify(this.state, null, 2)}`);\n        let appInterface = <div className=\"App-content fadeIn\">\n                                <div className=\"flex3Column\"></div>\n                                <div className=\"flex3Column\">\n                                    <Loader />\n                                </div>\n                                <div className=\"flex3Column\"></div>\n                            </div>;\n        if (isLoaded) {\n            appInterface = <div className=\"App-content fadeIn\">\n                <div className=\"flex3Column\"></div>\n                <div className=\"flex3Column\">\n                    <LogEntry\n                        logId={this.getLogId()}\n                        onChange={this.updateLog} \n                        getStateLog={this.getStateLog} \n                        title=\"Session Log\" \n                        message=\"Add your session data\"  \n                        buttonLabel=\"submit\" \n                        items={items}\n                    />\n                </div>\n                <div className=\"flex3Column\"></div>\n            </div>\n            \n        }\n        return (\n            appInterface            \n        )\n    }\n    \n}\nexport default Logger;"]},"metadata":{},"sourceType":"module"}